Fichier: assets\styles\app.css
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\assets\styles\app.css
-----
body {
    background-color: skyblue;
}

==================================================

Fichier: Templates\base.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\base.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}ESPRIT CV Generator{% endblock %}</title>

    {% block stylesheets %}
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        {{ include('partials/_styles.html.twig') }}
    {% endblock %}
</head>
<body>
{% block header %}
    {{ include('partials/_header.html.twig') }}
{% endblock %}

{% block body %}{% endblock %}

{% block footer %}
    <footer class="footer mt-auto py-3 bg-light">
        <div class="container text-center">
            <small class="text-muted">
                ESPRIT CV Generator | Made with <i class="fas fa-heart text-danger"></i> by ESPRIT
            </small>
        </div>
    </footer>
{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
{% endblock %}
</body>
</html>
==================================================

Fichier: Templates\cv_generator\cv_template.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        body {
            font-family: 'DejaVu Sans', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .photo {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            overflow: hidden;
            margin: 0 auto 20px;
        }

        .photo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        h1 {
            font-size: 24px;
            margin: 0 0 5px;
            color: #ee3124;
        }

        .contact-info {
            font-size: 14px;
            margin-bottom: 10px;
        }

        .section {
            margin-bottom: 25px;
        }

        h2 {
            font-size: 18px;
            color: #ee3124;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            margin-bottom: 15px;
        }

        .entry {
            margin-bottom: 15px;
        }

        .entry-title {
            font-weight: bold;
            margin-bottom: 3px;
        }

        .entry-subtitle {
            font-style: italic;
            margin-bottom: 3px;
        }

        .entry-period {
            font-size: 13px;
            color: #666;
            margin-bottom: 5px;
        }

        .skills-list {
            display: flex;
            flex-wrap: wrap;
        }

        .skill-item {
            background-color: #f5f5f5;
            padding: 5px 10px;
            margin-right: 8px;
            margin-bottom: 8px;
            border-radius: 3px;
            font-size: 13px;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            font-size: 12px;
            color: #999;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        {% if photoData is defined and photoData %}
            <div class="photo">
                <img src="{{ photoData }}" alt="Profile Photo">
            </div>
        {% endif %}

        <h1>{{ data.firstName }} {{ data.lastName }}</h1>

        <div class="contact-info">
            {% if data.email %}
                {{ data.email }}{% if data.phone %} | {% endif %}
            {% endif %}

            {% if data.phone %}
                {{ data.phone }}
            {% endif %}
        </div>

        {% if data.address or data.city or data.country %}
            <div class="contact-info">
                {{ [data.address, data.city, data.country]|filter(v => v is not empty)|join(', ') }}
            </div>
        {% endif %}
    </div>

    {% if data.education is defined and data.education|length > 0 %}
        <div class="section">
            <h2>Education</h2>

            {% for education in data.education %}
                <div class="entry">
                    <div class="entry-title">{{ education.degree }}</div>
                    <div class="entry-subtitle">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                    <div class="entry-period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                    {% if education.description %}
                        <div>{{ education.description }}</div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% endif %}

    {% if data.experience is defined and data.experience|length > 0 %}
        <div class="section">
            <h2>Professional Experience</h2>

            {% for experience in data.experience %}
                <div class="entry">
                    <div class="entry-title">{{ experience.position }}</div>
                    <div class="entry-subtitle">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                    <div class="entry-period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                    {% if experience.description %}
                        <div>{{ experience.description }}</div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% endif %}

    {% if data.skills is defined and data.skills|length > 0 %}
        <div class="section">
            <h2>Skills</h2>

            <div class="skills-list">
                {% for skill in data.skills %}
                    <div class="skill-item">{{ skill }}</div>
                {% endfor %}
            </div>
        </div>
    {% endif %}

    {% if data.additionalInfo %}
        <div class="section">
            <h2>Additional Information</h2>

            <div>{{ data.additionalInfo }}</div>
        </div>
    {% endif %}

    <div class="footer">
        <p>CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator</p>
    </div>
</div>
</body>
</html>
==================================================

Fichier: Templates\cv_generator\cv_template_blue.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template_blue.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2c3e50;
            --accent: #1abc9c;
            --dark: #212529;
            --light: #f8f9fa;
            --gray: #6c757d;
            --border: #dee2e6;
            --white: #ffffff;
        }

        body {
            font-family: 'DejaVu Sans', sans-serif;
            color: var(--dark);
            background-color: var(--light);
            line-height: 1.7;
            margin: 0;
            padding: 0;
        }

        .cv-container {
            max-width: 1140px;
            margin: 0 auto;
            overflow: hidden;
            background-color: var(--white);
            border-radius: 8px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.08);
        }

        header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            padding: 60px 40px;
            color: var(--white);
            position: relative;
            overflow: hidden;
        }

        header::before {
            content: '';
            position: absolute;
            right: -100px;
            top: -100px;
            width: 400px;
            height: 400px;
            background: rgba(255,255,255,0.05);
            border-radius: 50%;
        }

        header::after {
            content: '';
            position: absolute;
            left: -50px;
            bottom: -100px;
            width: 250px;
            height: 250px;
            background: rgba(255,255,255,0.05);
            border-radius: 50%;
        }

        .profile-title {
            position: relative;
            z-index: 1;
        }

        .name {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .position {
            font-size: 22px;
            opacity: 0.9;
            font-weight: 300;
            margin-bottom: 25px;
        }

        .contact-list {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 30px;
        }

        .contact-item {
            display: flex;
            align-items: center;
            background-color: rgba(255,255,255,0.1);
            padding: 8px 15px;
            border-radius: 30px;
        }

        .contact-icon {
            margin-right: 10px;
            font-weight: bold;
        }

        main {
            padding: 40px;
        }

        .section {
            margin-bottom: 50px;
        }

        .section:last-child {
            margin-bottom: 0;
        }

        .section-title {
            color: var(--primary);
            font-weight: 600;
            font-size: 24px;
            margin-bottom: 30px;
            position: relative;
            display: inline-block;
        }

        .section-title::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: -10px;
            width: 50%;
            height: 4px;
            background-color: var(--accent);
            border-radius: 2px;
        }

        .about-text {
            font-size: 16px;
            line-height: 1.8;
        }

        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 0;
            top: 8px;
            height: calc(100% - 8px);
            width: 2px;
            background-color: var(--primary);
        }

        .timeline-item {
            position: relative;
            padding-bottom: 40px;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-dot {
            position: absolute;
            left: -30px;
            top: 8px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background-color: var(--white);
            border: 3px solid var(--primary);
        }

        .timeline-title {
            font-weight: 600;
            font-size: 18px;
            color: var(--dark);
            margin-bottom: 5px;
            display: flex;
            align-items: center;
        }

        .timeline-company {
            font-weight: 500;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .timeline-period {
            color: var(--gray);
            font-size: 14px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .skills-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .skill-tag {
            background-color: rgba(52, 152, 219, 0.1);
            color: var(--primary);
            border-radius: 30px;
            padding: 8px 16px;
            font-size: 14px;
            font-weight: 500;
        }

        .language-item {
            margin-bottom: 15px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
        }

        .col-8 {
            width: 70%;
        }

        .col-4 {
            width: 30%;
        }

        .profile-img {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255,255,255,0.2);
            margin-left: auto;
        }

        ul {
            padding-left: 20px;
        }

        @media print {
            body {
                background-color: white;
                color: black;
            }

            .cv-container {
                box-shadow: none;
                margin: 0;
                max-width: none;
            }
        }
    </style>
</head>
<body>
<div class="cv-container">
    <!-- Header Section -->
    <header>
        <div class="row">
            <div class="col-8 profile-title">
                <h1 class="name">{{ data.firstName }} {{ data.lastName }}</h1>
                <div class="position">{{ data.position }}</div>
                {% if data.additionalInfo %}
                    <p>{{ data.additionalInfo }}</p>
                {% endif %}

                <div class="contact-list">
                    {% if data.email %}
                        <div class="contact-item">
                            <span class="contact-icon">@</span>
                            <span>{{ data.email }}</span>
                        </div>
                    {% endif %}

                    {% if data.phone %}
                        <div class="contact-item">
                            <span class="contact-icon">☏</span>
                            <span>{{ data.phone }}</span>
                        </div>
                    {% endif %}

                    {% if data.address or data.city or data.country %}
                        <div class="contact-item">
                            <span class="contact-icon">⌂</span>
                            <span>{{ [data.city, data.country]|filter(v => v is not empty)|join(', ') }}</span>
                        </div>
                    {% endif %}

                    {% if data.github %}
                        <div class="contact-item">
                            <span class="contact-icon">GH</span>
                            <span>{{ data.github }}</span>
                        </div>
                    {% endif %}
                </div>
            </div>
            <div class="col-4" style="text-align: right;">
                {% if photoData is defined and photoData %}
                    <img src="{{ photoData|raw }}" alt="Profile Image" class="profile-img">
                {% endif %}
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <!-- Experience -->
        {% if data.experience is defined and data.experience|length > 0 %}
            <section class="section">
                <h2 class="section-title">Experience</h2>

                <div class="timeline">
                    {% for experience in data.experience %}
                        <div class="timeline-item">
                            <div class="timeline-dot"></div>
                            <div class="timeline-title">{{ experience.position }}</div>
                            <div class="timeline-company">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                            <div class="timeline-period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                            {% if experience.description %}
                                <p>{{ experience.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Education -->
        {% if data.education is defined and data.education|length > 0 %}
            <section class="section">
                <h2 class="section-title">Education</h2>

                <div class="timeline">
                    {% for education in data.education %}
                        <div class="timeline-item">
                            <div class="timeline-dot"></div>
                            <div class="timeline-title">{{ education.degree }}</div>
                            <div class="timeline-company">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                            <div class="timeline-period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                            {% if education.description %}
                                <p>{{ education.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Skills -->
        {% if data.skills is defined and data.skills|length > 0 %}
            <section class="section">
                <h2 class="section-title">Skills</h2>

                <div class="skills-grid">
                    {% for skill in data.skills %}
                        <span class="skill-tag">{{ skill }}</span>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Languages -->
        {% if data.languages is defined and data.languages|length > 0 %}
            <section class="section">
                <h2 class="section-title">Languages</h2>

                {% for language in data.languages %}
                    <div class="language-item">
                        <strong>{{ language }}</strong>
                    </div>
                {% endfor %}
            </section>
        {% endif %}

        <div style="text-align: center; margin-top: 50px; font-size: 12px; color: #777;">
            CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator
        </div>
    </main>
</div>
{% if app is defined and app.debug is defined and app.debug %}
    <div style="background: #f5f5f5; border: 1px solid #ddd; padding: 20px; margin-top: 30px; font-family: monospace;">
        <h2>Debug Data</h2>
        <pre>{{ dump(data) }}</pre>
    </div>
{% endif %}
</body>

</html>
==================================================

Fichier: Templates\cv_generator\cv_template_green.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template_green.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        :root {
            --primary: #27ae60;
            --secondary: #2c3e50;
            --light: #f8f9fa;
            --dark: #343a40;
            --text: #495057;
            --border: #dee2e6;
            --white: #ffffff;
        }

        body {
            font-family: 'DejaVu Sans', 'Segoe UI', Roboto, sans-serif;
            color: var(--text);
            background-color: var(--light);
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .cv-container {
            max-width: 1140px;
            margin: 0 auto;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
            background-color: var(--white);
        }

        .sidebar {
            background-color: var(--secondary);
            color: var(--white);
            padding: 40px;
            height: 100%;
        }

        .main-content {
            padding: 40px;
        }

        .profile-img {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255,255,255,0.2);
            margin: 0 auto 20px;
            display: block;
        }

        .name {
            font-size: 32px;
            font-weight: 700;
            margin-top: 20px;
            margin-bottom: 5px;
            color: var(--dark);
            text-align: center;
        }

        .position {
            font-size: 20px;
            opacity: 0.8;
            margin-bottom: 25px;
            font-weight: 500;
            text-align: center;
        }

        .contact-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .contact-icon {
            width: 36px;
            height: 36px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-weight: bold;
        }

        .section-title {
            color: var(--primary);
            font-weight: 700;
            font-size: 24px;
            margin-bottom: 25px;
            position: relative;
            padding-bottom: 10px;
        }

        .section-title::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: 0;
            width: 40px;
            height: 3px;
            background-color: var(--primary);
        }

        .experience-item, .education-item {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .experience-item:last-child, .education-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .job-title, .degree {
            font-weight: 600;
            font-size: 18px;
            color: var(--dark);
            margin-bottom: 5px;
        }

        .company, .university {
            font-weight: 500;
            margin-bottom: 5px;
        }

        .period {
            color: var(--primary);
            font-size: 14px;
            margin-bottom: 10px;
            display: inline-block;
        }

        .skill-progress {
            height: 6px;
            background-color: rgba(39, 174, 96, 0.2);
            border-radius: 3px;
            margin-bottom: 25px;
            position: relative;
        }

        .skill-progress-bar {
            height: 100%;
            background-color: var(--primary);
            border-radius: 3px;
            position: absolute;
            top: 0;
            left: 0;
        }

        .skill-title {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .skill-name {
            color: var(--dark);
        }

        .skill-percentage {
            color: var(--primary);
        }

        .language-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .language-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: var(--primary);
            margin-right: 10px;
        }

        .sidebar-section {
            margin-bottom: 40px;
        }

        .sidebar-title {
            font-size: 20px;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 20px;
            font-weight: 600;
            color: var(--white);
        }

        .tag {
            display: inline-block;
            background-color: rgba(39, 174, 96, 0.1);
            color: var(--secondary);
            border-radius: 4px;
            padding: 5px 10px;
            margin-right: 8px;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
        }

        .col-4 {
            width: 33.333333%;
        }

        .col-8 {
            width: 66.666667%;
        }

        ul {
            padding-left: 20px;
        }

        @media print {
            body {
                background-color: white;
                color: black;
            }

            .cv-container {
                box-shadow: none;
                margin: 0;
                max-width: none;
            }
        }
    </style>
</head>
<body>
<div class="cv-container">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-4 sidebar">
            <div style="text-align: center; margin-bottom: 40px;">
                {% if photoData is defined and photoData %}
                    <img src="{{ photoData|raw }}" alt="Profile Image" class="profile-img">
                {% endif %}
                <h1 class="name" style="color: white;">{{ data.firstName }} {{ data.lastName }}</h1>
                <div class="position" style="color: rgba(255, 255, 255, 0.8);">{{ data.position }}</div>
            </div>

            <div class="sidebar-section">
                <h3 class="sidebar-title">Contact</h3>
                {% if data.email %}
                    <div class="contact-item">
                        <div class="contact-icon">@</div>
                        <div>{{ data.email }}</div>
                    </div>
                {% endif %}

                {% if data.phone %}
                    <div class="contact-item">
                        <div class="contact-icon">☏</div>
                        <div>{{ data.phone }}</div>
                    </div>
                {% endif %}

                {% if data.address or data.city or data.country %}
                    <div class="contact-item">
                        <div class="contact-icon">⌂</div>
                        <div>{{ [data.address, data.city, data.country]|filter(v => v is not empty)|join(', ') }}</div>
                    </div>
                {% endif %}

                {% if data.github %}
                    <div class="contact-item">
                        <div class="contact-icon">GH</div>
                        <div>{{ data.github }}</div>
                    </div>
                {% endif %}

                {% if data.linkedin %}
                    <div class="contact-item">
                        <div class="contact-icon">in</div>
                        <div>{{ data.linkedin }}</div>
                    </div>
                {% endif %}
            </div>

            {% if data.skills is defined and data.skills|length > 0 %}
                <div class="sidebar-section">
                    <h3 class="sidebar-title">Skills</h3>
                    {% for skill in data.skills %}
                        <div class="skill-item">
                            <div class="skill-title">
                                <span class="skill-name">{{ skill }}</span>
                            </div>
                            <div class="skill-progress">
                                <div class="skill-progress-bar" style="width: 85%"></div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}

            {% if data.languages is defined and data.languages|length > 0 %}
                <div class="sidebar-section">
                    <h3 class="sidebar-title">Languages</h3>
                    {% for language in data.languages %}
                        <div class="language-item">
                            <div class="language-dot"></div>
                            <div>{{ language }}</div>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        </div>

        <!-- Main Content -->
        <div class="col-8 main-content">
            {% if data.additionalInfo %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">About Me</h2>
                    <p>{{ data.additionalInfo }}</p>
                </section>
            {% endif %}

            {% if data.experience is defined and data.experience|length > 0 %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">Work Experience</h2>

                    {% for experience in data.experience %}
                        <div class="experience-item">
                            <div class="job-title">{{ experience.position }}</div>
                            <div class="company">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                            <div class="period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                            {% if experience.description %}
                                <p>{{ experience.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </section>
            {% endif %}

            {% if data.education is defined and data.education|length > 0 %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">Education</h2>

                    {% for education in data.education %}
                        <div class="education-item">
                            <div class="degree">{{ education.degree }}</div>
                            <div class="university">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                            <div class="period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                            {% if education.description %}
                                <p>{{ education.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </section>
            {% endif %}

            <div style="text-align: center; margin-top: 50px; font-size: 12px; color: #777;">
                CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator
            </div>
        </div>
    </div>
</div>
{% if app is defined and app.debug is defined and app.debug %}
    <div style="background: #f5f5f5; border: 1px solid #ddd; padding: 20px; margin-top: 30px; font-family: monospace;">
        <h2>Debug Data</h2>
        <pre>{{ dump(data) }}</pre>
    </div>
{% endif %}
</body>
</html>
==================================================

Fichier: Templates\cv_generator\index.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Generator{% endblock %}

{% block body %}
    <div class="container-fluid p-0">
        {# Header with logos #}
        <div class="header-logos mb-4">
            <div class="row m-0 p-3">
                <div class="col-4">
                    <img src="{{ asset('images/logo.png') }}" alt="Logo" class="img-fluid" style="max-height: 109px;">
                </div>
                <div class="col-4 text-center">
                    <img src="{{ asset('images/tunisie-removebg-preview.png') }}" alt="Tunisia" class="img-fluid" style="max-height: 100px;">
                </div>
                <div class="col-4 text-end">
                    <img src="{{ asset('images/esprim.png') }}" alt="ESPRIM" class="img-fluid" style="max-height: 46px;">
                </div>
            </div>
        </div>

        {# CV Form #}
        <div class="container">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">CV Generator</h3>
                </div>
                <div class="card-body">
                    <form method="post" enctype="multipart/form-data">
                        {# Personal Information #}
                        <div class="mb-4">
                            <h4 class="form-section-title">Personal Information</h4>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <input type="text" class="form-control" id="firstName" name="firstName" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <input type="text" class="form-control" id="lastName" name="lastName" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="email" class="form-label">Email</label>
                                    <input type="email" class="form-control" id="email" name="email" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="phone" class="form-label">Phone</label>
                                    <input type="tel" class="form-control" id="phone" name="phone" required>
                                </div>
                                <div class="col-12">
                                    <label for="address" class="form-label">Address</label>
                                    <textarea class="form-control" id="address" name="address" rows="2"></textarea>
                                </div>
                            </div>
                        </div>

                        {# Education #}
                        <div class="mb-4">
                            <h4 class="form-section-title">Education</h4>
                            <div id="educationContainer">
                                <div class="education-entry border rounded p-3 mb-3">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Degree</label>
                                            <input type="text" class="form-control" name="education[0][degree]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Institution</label>
                                            <input type="text" class="form-control" name="education[0][institution]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Start Date</label>
                                            <input type="date" class="form-control" name="education[0][startDate]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">End Date</label>
                                            <input type="date" class="form-control" name="education[0][endDate]">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-primary" id="addEducation">
                                Add More Education
                            </button>
                        </div>

                        {# Experience #}
                        <div class="mb-4">
                            <h4 class="form-section-title">Work Experience</h4>
                            <div id="experienceContainer">
                                <div class="experience-entry border rounded p-3 mb-3">
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Position</label>
                                            <input type="text" class="form-control" name="experience[0][position]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Company</label>
                                            <input type="text" class="form-control" name="experience[0][company]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">Start Date</label>
                                            <input type="date" class="form-control" name="experience[0][startDate]" required>
                                        </div>
                                        <div class="col-md-6">
                                            <label class="form-label">End Date</label>
                                            <input type="date" class="form-control" name="experience[0][endDate]">
                                        </div>
                                        <div class="col-12">
                                            <label class="form-label">Description</label>
                                            <textarea class="form-control" name="experience[0][description]" rows="3"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-primary" id="addExperience">
                                Add More Experience
                            </button>
                        </div>

                        {# Skills #}
                        <div class="mb-4">
                            <h4 class="form-section-title">Skills</h4>
                            <div id="skillsContainer">
                                <div class="row g-3 mb-2">
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" name="skills[]" placeholder="Enter a skill">
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-outline-primary" id="addSkill">
                                Add More Skills
                            </button>
                        </div>

                        {# Submit Button #}
                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-primary btn-lg">Generate CV</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .header-logos {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .form-section-title {
            color: #0d6efd;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid #e9ecef;
        }
        .education-entry, .experience-entry {
            background-color: #f8f9fa;
        }
        .btn-remove {
            position: absolute;
            right: 1rem;
            top: 1rem;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add Education Entry
            document.getElementById('addEducation').addEventListener('click', function() {
                const container = document.getElementById('educationContainer');
                const index = container.children.length;
                const template = `
                    <div class="education-entry border rounded p-3 mb-3 position-relative">
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="this.parentElement.remove()">×</button>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Degree</label>
                                <input type="text" class="form-control" name="education[${index}][degree]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Institution</label>
                                <input type="text" class="form-control" name="education[${index}][institution]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" name="education[${index}][startDate]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" name="education[${index}][endDate]">
                            </div>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', template);
            });

            // Add Experience Entry
            document.getElementById('addExperience').addEventListener('click', function() {
                const container = document.getElementById('experienceContainer');
                const index = container.children.length;
                const template = `
                    <div class="experience-entry border rounded p-3 mb-3 position-relative">
                        <button type="button" class="btn btn-danger btn-sm btn-remove" onclick="this.parentElement.remove()">×</button>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Position</label>
                                <input type="text" class="form-control" name="experience[${index}][position]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Company</label>
                                <input type="text" class="form-control" name="experience[${index}][company]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Start Date</label>
                                <input type="date" class="form-control" name="experience[${index}][startDate]" required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">End Date</label>
                                <input type="date" class="form-control" name="experience[${index}][endDate]">
                            </div>
                            <div class="col-12">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" name="experience[${index}][description]" rows="3"></textarea>
                            </div>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', template);
            });

            // Add Skill Field
            document.getElementById('addSkill').addEventListener('click', function() {
                const container = document.getElementById('skillsContainer');
                const template = `
                    <div class="row g-3 mb-2">
                        <div class="col-md-6">
                            <div class="input-group">
                                <input type="text" class="form-control" name="skills[]" placeholder="Enter a skill">
                                <button type="button" class="btn btn-outline-danger" onclick="this.closest('.row').remove()">×</button>
                            </div>
                        </div>
                    </div>
                `;
                container.insertAdjacentHTML('beforeend', template);
            });
        });
    </script>
{% endblock %}
==================================================

Fichier: Templates\cv_generator\main.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\main.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Generator{% endblock %}

{% block body %}
    <div class="container">
        <div class="main-title-container">
            <div class="logo-badge">
                <img src="{{ asset('images/esprim.png') }}" alt="ESPRIT" class="title-logo">
            </div>
            <h1 class="main-title">
                <span class="title-accent">ESPRIT</span> CV Generator
                <i class="fas fa-file-alt title-icon"></i>
            </h1>
            <p class="main-subtitle">Create professional CVs in minutes</p>
        </div>

        <!-- Progress Tracking -->
        {{ include('cv_generator/_progress.html.twig', { currentStep: currentStep }) }}

        <!-- CV Form -->
        <div class="card shadow">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0"><i class="fas fa-file-alt me-2"></i>Build Your Professional CV</h3>
                <button type="button" class="btn btn-sm btn-outline-light" id="autofillBtn" title="Autofill with sample data">
                    <i class="fas fa-magic me-1"></i> Autofill
                </button>
            </div>
            <div class="card-body">
                <form id="cvForm" method="post" action="/cv-generator/generate" enctype="multipart/form-data" target="pdfDownloadFrame">                        <!-- Personal Information Section -->
                        <div class="form-section-page active" id="section-1">
                            {{ include('cv_generator/_personal_info.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" disabled>
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-outline-primary next-section" data-next="2">
                                    Next<i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Education Section -->
                        <div class="form-section-page" id="section-2">
                            {{ include('cv_generator/_education.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="1">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-outline-primary next-section" data-next="3">
                                    Next<i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Experience Section -->
                        <div class="form-section-page" id="section-3">
                            {{ include('cv_generator/_experience.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="2">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-outline-primary next-section" data-next="4">
                                    Next<i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Skills Section -->
                        <div class="form-section-page" id="section-4">
                            {{ include('cv_generator/_skills.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="3">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-outline-primary next-section" data-next="5">
                                    Next<i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Languages Section -->
                        <div class="form-section-page" id="section-5">
                            {{ include('cv_generator/_languages.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="4">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-outline-primary next-section" data-next="6">
                                    Next<i class="fas fa-arrow-right ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Additional Information Section -->
                        <div class="form-section-page" id="section-6">
                            {{ include('cv_generator/_additional.html.twig') }}

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="5">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button type="button" class="btn btn-submit-review btn-primary">
                                    Review CV<i class="fas fa-check ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Review Section -->
                        <div class="form-section-page" id="section-7">
                            <h4 class="form-section-title">
                                <i class="fas fa-check-circle"></i>
                                Review Your CV
                            </h4>

                            <div class="alert alert-info">
                                <i class="fas fa-info-circle me-2"></i>
                                Please review your CV information before generating the final document.
                            </div>

                            <div id="reviewContent" class="p-3 border rounded bg-light">
                                <!-- Review content will be generated here -->
                            </div>

                            <!-- Template Selection -->
                            <div class="mt-5 mb-4">
                                <h4 class="form-section-title">
                                    <i class="fas fa-palette"></i>
                                    Choose Template
                                </h4>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="card h-100 template-card">
                                            <div class="card-header bg-success text-white">
                                                <h5 class="mb-0">Green Professional Template</h5>
                                            </div>
                                            <div class="card-body text-center">
                                                <img src="{{ asset('images/template_green.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Green Template Preview">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="template" id="template-green" value="green" checked>
                                                    <label class="form-check-label" for="template-green">
                                                        Select Green Template
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="card h-100 template-card">
                                            <div class="card-header bg-primary text-white">
                                                <h5 class="mb-0">Blue Modern Template</h5>
                                            </div>
                                            <div class="card-body text-center">
                                                <img src="{{ asset('images/template_blue.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Blue Template Preview">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="radio" name="template" id="template-blue" value="blue">
                                                    <label class="form-check-label" for="template-blue">
                                                        Select Blue Template
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Hidden field for photo data -->
                            <input type="hidden" name="photoData" id="photoDataField" value="">

                            <!-- Section Navigation -->
                            <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                <button type="button" class="btn btn-outline-secondary prev-section" data-prev="6">
                                    <i class="fas fa-arrow-left me-2"></i>Previous
                                </button>
                                <button id="generateBtn" type="button" class="btn btn-primary">
                                    <i class="fas fa-file-download me-2"></i>Generate CV
                                </button>
                            </div>

                            <!-- Status message -->
                            <div id="statusMessage" class="alert alert-info mt-3" style="display: none;">
                                <i class="fas fa-spinner fa-spin me-2"></i>
                                Generating your CV... Please wait.
                            </div>

                            <!-- Alternative methods -->
                            <div class="mt-4 p-3 border rounded bg-light">
                                <h5>Other Download Options</h5>
                                <p class="small text-muted">If you're having trouble with the main download button, try these alternatives:</p>
                                <div class="d-flex flex-wrap gap-2">
                                    <button type="button" class="btn btn-success" id="directDownloadBtn">
                                        <i class="fas fa-file-download me-1"></i> Direct Download
                                    </button>
                                    <button type="button" class="btn btn-info" id="simpleDownloadBtn">
                                        <i class="fas fa-file-alt me-1"></i> Simple CV
                                    </button>
                                    <a href="/cv-generator/test-pdf" class="btn btn-warning" target="_blank">
                                        <i class="fas fa-vial me-1"></i> Test PDF System
                                    </a>
                                </div>
                            </div>

                            <!-- Debug information in development -->
                            <div class="mt-3 p-2 border rounded border-danger">
                                <details>
                                    <summary class="text-danger"><i class="fas fa-bug me-1"></i> Debug Tools</summary>
                                    <div class="mt-2">
                                        <button type="button" class="btn btn-sm btn-outline-danger me-1" id="viewFormDataBtn">
                                            View Form Data
                                        </button>
                                        <a href="/cv-generator/generate?debug=1" class="btn btn-sm btn-outline-danger me-1" target="_blank">
                                            View HTML Template
                                        </a>
                                        <button type="button" class="btn btn-sm btn-outline-danger" id="clearCacheBtn">
                                            Clear Local Storage
                                        </button>
                                    </div>
                                </details>
                            </div>
                        </div>
                    </div>

                    <!-- Preview Button (always visible) -->
                    <div class="text-center mt-4">
                        <button type="button" class="btn btn-outline-secondary btn-preview">
                            <i class="fas fa-file-invoice me-2"></i>Preview CV
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- CV Preview Panel -->
    <div class="cv-preview" id="cvPreview">
        <button type="button" class="preview-close" id="closePreview">&times;</button>
        <div class="text-center mb-4">
            <h4><i class="fas fa-file-invoice me-2"></i>CV Preview</h4>
            <div class="small text-muted">This is how your CV will appear when generated</div>
        </div>
        <div id="previewContent" class="preview-content">
            <!-- Preview content will be generated here -->
        </div>
    </div>

    <!-- Sample data for autofill (hidden) -->
    <div id="sampleData" data-sample="{{ sampleData|json_encode }}" style="display:none;"></div>

    <!-- Hidden iframe for PDF downloads -->
    <iframe id="pdfDownloadFrame" name="pdfDownloadFrame" style="display:none;"></iframe>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Additional styles for enlarged icons and images */
        .fas, .far, .fab, .fa {
            font-size: 200%; /* Double the icon size */
            vertical-align: middle;
        }

        /* Adjust specific icons that need special handling */
        .btn i.fas, .btn i.far, .btn i.fab, .btn i.fa {
            font-size: 150%; /* Slightly smaller for button icons to maintain button proportions */
            vertical-align: middle;
            margin-right: 0.5rem;
            margin-left: 0.5rem;
        }

        /* Adjust button padding to accommodate larger icons */
        .btn {
            padding: 0.5rem 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Fix form element alignment with larger icons */
        .form-label {
            display: flex;
            align-items: center;
            margin-bottom: 0.7rem;
        }

        /* Even larger logo badge */
        .logo-badge {
            width: 280px; /* Further enlarged from 220px */
            height: 280px; /* Further enlarged from 220px */
            border-width: 12px; /* Further enlarged from 10px */
            margin-bottom: 2rem;
        }

        /* Larger logo image inside the badge */
        .title-logo {
            max-width: 220px; /* Further enlarged from 170px */
            max-height: 220px; /* Further enlarged from 170px */
        }

        /* Larger title icon */
        .title-icon {
            font-size: 5.5rem !important; /* Further enlarged from 4.8rem */
            margin-left: 20px;
        }

        /* Adjust title container for larger elements */
        .main-title-container {
            margin: 3.5rem auto 4rem;
        }

        /* Profile photo display in CV */
        .profile-photo-container {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }

        .profile-photo-wrapper {
            position: relative;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            overflow: hidden;
            border: 5px solid rgba(238, 49, 36, 0.2);
            box-shadow: 0 5px 15px rgba(45, 55, 72, 0.1);
        }

        .profile-photo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Preview panel profile photo */
        .preview-profile-photo {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid rgba(238, 49, 36, 0.2);
            box-shadow: 0 3px 8px rgba(45, 55, 72, 0.1);
            margin: 0 auto 1rem;
            display: block;
        }

        /* Enhanced preview panel styling */
        .cv-preview {
            position: fixed;
            top: 0;
            right: 0;
            height: 100vh;
            width: 400px;
            background-color: var(--white);
            border-left: 1px solid rgba(113, 128, 150, 0.2);
            box-shadow: -4px 0 15px rgba(45, 55, 72, 0.1);
            padding: 2rem;
            overflow-y: auto;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease-in-out;
        }

        .cv-preview.show {
            transform: translateX(0);
        }

        .preview-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 2.4rem;
            color: var(--slate-gray);
            cursor: pointer;
        }

        .preview-section {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(113, 128, 150, 0.2);
        }

        .preview-section:last-child {
            border-bottom: none;
        }

        .preview-section h5 {
            color: var(--primary-red);
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .preview-section h6 {
            color: var(--charcoal);
            font-weight: 600;
            margin-top: 0.5rem;
        }

        /* Language badges styling like skill badges */
        .language-badge {
            background-color: rgba(113, 128, 150, 0.1);
            color: var(--charcoal);
            border-radius: 20px;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            display: inline-flex;
            align-items: center;
            transition: var(--transition);
        }

        .language-badge button {
            background: none;
            border: none;
            color: var(--slate-gray);
            margin-left: 0.5rem;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .language-badge:hover {
            background-color: rgba(238, 49, 36, 0.1);
            color: var(--primary-red);
        }

        /* Template selection styling */
        .form-check-input[type="radio"] {
            width: 1.2em;
            height: 1.2em;
            margin-top: 0.25em;
        }

        .form-check-label {
            padding-left: 0.5em;
            font-weight: 500;
        }

        /* Template card highlight when selected */
        .template-card.selected-template .card {
            border: 3px solid;
            border-color: #3498db; /* Using a specific blue color instead of var(--primary) */
            box-shadow: 0 0 15px rgba(52, 152, 219, 0.3);
        }

        /* Template card highlight for green */
        .template-card.selected-template-green .card {
            border: 3px solid;
            border-color: #27ae60;
            box-shadow: 0 0 15px rgba(39, 174, 96, 0.3);
        }

        /* Debug info styling */
        details summary {
            cursor: pointer;
            font-weight: 600;
        }

        @media (max-width: 768px) {
            .logo-badge {
                width: 180px; /* Adjusted for mobile */
                height: 180px; /* Adjusted for mobile */
                border-width: 8px; /* Adjusted for mobile */
            }

            .title-logo {
                max-width: 140px; /* Adjusted for mobile */
                max-height: 140px; /* Adjusted for mobile */
            }

            .title-icon {
                font-size: 4rem !important; /* Adjusted for mobile */
            }

            /* Adjust icon sizes on mobile */
            .fas, .far, .fab, .fa {
                font-size: 160%; /* Slightly smaller on mobile */
            }

            .cv-preview {
                width: 90%; /* Wider on mobile */
            }

            .profile-photo-wrapper {
                width: 120px;
                height: 120px;
            }

            .preview-profile-photo {
                width: 100px;
                height: 100px;
            }
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- CV Generator Core Functionality -->
    <script src="{{ asset('js/cv-generator-main.js') }}"></script>
    <!-- CV Form Fix for PDF generation -->
    <script src="{{ asset('js/cv-form-fix.js') }}"></script>
    <!-- Form validation and submission fix -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get form elements
            const cvForm = document.getElementById('cvForm');
            const generateBtn = document.getElementById('generateBtn');
            const directDownloadBtn = document.getElementById('directDownloadBtn');
            const simpleDownloadBtn = document.getElementById('simpleDownloadBtn');
            const viewFormDataBtn = document.getElementById('viewFormDataBtn');
            const clearCacheBtn = document.getElementById('clearCacheBtn');
            const statusMessage = document.getElementById('statusMessage');
            const downloadFrame = document.getElementById('pdfDownloadFrame');

            // Replace required attributes with data-required
            document.querySelectorAll('.form-section-page:not(#section-1) [required]').forEach(input => {
                input.setAttribute('data-required', 'true');
                input.removeAttribute('required');
            });

            // Add click handler for main generate button
            if (generateBtn && cvForm) {
                generateBtn.addEventListener('click', function() {
                    console.log('Generate button clicked');

                    // Get current active section
                    const activeSection = document.querySelector('.form-section-page.active');
                    if (!activeSection || activeSection.id !== 'section-7') {
                        console.log('Not in review section, navigating there first');
                        const reviewBtn = document.querySelector('.btn-submit-review');
                        if (reviewBtn) {
                            reviewBtn.click();
                        }
                        return;
                    }

                    // Show status message
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                    }

                    // Ensure photo data is included
                    const photoDataField = document.getElementById('photoDataField');
                    if (photoDataField) {
                        const photoData = localStorage.getItem('cvProfilePhoto');
                        if (photoData) {
                            photoDataField.value = photoData;
                            console.log('Photo data added to form');
                        }
                    }

                    // Create minimal form with essential data
                    const minimalForm = document.createElement('form');
                    minimalForm.method = 'post';
                    minimalForm.action = '/cv-generator/generate';
                    minimalForm.target = '_blank'; // Open in new tab

                    // Get basic personal info
                    const firstName = document.querySelector('input[name="firstName"]')?.value || 'User';
                    const lastName = document.querySelector('input[name="lastName"]')?.value || '';
                    const email = document.querySelector('input[name="email"]')?.value || 'user@example.com';
                    const position = document.querySelector('input[name="position"]')?.value || 'Professional';

                    // Fields to include in minimal form
                    const formFields = [
                        { name: 'firstName', value: firstName },
                        { name: 'lastName', value: lastName },
                        { name: 'email', value: email },
                        { name: 'position', value: position },
                        { name: 'photoData', value: photoDataField?.value || '' }
                    ];

                    // Add selected template
                    const templateValue = document.querySelector('input[name="template"]:checked')?.value || 'green';
                    formFields.push({ name: 'template', value: templateValue });

                    // Add fields to form
                    formFields.forEach(field => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = field.name;
                        input.value = field.value;
                        minimalForm.appendChild(input);
                    });

                    // Append form to body and submit
                    document.body.appendChild(minimalForm);
                    console.log('Submitting minimal form for PDF generation');
                    minimalForm.submit();

                    // Show success message after a delay
                    setTimeout(() => {
                        statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i> Your CV has been generated! Check your downloads.';
                        statusMessage.classList.remove('alert-info');
                        statusMessage.classList.add('alert-success');

                        // Clean up
                        document.body.removeChild(minimalForm);
                    }, 2000);
                });
            }

            // Add click handler for direct download button
            if (directDownloadBtn) {
                directDownloadBtn.addEventListener('click', function() {
                    console.log('Direct download button clicked');
                    // Show status message
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                    }

                    // Get template selection
                    const templateValue = document.querySelector('input[name="template"]:checked')?.value || 'green';

                    // Create direct download form
                    const directForm = document.createElement('form');
                    directForm.method = 'post';
                    directForm.action = '/cv-generator/generate';
                    directForm.target = '_blank';

                    // Add minimal required fields
                    const fields = [
                        { name: 'firstName', value: document.querySelector('input[name="firstName"]')?.value || 'Direct' },
                        { name: 'lastName', value: document.querySelector('input[name="lastName"]')?.value || 'Download' },
                        { name: 'email', value: document.querySelector('input[name="email"]')?.value || 'direct@example.com' },
                        { name: 'position', value: document.querySelector('input[name="position"]')?.value || 'Test Position' },
                        { name: 'template', value: templateValue },
                        { name: 'directDownload', value: 'true' }
                    ];

                    fields.forEach(field => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = field.name;
                        input.value = field.value;
                        directForm.appendChild(input);
                    });

                    // Add to document and submit
                    document.body.appendChild(directForm);
                    console.log('Submitting direct download form');
                    directForm.submit();

                    // Clean up after submission
                    setTimeout(() => {
                        document.body.removeChild(directForm);

                        // Show success message
                        statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i> Your CV has been generated! Check your downloads.';
                        statusMessage.classList.remove('alert-info');
                        statusMessage.classList.add('alert-success');
                    }, 1000);
                });
            }

            // Add click handler for simple CV button
            if (simpleDownloadBtn) {
                simpleDownloadBtn.addEventListener('click', function() {
                    console.log('Simple CV button clicked');
                    // Show status message
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                    }

                    // Create simple form
                    const simpleForm = document.createElement('form');
                    simpleForm.method = 'post';
                    simpleForm.action = '/cv-generator/generate';
                    simpleForm.target = '_blank';

                    // Add minimal fields
                    const fields = [
                        { name: 'firstName', value: 'Test' },
                        { name: 'lastName', value: 'User' },
                        { name: 'email', value: 'test@example.com' },
                        { name: 'position', value: 'Test Position' },
                        { name: 'template', value: 'green' },
                        { name: 'simpleTest', value: 'true' }
                    ];

                    fields.forEach(field => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = field.name;
                        input.value = field.value;
                        simpleForm.appendChild(input);
                    });

                    // Add to document and submit
                    document.body.appendChild(simpleForm);
                    console.log('Submitting simple test form');
                    simpleForm.submit();

                    // Clean up
                    setTimeout(() => {
                        document.body.removeChild(simpleForm);

                        // Show success message
                        statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i> Simple CV generated! Check your downloads.';
                        statusMessage.classList.remove('alert-info');
                        statusMessage.classList.add('alert-success');
                    }, 1000);
                });
            }

            // Add click handler for viewing form data
            if (viewFormDataBtn) {
                viewFormDataBtn.addEventListener('click', function() {
                    // Get form data
                    const formData = new FormData(cvForm);
                    const dataObj = {};
                    for (const [key, value] of formData.entries()) {
                        dataObj[key] = value;
                    }

                    // Create a modal to show the data
                    const modalDiv = document.createElement('div');
                    modalDiv.style.position = 'fixed';
                    modalDiv.style.top = '0';
                    modalDiv.style.left = '0';
                    modalDiv.style.width = '100%';
                    modalDiv.style.height = '100%';
                    modalDiv.style.backgroundColor = 'rgba(0,0,0,0.5)';
                    modalDiv.style.zIndex = '9999';
                    modalDiv.style.display = 'flex';
                    modalDiv.style.justifyContent = 'center';
                    modalDiv.style.alignItems = 'center';

                    const modalContent = document.createElement('div');
                    modalContent.style.backgroundColor = 'white';
                    modalContent.style.padding = '20px';
                    modalContent.style.borderRadius = '5px';
                    modalContent.style.maxWidth = '80%';
                    modalContent.style.maxHeight = '80%';
                    modalContent.style.overflow = 'auto';

                    modalContent.innerHTML = `
                        <h3>Form Data</h3>
                        <pre>${JSON.stringify(dataObj, null, 2)}</pre>
                        <button id="closeModalBtn" class="btn btn-secondary mt-3">Close</button>
                    `;

                    modalDiv.appendChild(modalContent);
                    document.body.appendChild(modalDiv);

                    document.getElementById('closeModalBtn').addEventListener('click', function() {
                        document.body.removeChild(modalDiv);
                    });
                });
            }

            // Add click handler for clearing cache
            if (clearCacheBtn) {
                clearCacheBtn.addEventListener('click', function() {
                    localStorage.clear();
                    alert('Local storage cleared!');
                });
            }

            // Monitor iframe load events
            if (downloadFrame) {
                downloadFrame.addEventListener('load', function() {
                    console.log('PDF iframe loaded');
                    try {
                        if (downloadFrame.contentDocument) {
                            console.log('Frame has content');
                        }
                    } catch (e) {
                        console.log('Cannot access iframe content - PDF likely downloaded');
                    }
                });
            }
        });
    </script>
{% endblock %}
==================================================

Fichier: Templates\cv_generator\welcome.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\welcome.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Generator | Professional Resume Builder{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-color: #ff3a3a;
            --primary-light: rgba(255, 58, 58, 0.1);
            --primary-shadow: rgba(255, 58, 58, 0.3);
            --text-dark: #2d3748;
            --text-medium: #4a5568;
            --text-light: #718096;
            --bg-gradient-start: #f9f9f7;
            --bg-gradient-end: #ffffff;
            --card-bg: #ffffff;
            --card-shadow: rgba(0, 0, 0, 0.08);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--bg-gradient-start), var(--bg-gradient-end));
            color: var(--text-dark);
            min-height: 100vh;
        }

        .welcome-container {
            display: flex;
            flex-direction: column;
            width: 100%;
            max-width: 1440px;
            margin: 0 auto;
            padding: 2rem;
            min-height: 100vh;
        }

        /* Header Section */
        .welcome-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 0;
            margin-bottom: 2rem;
            position: relative;
        }

        .logo-group {
            display: flex;
            align-items: center;
            gap: 2rem;
        }

        .logo-item {
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        .logo-item:hover {
            transform: translateY(-3px);
        }

        .logo-item img {
            object-fit: contain;
            max-height: 100%;
            max-width: 100%;
        }

        .main-logo {
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
        }

        /* Hero Section */
        .hero-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin-bottom: 4rem;
            text-align: center;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: 700;
            color: var(--text-dark);
            margin-bottom: 1rem;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.25rem;
            color: var(--text-medium);
            max-width: 36rem;
            margin-bottom: 2rem;
            line-height: 1.5;
        }

        /* Carousel Section */
        .carousel-section {
            width: 100%;
            margin-bottom: 4rem;
            position: relative;
        }

        .carousel-card {
            background-color: var(--card-bg);
            border-radius: 1rem;
            box-shadow: 0 10px 30px var(--card-shadow);
            overflow: hidden;
            position: relative;
        }

        .carousel-wrapper {
            position: relative;
            height: 450px;
            overflow: hidden;
        }

        .carousel-item {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.8s ease;
            background-color: #f8f9fa;
        }

        .carousel-item.active {
            opacity: 1;
            z-index: 1;
        }

        .carousel-item img {
            max-width: 100%;
            max-height: 100%;
            object-fit: cover;
        }

        .carousel-indicators {
            position: absolute;
            bottom: 1.5rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 0.75rem;
            z-index: 10;
        }

        .carousel-indicator {
            width: 2.5rem;
            height: 0.25rem;
            background-color: rgba(255, 255, 255, 0.5);
            border-radius: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .carousel-indicator.active {
            background-color: var(--primary-color);
            width: 3.5rem;
        }

        .carousel-control {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 3.5rem;
            height: 3.5rem;
            border-radius: 50%;
            background-color: var(--card-bg);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            transition: all 0.3s ease;
            border: none;
            outline: none;
        }

        .carousel-control:hover {
            background-color: var(--primary-color);
            transform: translateY(-50%) scale(1.05);
        }

        .carousel-control:hover svg {
            color: white;
        }

        .carousel-control.prev {
            left: -1.25rem;
        }

        .carousel-control.next {
            right: -1.25rem;
        }

        .carousel-control svg {
            width: 1.25rem;
            height: 1.25rem;
            color: var(--text-medium);
            transition: color 0.3s ease;
        }

        /* Features Section */
        .features-section {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 2rem;
            margin-bottom: 4rem;
        }

        .feature-card {
            background-color: var(--card-bg);
            border-radius: 1rem;
            box-shadow: 0 8px 20px var(--card-shadow);
            padding: 2rem;
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.12);
        }

        .feature-icon {
            width: 4rem;
            height: 4rem;
            background-color: var(--primary-light);
            border-radius: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
        }

        .feature-icon svg {
            width: 2rem;
            height: 2rem;
            color: var(--primary-color);
        }

        .feature-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--text-dark);
        }

        .feature-description {
            color: var(--text-medium);
            line-height: 1.6;
        }

        /* Partner Logos Section */
        .partners-section {
            text-align: center;
            margin-bottom: 4rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 2rem;
            color: var(--text-dark);
            position: relative;
            display: inline-block;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -0.5rem;
            left: 50%;
            transform: translateX(-50%);
            width: 3rem;
            height: 0.25rem;
            background-color: var(--primary-color);
            border-radius: 0.125rem;
        }

        .logo-grid {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 3rem;
            align-items: center;
        }

        .partner-logo {
            filter: grayscale(100%);
            opacity: 0.7;
            height: 5rem;
            transition: filter 0.3s ease, opacity 0.3s ease, transform 0.3s ease;
        }

        .partner-logo:hover {
            filter: grayscale(0%);
            opacity: 1;
            transform: scale(1.1);
        }

        /* CTA Section */
        .cta-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            margin-top: 2rem;
            margin-bottom: 2rem;
            padding: 3rem;
            background-color: var(--card-bg);
            border-radius: 1rem;
            box-shadow: 0 8px 24px var(--card-shadow);
        }

        .cta-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--text-dark);
        }

        .cta-description {
            color: var(--text-medium);
            max-width: 36rem;
            margin-bottom: 2rem;
            line-height: 1.6;
        }

        .enter-button {
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
            background-color: var(--primary-color);
            color: white;
            padding: 1rem 2rem;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 0.5rem;
            text-decoration: none;
            box-shadow: 0 4px 12px var(--primary-shadow);
            transition: all 0.3s ease;
            border: none;
        }

        .enter-button:hover {
            background-color: #e62e2e;
            transform: translateY(-4px);
            box-shadow: 0 8px 16px var(--primary-shadow);
            color: white;
        }

        .enter-button:active {
            transform: translateY(-2px);
        }

        .enter-button svg {
            width: 1.25rem;
            height: 1.25rem;
        }

        /* Footer */
        .footer {
            margin-top: auto;
            padding-top: 2rem;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            text-align: center;
            color: var(--text-light);
            font-size: 0.875rem;
        }

        /* Loading Animation */
        .loading-gear {
            animation: spin 10s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive Styles */
        @media (max-width: 1200px) {
            .features-section {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 992px) {
            .hero-title {
                font-size: 2.5rem;
            }

            .carousel-wrapper {
                height: 380px;
            }

            .carousel-control {
                width: 3rem;
                height: 3rem;
            }

            .carousel-control.prev {
                left: -0.75rem;
            }

            .carousel-control.next {
                right: -0.75rem;
            }
        }

        @media (max-width: 768px) {
            .welcome-header {
                flex-direction: column;
                gap: 1.5rem;
            }

            .main-logo {
                position: relative;
                left: auto;
                transform: none;
                margin-top: 1rem;
            }

            .hero-title {
                font-size: 2rem;
            }

            .features-section {
                grid-template-columns: 1fr;
            }

            .carousel-wrapper {
                height: 280px;
            }

            .carousel-indicators {
                bottom: 1rem;
            }

            .logo-grid {
                gap: 1.5rem;
            }

            .partner-logo {
                height: 3.5rem;
            }

            .cta-section {
                padding: 2rem 1rem;
            }

            .cta-title {
                font-size: 1.5rem;
            }
        }

        @media (max-width: 480px) {
            .logo-group {
                flex-direction: column;
                gap: 1rem;
            }

            .carousel-wrapper {
                height: 220px;
            }

            .carousel-control {
                width: 2.5rem;
                height: 2.5rem;
            }

            .partner-logo {
                height: 3rem;
            }

            .enter-button {
                padding: 0.75rem 1.5rem;
            }
        }
    </style>
{% endblock %}

{% block body %}
    <div class="welcome-container">
        <!-- Header Section -->
        <header class="welcome-header">
            <div class="logo-group">
                <div class="logo-item">
                    <img src="{{ asset('images/unnamed-removebg-preview.png') }}" alt="Small Logo" style="height: 70px;">
                </div>
                <div class="logo-item">
                    <img src="{{ asset('images/tunisie-removebg-preview.png') }}" alt="Tunisia" style="height: 60px;">
                </div>
            </div>
            <div class="logo-item main-logo">
                <img src="{{ asset('images/logo.png') }}" alt="Main Logo" style="height: 80px;">
            </div>
        </header>

        <!-- Hero Section -->
        <section class="hero-section">
            <h1 class="hero-title">Create Professional CV in Minutes</h1>
            <p class="hero-subtitle">Stand out with a professionally designed CV that showcases your skills and experience effectively</p>
        </section>

        <!-- Carousel Section -->
        <section class="carousel-section">
            <div class="carousel-card">
                <div class="carousel-wrapper" id="template-carousel">
                    <!-- Carousel items -->
                    <div class="carousel-item active" data-carousel-item="0">
                        <img src="/docs/images/carousel/carousel-1.svg" alt="Professional CV Template">
                    </div>
                    <div class="carousel-item" data-carousel-item="1">
                        <img src="/docs/images/carousel/carousel-2.svg" alt="Modern CV Template">
                    </div>
                    <div class="carousel-item" data-carousel-item="2">
                        <img src="/docs/images/carousel/carousel-3.svg" alt="Creative CV Template">
                    </div>
                    <div class="carousel-item" data-carousel-item="3">
                        <img src="/docs/images/carousel/carousel-4.svg" alt="Executive CV Template">
                    </div>
                    <div class="carousel-item" data-carousel-item="4">
                        <img src="/docs/images/carousel/carousel-5.svg" alt="Technical CV Template">
                    </div>
                </div>

                <!-- Carousel controls -->
                <button class="carousel-control prev" id="carousel-prev">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button class="carousel-control next" id="carousel-next">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>

                <!-- Carousel indicators -->
                <div class="carousel-indicators">
                    <div class="carousel-indicator active" data-carousel-goto="0"></div>
                    <div class="carousel-indicator" data-carousel-goto="1"></div>
                    <div class="carousel-indicator" data-carousel-goto="2"></div>
                    <div class="carousel-indicator" data-carousel-goto="3"></div>
                    <div class="carousel-indicator" data-carousel-goto="4"></div>
                </div>
            </div>
        </section>

        <!-- Features Section -->
        <section class="features-section">
            <!-- Feature 1 -->
            <div class="feature-card">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                </div>
                <h3 class="feature-title">Easy to Create</h3>
                <p class="feature-description">Simple step-by-step process to create your professional CV in minutes, no design skills required.</p>
            </div>

            <!-- Feature 2 -->
            <div class="feature-card">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                    </svg>
                </div>
                <h3 class="feature-title">Multiple Templates</h3>
                <p class="feature-description">Choose from a variety of professionally designed templates to suit your career and industry.</p>
            </div>

            <!-- Feature 3 -->
            <div class="feature-card">
                <div class="feature-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                    </svg>
                </div>
                <h3 class="feature-title">Export Options</h3>
                <p class="feature-description">Download your CV in multiple formats including PDF, ready to share with potential employers.</p>
            </div>
        </section>

        <!-- Partners Section -->
        <section class="partners-section">
            <h2 class="section-title">Our Partners</h2>
            <div class="logo-grid">
                <img src="{{ asset('images/esprim.png') }}" alt="ESPRIM" class="partner-logo">
                <img src="{{ asset('images/espritesb.png') }}" alt="ESPRIT ESB" class="partner-logo">
                <img src="{{ asset('images/espritprepa-removebg-preview.png') }}" alt="ESPRIT Prepa" class="partner-logo">
                <img src="{{ asset('images/esprit-removebg-preview.png') }}" alt="ESPRIT" class="partner-logo">
                <div class="logo-item">
                    <img src="{{ asset('images/gear.png') }}" alt="Loading" class="loading-gear" style="height: 60px;">
                </div>
            </div>
        </section>

        <!-- CTA Section -->
        <section class="cta-section">
            <h2 class="cta-title">Ready to Build Your Professional CV?</h2>
            <p class="cta-description">Create a standout CV that highlights your skills and experience. Our tool makes it easy to build a professional resume in minutes.</p>
            <a href="{{ path('app_cv_generator') }}" class="enter-button">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Enter CV Generator
            </a>
        </section>

        <!-- Footer -->
        <footer class="footer">
            <p>&copy; 2025 CV Generator. All rights reserved.</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Carousel functionality
            const carousel = document.getElementById('template-carousel');
            const items = carousel.querySelectorAll('.carousel-item');
            const indicators = document.querySelectorAll('.carousel-indicator');
            const prevButton = document.getElementById('carousel-prev');
            const nextButton = document.getElementById('carousel-next');
            let currentIndex = 0;

            // Function to show slide at index
            function showSlide(index) {
                // Hide all slides
                items.forEach(item => {
                    item.classList.remove('active');
                });

                // Remove active class from indicators
                indicators.forEach(indicator => {
                    indicator.classList.remove('active');
                });

                // Show current slide and activate indicator
                items[index].classList.add('active');
                indicators[index].classList.add('active');
                currentIndex = index;
            }

            // Event listeners for controls
            prevButton.addEventListener('click', () => {
                let newIndex = currentIndex - 1;
                if (newIndex < 0) newIndex = items.length - 1;
                showSlide(newIndex);
            });

            nextButton.addEventListener('click', () => {
                let newIndex = currentIndex + 1;
                if (newIndex >= items.length) newIndex = 0;
                showSlide(newIndex);
            });

            // Event listeners for indicators
            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    showSlide(index);
                });
            });

            // Auto rotate slides
            setInterval(() => {
                let newIndex = currentIndex + 1;
                if (newIndex >= items.length) newIndex = 0;
                showSlide(newIndex);
            }, 5000);

            // Animate elements on page load
            function animateElement(element, delay) {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';
                element.style.animation = `fadeIn 0.6s ease forwards ${delay}s`;
            }

            // Header animations
            const headerElements = document.querySelectorAll('.welcome-header .logo-item');
            headerElements.forEach((el, index) => {
                animateElement(el, 0.1 + (index * 0.1));
            });

            // Hero section animations
            const heroTitle = document.querySelector('.hero-title');
            const heroSubtitle = document.querySelector('.hero-subtitle');
            animateElement(heroTitle, 0.4);
            animateElement(heroSubtitle, 0.5);

            // Carousel animation
            const carouselSection = document.querySelector('.carousel-card');
            animateElement(carouselSection, 0.6);

            // Feature cards animation
            const featureCards = document.querySelectorAll('.feature-card');
            featureCards.forEach((card, index) => {
                animateElement(card, 0.7 + (index * 0.1));
            });

            // Partners section animation
            const partnersTitle = document.querySelector('.partners-section .section-title');
            const partnerLogos = document.querySelectorAll('.partner-logo');
            animateElement(partnersTitle, 0.9);
            partnerLogos.forEach((logo, index) => {
                animateElement(logo, 1.0 + (index * 0.1));
            });

            // CTA section animation
            const ctaSection = document.querySelector('.cta-section');
            const ctaElements = ctaSection.querySelectorAll('.cta-title, .cta-description, .enter-button');
            animateElement(ctaSection, 1.2);
            ctaElements.forEach((el, index) => {
                animateElement(el, 1.3 + (index * 0.1));
            });
        });
    </script>
{% endblock %}
==================================================

Fichier: Templates\cv_generator\_additional.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_additional.html.twig
-----
<div class="form-section" id="additionalSection">
    <h4 class="form-section-title">
        <i class="fas fa-plus-circle"></i>
        Additional Information
    </h4>
    <div class="row g-4">
        <div class="col-md-6">
            <label class="form-label">Languages</label>
            <textarea class="form-control" name="languages" rows="2" placeholder="e.g. English (Fluent), French (Intermediate), Arabic (Native)"></textarea>
        </div>
        <div class="col-md-6">
            <label class="form-label">Interests & Hobbies</label>
            <textarea class="form-control" name="interests" rows="2" placeholder="e.g. Reading, Photography, Traveling"></textarea>
        </div>
        <div class="col-md-12">
            <label class="form-label">Publications/Projects/Certifications</label>
            <textarea class="form-control" name="certifications" rows="4" placeholder="List any relevant certifications, publications, or notable projects"></textarea>
        </div>
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_education.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_education.html.twig
-----
<div class="form-section" id="educationSection">
    <h4 class="form-section-title">
        <i class="fas fa-graduation-cap"></i>
        Education
    </h4>
    <div id="educationContainer">
        <div class="entry-container">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Degree / Certificate</label>
                    <input type="text" class="form-control" name="education[0][degree]" placeholder="e.g. Bachelor of Science in Computer Science" data-required="true">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Institution</label>
                    <input type="text" class="form-control" name="education[0][institution]" placeholder="e.g. ESPRIT School of Engineering" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="education[0][startDate]" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">End Date</label>
                    <div class="input-group">
                        <input type="date" class="form-control" name="education[0][endDate]">
                        <div class="input-group-text">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="currentEducation0">
                                <label class="form-check-label" for="currentEducation0">Present</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" name="education[0][description]" rows="2" placeholder="Include relevant coursework, honors, achievements, etc."></textarea>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-add" id="addEducation">
        <i class="fas fa-plus"></i> Add Another Education
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_experience.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_experience.html.twig
-----
<div class="form-section" id="experienceSection">
    <h4 class="form-section-title">
        <i class="fas fa-briefcase"></i>
        Work Experience
    </h4>
    <div id="experienceContainer">
        <div class="entry-container">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Position / Job Title</label>
                    <input type="text" class="form-control" name="experience[0][position]" placeholder="e.g. Senior Developer" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Company / Organization</label>
                    <input type="text" class="form-control" name="experience[0][company]" placeholder="e.g. Tech Solutions Inc." required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="experience[0][startDate]" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">End Date</label>
                    <div class="input-group">
                        <input type="date" class="form-control" name="experience[0][endDate]">
                        <div class="input-group-text">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="currentPosition0">
                                <label class="form-check-label" for="currentPosition0">Present</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" name="experience[0][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-add" id="addExperience">
        <i class="fas fa-plus"></i> Add Another Experience
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_form_scripts.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_form_scripts.html.twig
-----
document.addEventListener('DOMContentLoaded', function() {
// Form Section Navigation
function initFormNavigation() {
const sections = document.querySelectorAll('.form-section-page');
const nextButtons = document.querySelectorAll('.next-section');
const prevButtons = document.querySelectorAll('.prev-section');
const reviewButton = document.querySelector('.btn-submit-review');
const progressBar = document.querySelector('.progress-bar');
const stepItems = document.querySelectorAll('.step-item');

// Show section
function showSection(sectionId) {
// Hide all sections
sections.forEach(section => {
section.classList.remove('active');
});

// Show the target section
const targetSection = document.getElementById('section-' + sectionId);
if (targetSection) {
targetSection.classList.add('active');

// Update progress bar
if (progressBar) {
progressBar.style.width = ((sectionId - 1) * 20) + '%';
}

// Update step items
stepItems.forEach((step, index) => {
if (index + 1 < sectionId) {
step.classList.add('completed');
step.classList.remove('active');
} else if (index + 1 === parseInt(sectionId)) {
step.classList.add('active');
step.classList.remove('completed');
} else {
step.classList.remove('active', 'completed');
}
});

// Scroll to top of form
const formCard = document.querySelector('.card');
if (formCard) {
formCard.scrollIntoView({ behavior: 'smooth', block: 'start' });
}
}
}

// Next button click
nextButtons.forEach(button => {
button.addEventListener('click', function() {
const nextSection = this.getAttribute('data-next');
if (nextSection) {
// Validate current section here if needed
showSection(nextSection);
}
});
});

// Previous button click
prevButtons.forEach(button => {
button.addEventListener('click', function() {
const prevSection = this.getAttribute('data-prev');
if (prevSection) {
showSection(prevSection);
}
});
});

// Review button click
if (reviewButton) {
reviewButton.addEventListener('click', function() {
// Generate review content
generateReview();
showSection('6');
});
}

// Generate review content
function generateReview() {
const reviewContent = document.getElementById('reviewContent');
if (!reviewContent) return;

const firstName = document.getElementById('firstName')?.value || 'First Name';
const lastName = document.getElementById('lastName')?.value || 'Last Name';

// Generate comprehensive review HTML with all form data
let reviewHTML = `
<div class="row">
    <div class="col-md-12 mb-4">
        <h5>Personal Information</h5>
        <table class="table table-bordered table-sm">
            <tbody>
            <tr>
                <th>Name</th>
                <td>${firstName} ${lastName}</td>
            </tr>
            <tr>
                <th>Job Title</th>
                <td>${document.getElementById('jobTitle')?.value || '-'}</td>
            </tr>
            <tr>
                <th>Email</th>
                <td>${document.getElementById('email')?.value || '-'}</td>
            </tr>
            <tr>
                <th>Phone</th>
                <td>${document.getElementById('phone')?.value || '-'}</td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-12 mb-4">
        <h5>Education</h5>
        <ul class="list-group">
            `;

            // Add education entries
            const educationEntries = document.querySelectorAll('#educationContainer .entry-container');
            if (educationEntries.length > 0) {
            educationEntries.forEach((entry, index) => {
            const degree = entry.querySelector('input[name$="[degree]"]')?.value || '-';
            const institution = entry.querySelector('input[name$="[institution]"]')?.value || '-';

            reviewHTML += `
            <li class="list-group-item">
                <strong>${degree}</strong> at ${institution}
            </li>
            `;
            });
            } else {
            reviewHTML += `
            <li class="list-group-item text-muted">No education entries added</li>
            `;
            }

            reviewHTML += `
        </ul>
    </div>
    <div class="col-md-12 mb-4">
        <h5>Experience</h5>
        <ul class="list-group">
            `;

            // Add experience entries
            const experienceEntries = document.querySelectorAll('#experienceContainer .entry-container');
            if (experienceEntries.length > 0) {
            experienceEntries.forEach((entry, index) => {
            const position = entry.querySelector('input[name$="[position]"]')?.value || '-';
            const company = entry.querySelector('input[name$="[company]"]')?.value || '-';

            reviewHTML += `
            <li class="list-group-item">
                <strong>${position}</strong> at ${company}
            </li>
            `;
            });
            } else {
            reviewHTML += `
            <li class="list-group-item text-muted">No experience entries added</li>
            `;
            }

            reviewHTML += `
        </ul>
    </div>
    <div class="col-md-12">
        <h5>Skills</h5>
        <div>
            `;

            // Add skills
            const skills = document.querySelectorAll('.skill-badge');
            if (skills.length > 0) {
            skills.forEach(skill => {
            const skillText = skill.textContent.replace('×', '').trim();
            reviewHTML += `<span class="badge bg-secondary m-1">${skillText}</span>`;
            });
            } else {
            reviewHTML += `<p class="text-muted">No skills added</p>`;
            }

            reviewHTML += `
        </div>
    </div>
</div>
`;

reviewContent.innerHTML = reviewHTML;
}
}

// Autofill functionality
function setupAutofill() {
const autofillBtn = document.getElementById('autofillBtn');
if (!autofillBtn) return;

autofillBtn.addEventListener('click', function() {
// Get sample data
const sampleDataElement = document.getElementById('sampleData');
if (!sampleDataElement) return;

try {
const sampleData = JSON.parse(sampleDataElement.dataset.sample);

// Fill Personal Information
if (sampleData.firstName) document.getElementById('firstName').value = sampleData.firstName;
if (sampleData.lastName) document.getElementById('lastName').value = sampleData.lastName;
if (sampleData.jobTitle) document.getElementById('jobTitle').value = sampleData.jobTitle;
if (sampleData.email) document.getElementById('email').value = sampleData.email;
if (sampleData.phone) document.getElementById('phone').value = sampleData.phone;
if (sampleData.address) document.getElementById('address').value = sampleData.address;
if (sampleData.summary) document.getElementById('summary').value = sampleData.summary;

// Fill Education (remove existing and add new ones from sample data)
const educationContainer = document.getElementById('educationContainer');
if (educationContainer && sampleData.education && Array.isArray(sampleData.education)) {
// Clear existing entries except the first one
while (educationContainer.children.length > 1) {
educationContainer.removeChild(educationContainer.lastChild);
}

// Fill the first education entry
if (sampleData.education.length > 0) {
const firstEntry = educationContainer.children[0];
fillEducationEntry(firstEntry, sampleData.education[0]);

// Add additional education entries
for (let i = 1; i < sampleData.education.length; i++) {
// Trigger click on "Add Another Education" button
document.getElementById('addEducation').click();
// Fill the newly added entry
const newEntry = educationContainer.lastChild;
fillEducationEntry(newEntry, sampleData.education[i]);
}
}
}

// Fill Experience (remove existing and add new ones from sample data)
const experienceContainer = document.getElementById('experienceContainer');
if (experienceContainer && sampleData.experience && Array.isArray(sampleData.experience)) {
// Clear existing entries
experienceContainer.innerHTML = '';

// Add experience entries
sampleData.experience.forEach((exp, index) => {
// Create template for the experience entry
const template = `
<div class="entry-container">
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Position / Job Title</label>
            <input type="text" class="form-control" name="experience[${index}][position]" placeholder="e.g. Senior Developer" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Company / Organization</label>
            <input type="text" class="form-control" name="experience[${index}][company]" placeholder="e.g. Tech Solutions Inc." required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="experience[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="experience[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentPosition${index}">
                        <label class="form-check-label" for="currentPosition${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="experience[${index}][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
        </div>
    </div>
</div>
`;

experienceContainer.insertAdjacentHTML('beforeend', template);
const newEntry = experienceContainer.lastChild;

// Fill the experience entry
if (exp.position) newEntry.querySelector('input[name$="[position]"]').value = exp.position;
if (exp.company) newEntry.querySelector('input[name$="[company]"]').value = exp.company;
if (exp.startDate) newEntry.querySelector('input[name$="[startDate]"]').value = exp.startDate;

if (exp.endDate) {
newEntry.querySelector('input[name$="[endDate]"]').value = exp.endDate;
} else {
// Check the "Present" checkbox if endDate is empty
const checkbox = newEntry.querySelector(`#currentPosition${index}`);
if (checkbox) checkbox.checked = true;
}

if (exp.description) newEntry.querySelector('textarea[name$="[description]"]').value = exp.description;
});
}

// Fill Skills
if (sampleData.skills && Array.isArray(sampleData.skills)) {
// Clear existing skills
const skillsDisplay = document.getElementById('skillsDisplay');
if (skillsDisplay) {
skillsDisplay.innerHTML = '';
}

// Add skills
sampleData.skills.forEach(skill => {
addSkill(skill);
});
}

// Fill Additional Information
if (sampleData.languages) document.querySelector('textarea[name="languages"]').value = sampleData.languages;
if (sampleData.interests) document.querySelector('textarea[name="interests"]').value = sampleData.interests;
if (sampleData.certifications) document.querySelector('textarea[name="certifications"]').value = sampleData.certifications;

// Show success message
alert('Form autofilled with sample data!');

} catch (error) {
console.error('Error autofilling form:', error);
alert('Could not autofill the form. Please try again.');
}
});

// Helper function to fill education entry
function fillEducationEntry(entry, educationData) {
if (educationData.degree) entry.querySelector('input[name$="[degree]"]').value = educationData.degree;
if (educationData.institution) entry.querySelector('input[name$="[institution]"]').value = educationData.institution;
if (educationData.startDate) entry.querySelector('input[name$="[startDate]"]').value = educationData.startDate;

if (educationData.endDate) {
entry.querySelector('input[name$="[endDate]"]').value = educationData.endDate;
} else {
// Check the "Present" checkbox if endDate is empty
const checkboxId = entry.querySelector('.form-check-input').id;
document.getElementById(checkboxId).checked = true;
}

if (educationData.description) entry.querySelector('textarea[name$="[description]"]').value = educationData.description;
}
}

// Initialize form navigation
initFormNavigation();

// Initialize autofill functionality
setupAutofill();

// Add Education Entry
document.getElementById('addEducation').addEventListener('click', function() {
const container = document.getElementById('educationContainer');
const index = container.children.length;
const template = `
<div class="entry-container position-relative">
    <button type="button" class="btn-remove" onclick="this.parentElement.remove()">×</button>
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Degree / Certificate</label>
            <input type="text" class="form-control" name="education[${index}][degree]" placeholder="e.g. Bachelor of Science in Computer Science" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Institution</label>
            <input type="text" class="form-control" name="education[${index}][institution]" placeholder="e.g. ESPRIT School of Engineering" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="education[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="education[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentEducation${index}">
                        <label class="form-check-label" for="currentEducation${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="education[${index}][description]" rows="2" placeholder="Include relevant coursework, honors, achievements, etc."></textarea>
        </div>
    </div>
</div>
`;
container.insertAdjacentHTML('beforeend', template);
});

// Add Experience Entry
document.getElementById('addExperience').addEventListener('click', function() {
const container = document.getElementById('experienceContainer');
const index = container.children.length;
const template = `
<div class="entry-container position-relative">
    <button type="button" class="btn-remove" onclick="this.parentElement.remove()">×</button>
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Position / Job Title</label>
            <input type="text" class="form-control" name="experience[${index}][position]" placeholder="e.g. Senior Developer" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Company / Organization</label>
            <input type="text" class="form-control" name="experience[${index}][company]" placeholder="e.g. Tech Solutions Inc." required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="experience[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="experience[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentPosition${index}">
                        <label class="form-check-label" for="currentPosition${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="experience[${index}][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
        </div>
    </div>
</div>
`;
container.insertAdjacentHTML('beforeend', template);
});

// Skills Management
const skillInput = document.getElementById('skillInput');
const addSkillBtn = document.getElementById('addSkillBtn');
const skillsDisplay = document.getElementById('skillsDisplay');
const skillsContainer = document.getElementById('skillsContainer');

function addSkill(skillText) {
if(!skillText) return;

// Create badge
const badge = document.createElement('span');
badge.className = 'skill-badge';
badge.textContent = skillText;

// Remove button
const removeBtn = document.createElement('button');
removeBtn.textContent = '×';
removeBtn.onclick = function() {
badge.remove();
updateHiddenInputs();
};

badge.appendChild(removeBtn);
skillsDisplay.appendChild(badge);

// Update hidden inputs
updateHiddenInputs();

// Clear input
if (skillInput) skillInput.value = '';
}

function updateHiddenInputs() {
// Clear container
skillsContainer.innerHTML = '';

// Get all skills
const badges = skillsDisplay.querySelectorAll('.skill-badge');

// Create hidden inputs
badges.forEach((badge, index) => {
const input = document.createElement('input');
input.type = 'hidden';
input.name = `skills[]`;
input.value = badge.textContent.replace('×', '').trim();

skillsContainer.appendChild(input);
});
}

// Add skill button click
if (addSkillBtn) {
addSkillBtn.addEventListener('click', function() {
addSkill(skillInput.value.trim());
});
}

// Enter key press
if (skillInput) {
skillInput.addEventListener('keypress', function(e) {
if(e.key === 'Enter') {
e.preventDefault();
addSkill(this.value.trim());
}
});
}

// Preview functionality
const previewBtn = document.querySelector('.btn-preview');
const cvPreview = document.getElementById('cvPreview');
const closePreview = document.getElementById('closePreview');
const previewContent = document.getElementById('previewContent');

if(previewBtn && cvPreview && closePreview) {
previewBtn.addEventListener('click', function() {
// Generate preview content
generatePreview();

// Show preview panel
cvPreview.classList.add('show');
});

closePreview.addEventListener('click', function() {
cvPreview.classList.remove('show');
});
}

function generatePreview() {
if (!previewContent) return;

const firstName = document.getElementById('firstName')?.value || 'First Name';
const lastName = document.getElementById('lastName')?.value || 'Last Name';
const jobTitle = document.getElementById('jobTitle')?.value || 'Job Title';
const email = document.getElementById('email')?.value || 'email@example.com';
const phone = document.getElementById('phone')?.value || 'Phone Number';
const address = document.getElementById('address')?.value || 'Address';
const summary = document.getElementById('summary')?.value || 'Professional Summary';

let previewHTML = `
<div class="preview-section">
    <h5>${firstName} ${lastName}</h5>
    <p class="text-muted">${jobTitle}</p>
    <div class="small mb-3">
        <div><i class="fas fa-envelope me-2"></i>${email}</div>
        <div><i class="fas fa-phone me-2"></i>${phone}</div>
        <div><i class="fas fa-map-marker-alt me-2"></i>${address}</div>
    </div>
    <p>${summary}</p>
</div>
`;

// Add education
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-graduation-cap me-2"></i>Education</h6>
    `;

    const educationContainers = document.querySelectorAll('#educationContainer .entry-container');
    educationContainers.forEach(container => {
    const degree = container.querySelector('input[name$="[degree]"]')?.value || 'Degree';
    const institution = container.querySelector('input[name$="[institution]"]')?.value || 'Institution';
    const startDate = container.querySelector('input[name$="[startDate]"]')?.value || '';
    const endDate = container.querySelector('input[name$="[endDate]"]')?.value || 'Present';

    // Check if "Present" checkbox is checked
    const checkboxId = container.querySelector('.form-check-input')?.id;
    const isPresent = checkboxId ? document.getElementById(checkboxId).checked : false;

    const endDateDisplay = isPresent ? 'Present' : (endDate !== 'Present' ? new Date(endDate).getFullYear() : '');

    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">${degree}</div>
        <div>${institution} (${startDate ? new Date(startDate).getFullYear() : ''} - ${endDateDisplay})</div>
    </div>
    `;
    });

    previewHTML += `</div>`;

// Add experience
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-briefcase me-2"></i>Experience</h6>
    `;

    const experienceContainers = document.querySelectorAll('#experienceContainer .entry-container');
    experienceContainers.forEach(container => {
    const position = container.querySelector('input[name$="[position]"]')?.value || 'Position';
    const company = container.querySelector('input[name$="[company]"]')?.value || 'Company';
    const description = container.querySelector('textarea[name$="[description]"]')?.value || '';
    const startDate = container.querySelector('input[name$="[startDate]"]')?.value || '';
    const endDate = container.querySelector('input[name$="[endDate]"]')?.value || '';

    // Check if "Present" checkbox is checked
    const checkboxId = container.querySelector('.form-check-input')?.id;
    const isPresent = checkboxId ? document.getElementById(checkboxId).checked : false;

    const startDateFormatted = startDate ? new Date(startDate).toLocaleDateString() : '';
    const endDateFormatted = isPresent ? 'Present' : (endDate ? new Date(endDate).toLocaleDateString() : '');
    const dateRange = startDateFormatted || endDateFormatted ? `${startDateFormatted} - ${endDateFormatted}` : '';

    previewHTML += `
    <div class="mb-3">
        <div class="fw-bold">${position}</div>
        <div class="d-flex justify-content-between">
            <span>${company}</span>
            <small class="text-muted">${dateRange}</small>
        </div>
        <div class="small mt-1">${description}</div>
    </div>
    `;
    });

    previewHTML += `</div>`;

// Add skills
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-tools me-2"></i>Skills</h6>
    <div class="d-flex flex-wrap">
        `;

        const skills = document.querySelectorAll('.skill-badge');
        skills.forEach(skill => {
        const skillText = skill.textContent.replace('×', '').trim();
        previewHTML += `<span class="badge bg-light text-dark m-1">${skillText}</span>`;
        });

        previewHTML += `
    </div>
</div>
`;

// Add additional information if available
const languages = document.querySelector('textarea[name="languages"]')?.value;
const interests = document.querySelector('textarea[name="interests"]')?.value;
const certifications = document.querySelector('textarea[name="certifications"]')?.value;

if (languages || interests || certifications) {
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-plus-circle me-2"></i>Additional Information</h6>
    `;

    if (languages) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Languages</div>
        <div>${languages}</div>
    </div>
    `;
    }

    if (interests) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Interests & Hobbies</div>
        <div>${interests}</div>
    </div>
    `;
    }

    if (certifications) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Publications/Projects/Certifications</div>
        <div>${certifications.replace(/\n/g, '<br>')}</div>
    </div>
    `;
    }

    previewHTML += `</div>`;
}

previewContent.innerHTML = previewHTML;
}
});
==================================================

Fichier: Templates\cv_generator\_languages.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_languages.html.twig
-----
<div class="section-title">
    <i class="fas fa-language"></i>
    <h3>Languages</h3>
</div>

<div class="alert alert-info">
    <i class="fas fa-info-circle me-2"></i>
    Add languages you speak and indicate your proficiency level (e.g., "English (Fluent)", "French (Intermediate)").
</div>

<div id="languagesContainer" class="mb-4">
    <!-- Languages will be added here dynamically -->
</div>

<div class="input-group mb-3">
    <input type="text" class="form-control" id="languageInput" placeholder="Enter a language and proficiency (e.g., English (Native))">
    <button class="btn btn-primary" type="button" id="addLanguageBtn">
        <i class="fas fa-plus me-2"></i>Add
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_personal_info.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_personal_info.html.twig
-----
<div class="section-title">
    <i class="fas fa-user-circle"></i>
    <h3>Personal Information</h3>
</div>

<div class="upload-container mb-4 text-center">
    <div class="profile-photo-wrapper d-inline-block">
        <img id="photoPreview" src="{{ asset('images/default-profile.png') }}" alt="Profile Photo Preview" class="profile-photo">
    </div>
    <div class="mt-3">
        <label for="photoInput" class="btn btn-outline-secondary">
            <i class="fas fa-camera me-2"></i>Upload Photo
        </label>
        <input type="file" id="photoInput" name="photo" accept="image/*" style="display: none;">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="firstName" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstName" name="firstName" placeholder="Enter your first name" required>
    </div>
    <div class="col-md-6">
        <label for="lastName" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="lastName" name="lastName" placeholder="Enter your last name" required>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <label for="position" class="form-label">Professional Title</label>
        <input type="text" class="form-control" id="position" name="position" placeholder="e.g. Software Developer, Project Manager, etc.">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required>
    </div>
    <div class="col-md-6">
        <label for="phone" class="form-label">Phone</label>
        <input type="tel" class="form-control" id="phone" name="phone" placeholder="e.g. +216 12 345 678">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <label for="address" class="form-label">Address</label>
        <input type="text" class="form-control" id="address" name="address" placeholder="Street Address">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="city" class="form-label">City</label>
        <input type="text" class="form-control" id="city" name="city" placeholder="City">
    </div>
    <div class="col-md-6">
        <label for="country" class="form-label">Country</label>
        <input type="text" class="form-control" id="country" name="country" placeholder="Country">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="github" class="form-label">GitHub</label>
        <div class="input-group">
            <span class="input-group-text"><i class="fab fa-github"></i></span>
            <input type="text" class="form-control" id="github" name="github" placeholder="github.com/username">
        </div>
    </div>
    <div class="col-md-6">
        <label for="linkedin" class="form-label">LinkedIn</label>
        <div class="input-group">
            <span class="input-group-text"><i class="fab fa-linkedin"></i></span>
            <input type="text" class="form-control" id="linkedin" name="linkedin" placeholder="linkedin.com/in/username">
        </div>
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_preview.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_preview.html.twig
-----
<div class="form-section" id="skillsSection">
    <h4 class="form-section-title">
        <i class="fas fa-tools"></i>
        Skills
        <small class="float-end fs-6 text-muted">
            Last updated: 2025-04-18 21:05:57 by Mohamed-abidi-95
        </small>
    </h4>
    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Add Skills</label>
            <div class="skills-input-group">
                <input type="text" id="skillInput" class="form-control" placeholder="e.g. Programming, Leadership, Project Management">
                <button type="button" id="addSkillBtn" class="btn btn-primary">Add</button>
            </div>
            <small class="text-muted">Press Enter or click Add button to add skills</small>
        </div>
        <div class="col-md-6">
            <label class="form-label">Your Skills</label>
            <div id="skillsDisplay" class="pt-2">
                <!-- Skills badges will appear here -->
            </div>
        </div>
    </div>
    <div id="skillsContainer" class="d-none">
        <!-- Hidden input fields for skills -->
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_progress.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_progress.html.twig
-----
<div class="steps-container mb-4">
    <div class="step-item {% if currentStep >= 1 %}active{% endif %}">
        <div class="step-number">1</div>
        <div class="step-title">Personal</div>
    </div>
    <div class="step-item {% if currentStep >= 2 %}active{% endif %}">
        <div class="step-number">2</div>
        <div class="step-title">Education</div>
    </div>
    <div class="step-item {% if currentStep >= 3 %}active{% endif %}">
        <div class="step-number">3</div>
        <div class="step-title">Experience</div>
    </div>
    <div class="step-item {% if currentStep >= 4 %}active{% endif %}">
        <div class="step-number">4</div>
        <div class="step-title">Skills</div>
    </div>
    <div class="step-item {% if currentStep >= 5 %}active{% endif %}">
        <div class="step-number">5</div>
        <div class="step-title">Languages</div>
    </div>
    <div class="step-item {% if currentStep >= 6 %}active{% endif %}">
        <div class="step-number">6</div>
        <div class="step-title">Additional</div>
    </div>
    <div class="step-item {% if currentStep >= 7 %}active{% endif %}">
        <div class="step-number">7</div>
        <div class="step-title">Review</div>
    </div>
</div>

<div class="progress-container">
    <div class="progress-bar" style="width: {{ (currentStep / 7) * 100 }}%"></div>
</div>
==================================================

Fichier: Templates\cv_generator\_review.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_review.html.twig
-----
<div class="section-title">
    <i class="fas fa-check-circle"></i>
    <h3>Review Your CV</h3>
</div>

<div class="alert alert-info">
    <i class="fas fa-info-circle"></i>
    Please review your CV information before generating the final document.
</div>

<div id="reviewContent" class="p-3 border rounded bg-light">
    <!-- Review content will be generated here -->
</div>

<div class="mt-4">
    <h4>Choose Template</h4>
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-header bg-success text-white">Green Professional Template</div>
                <div class="card-body text-center">
                    <img src="{{ asset('images/template_green.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Green Template Preview">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="template" id="template-green" value="green" checked>
                        <label class="form-check-label" for="template-green">
                            Select Green Template
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">Blue Modern Template</div>
                <div class="card-body text-center">
                    <img src="{{ asset('images/template_blue.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Blue Template Preview">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="template" id="template-blue" value="blue">
                        <label class="form-check-label" for="template-blue">
                            Select Blue Template
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" name="photoData" id="photoDataField" value="">

<!-- Section Navigation -->
<div class="form-navigation-buttons">
    <button type="button" class="btn btn-secondary prev-section" data-prev="5">
        <i class="fas fa-arrow-left"></i> Previous
    </button>
    <button type="submit" class="btn btn-primary btn-submit">
        <i class="fas fa-file-download"></i> Generate CV
    </button>
</div>

<script>
    // When the form is submitted, include the photo data if available
    document.addEventListener('DOMContentLoaded', function() {
        const photoDataField = document.getElementById('photoDataField');
        const savedPhotoData = localStorage.getItem('cvProfilePhoto');

        if (photoDataField && savedPhotoData) {
            photoDataField.value = savedPhotoData;
        }
    });
</script>
==================================================

Fichier: Templates\cv_generator\_skills.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_skills.html.twig
-----
<div class="form-section" id="skillsSection">
    <h4 class="form-section-title">
        <i class="fas fa-tools"></i>
        Skills
    </h4>
    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Add Skills</label>
            <div class="skills-input-group">
                <input type="text" id="skillInput" class="form-control" placeholder="e.g. Programming, Leadership, Project Management">
                <button type="button" id="addSkillBtn" class="btn btn-primary">Add</button>
            </div>
            <small class="text-muted">Press Enter or click Add button to add skills</small>
        </div>
        <div class="col-md-6">
            <label class="form-label">Your Skills</label>
            <div id="skillsDisplay" class="pt-2">
                <!-- Skills badges will appear here -->
            </div>
        </div>
    </div>
    <div id="skillsContainer" class="d-none">
        <!-- Hidden input fields for skills -->
    </div>
</div>
==================================================

Fichier: Templates\partials\_header.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\_header.html.twig
-----
<header class="header-container mb-4">
    <div class="container">
        <div class="logo-container py-2">
            <div class="logo-item">
                <img src="{{ asset('images/logo.png') }}" alt="Logo" class="img-fluid" style="max-height: 60px;">
            </div>
            <div class="logo-item text-center">
                <img src="{{ asset('images/tunisie-removebg-preview.png') }}" alt="Tunisia" class="img-fluid" style="max-height: 80px;">
            </div>
            <div class="logo-item text-end">
                <img src="{{ asset('images/esprim.png') }}" alt="ESPRIM" class="img-fluid" style="max-height: 40px;">
            </div>
        </div>
    </div>
</header>
==================================================

Fichier: Templates\partials\_styles.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\_styles.html.twig
-----
<style>
    :root {
        /* Your selected color palette */
        --primary-red: #ee3124;
        --charcoal: #2d3748;
        --light-beige: #faf7f2;
        --slate-gray: #718096;
        --white: #ffffff;
        --dark-text: #1a202c;

        /* Additional utility variables */
        --border-radius: 8px;
        --box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        --transition: all 0.3s ease;
        --card-shadow: 0 4px 6px rgba(45, 55, 72, 0.1), 0 5px 15px rgba(45, 55, 72, 0.05);
    }

    body {
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
        background-color: var(--light-beige);
        color: var(--dark-text);
        line-height: 1.6;
    }

    .header-container {
        background: linear-gradient(to right, var(--white), var(--light-beige));
        box-shadow: var(--box-shadow);
        border-bottom: 1px solid rgba(0,0,0,0.1);
        padding: 1rem 0;
    }

    .logo-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 0;
    }

    .logo-item {
        transition: transform 0.3s;
    }

    .logo-item:hover {
        transform: scale(1.05);
    }

    /* Original sizing for banner images */
    .banner-image {
        width: 100px;
        height: auto;
        transition: transform 0.3s;
    }

    .banner-image:hover {
        transform: scale(1.05);
    }

    .banner-image.center {
        width: 120px;
    }

    /* Enhanced title styling - made 40% smaller */
    .main-title-container {
        text-align: center;
        margin: 2rem auto 2.5rem; /* Reduced margin to match smaller elements */
        position: relative;
        max-width: 600px;
    }

    .main-title {
        color: var(--charcoal);
        font-weight: 800;
        font-size: 1.8rem; /* 40% smaller from 3rem */
        letter-spacing: -0.5px;
        margin: 0;
        position: relative;
        display: inline-block;
        text-transform: uppercase;
    }

    .main-title::after {
        content: '';
        position: absolute;
        bottom: -6px; /* Smaller underline positioning */
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        height: 3px; /* Smaller underline height */
        background: linear-gradient(to right, var(--primary-red), var(--charcoal));
        border-radius: 2px;
    }

    .main-subtitle {
        color: var(--slate-gray);
        font-size: 1rem; /* Smaller subtitle */
        font-weight: 400;
        margin-top: 1rem; /* Reduced margin */
        font-style: italic;
    }

    .title-accent {
        color: var(--primary-red);
        position: relative;
        display: inline-block;
    }

    .title-accent::before {
        content: '';
        position: absolute;
        top: -3px; /* Smaller positioning */
        left: -6px; /* Smaller positioning */
        width: 15px; /* 40% smaller */
        height: 15px; /* 40% smaller */
        background-color: rgba(238, 49, 36, 0.1);
        border-radius: 50%;
        z-index: -1;
    }

    .title-icon {
        font-size: 1.8rem; /* 40% smaller from 3rem */
        color: var(--primary-red);
        margin-left: 10px; /* Smaller margin */
        vertical-align: middle;
        animation: float 3s ease-in-out infinite;
    }

    @keyframes float {
        0% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-5px); /* Smaller float animation */
        }
        100% {
            transform: translateY(0px);
        }
    }

    /* Adjusted Logo badge styling - 40% smaller */
    .logo-badge {
        background-color: var(--white);
        width: 90px; /* 40% smaller from 150px */
        height: 90px; /* 40% smaller from 150px */
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.2rem; /* Smaller margin */
        box-shadow: 0 3px 9px rgba(45, 55, 72, 0.1); /* Smaller shadow */
        border: 3px solid rgba(238, 49, 36, 0.2); /* 40% smaller border */
    }

    .title-logo {
        max-width: 66px; /* 40% smaller from 110px */
        max-height: 66px; /* 40% smaller from 110px */
        object-fit: contain;
    }

    .card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 3rem;
        background-color: var(--white);
    }

    .card-header {
        background-color: var(--primary-red);
        color: var(--white);
        font-weight: 600;
        padding: 1.2rem 1.5rem;
        border-bottom: none;
    }

    .card-body {
        padding: 2rem;
        background-color: var(--white);
    }

    .form-section {
        margin-bottom: 2.5rem;
        position: relative;
    }

    .form-section-title {
        color: var(--charcoal);
        margin-bottom: 1.5rem;
        padding-bottom: 0.7rem;
        border-bottom: 2px solid rgba(113, 128, 150, 0.2);
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    .form-section-title i {
        font-size: 1.8rem;
        margin-right: 1rem;
        color: var(--primary-red);
    }

    .form-control, .form-select {
        padding: 0.75rem 1rem;
        border: 1px solid rgba(113, 128, 150, 0.3);
        border-radius: var(--border-radius);
        transition: var(--transition);
        background-color: var(--white);
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-red);
        box-shadow: 0 0 0 0.25rem rgba(238, 49, 36, 0.25);
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--charcoal);
    }

    .entry-container {
        background-color: var(--light-beige);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid rgba(113, 128, 150, 0.2);
        position: relative;
        transition: var(--transition);
    }

    .entry-container:hover {
        box-shadow: 0 5px 15px rgba(45, 55, 72, 0.05);
    }

    .btn-add {
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
        border: 1px dashed var(--primary-red);
        padding: 0.6rem 1.2rem;
        border-radius: var(--border-radius);
        transition: var(--transition);
        display: flex;
        align-items: center;
        margin-top: 0.5rem;
    }

    .btn-add i {
        margin-right: 0.5rem;
    }

    .btn-add:hover {
        background-color: rgba(238, 49, 36, 0.15);
        color: var(--primary-red);
    }

    .btn-remove {
        position: absolute;
        right: 1rem;
        top: 1rem;
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
        border: none;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
    }

    .btn-remove:hover {
        background-color: rgba(238, 49, 36, 0.2);
        transform: scale(1.05);
    }

    .skill-badge {
        background-color: rgba(113, 128, 150, 0.1);
        color: var(--charcoal);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        display: inline-flex;
        align-items: center;
        transition: var(--transition);
    }

    .skill-badge button {
        background: none;
        border: none;
        color: var(--slate-gray);
        margin-left: 0.5rem;
        cursor: pointer;
        font-size: 0.8rem;
    }

    .skill-badge:hover {
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
    }

    .skills-input-group {
        display: flex;
        margin-bottom: 1rem;
    }

    .skills-input-group input {
        flex-grow: 1;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .skills-input-group button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        background-color: var(--primary-red);
        border-color: var(--primary-red);
    }

    .skills-input-group button:hover {
        background-color: rgba(238, 49, 36, 0.9);
        border-color: rgba(238, 49, 36, 0.9);
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: var(--border-radius);
    }

    .btn-submit {
        background-color: var(--primary-red);
        border-color: var(--primary-red);
        font-weight: 600;
        padding: 0.8rem 2rem;
        border-radius: var(--border-radius);
        transition: var(--transition);
        box-shadow: 0 4px 6px rgba(238, 49, 36, 0.2);
        color: var(--white);
    }

    .btn-submit:hover {
        background-color: rgba(238, 49, 36, 0.9);
        border-color: rgba(238, 49, 36, 0.9);
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(238, 49, 36, 0.25);
    }

    .btn-preview {
        color: var(--charcoal);
        border-color: var(--charcoal);
    }

    .btn-preview:hover {
        background-color: var(--charcoal);
        border-color: var(--charcoal);
        color: var(--white);
    }

    /* Enhanced preview panel styling */
    .cv-preview {
        position: fixed;
        top: 0;
        right: 0;
        height: 100vh;
        width: 400px;
        background-color: var(--white);
        border-left: 1px solid rgba(113, 128, 150, 0.2);
        box-shadow: -4px 0 15px rgba(45, 55, 72, 0.1);
        padding: 2rem;
        overflow-y: auto;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
    }

    .cv-preview.show {
        transform: translateX(0);
    }

    .preview-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--slate-gray);
        cursor: pointer;
    }

    .preview-section {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(113, 128, 150, 0.2);
    }

    .preview-section:last-child {
        border-bottom: none;
    }

    .preview-section h5 {
        color: var(--primary-red);
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .preview-section h6 {
        color: var(--charcoal);
        font-weight: 600;
        margin-top: 0.5rem;
    }

    .preview-content {
        padding: 1rem;
        background-color: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }

    /* Profile photo display in CV - matching the smaller logo badge size */
    .profile-photo-container {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .profile-photo-wrapper {
        position: relative;
        width: 90px; /* 40% smaller from 150px to match logo badge */
        height: 90px; /* 40% smaller from 150px to match logo badge */
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid rgba(238, 49, 36, 0.2); /* 40% smaller border */
        box-shadow: 0 3px 9px rgba(45, 55, 72, 0.1); /* Smaller shadow */
    }

    .profile-photo {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Preview panel profile photo */
    .preview-profile-photo {
        width: 90px; /* 40% smaller to match other photos */
        height: 90px; /* 40% smaller to match other photos */
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid rgba(238, 49, 36, 0.2); /* Smaller border */
        box-shadow: 0 2px 6px rgba(45, 55, 72, 0.1); /* Smaller shadow */
        margin: 0 auto 1rem;
        display: block;
    }

    /* Progress steps */
    .steps-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
    }

    .step-item {
        flex: 1;
        text-align: center;
        position: relative;
    }

    .step-item:not(:last-child)::after {
        content: '';
        position: absolute;
        top: 1.5rem;
        right: -50%;
        width: 100%;
        height: 2px;
        background-color: rgba(113, 128, 150, 0.3);
        z-index: 1;
    }

    .step-number {
        background-color: var(--slate-gray);
        color: var(--white);
        width: 3rem;
        height: 3rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 0.5rem;
        font-weight: 600;
        position: relative;
        z-index: 2;
        font-size: 1.2rem;
    }

    .step-title {
        font-size: 0.9rem;
        color: var(--slate-gray);
    }

    .step-item.active .step-number {
        background-color: var(--primary-red);
    }

    .step-item.active .step-title {
        color: var(--primary-red);
        font-weight: 600;
    }

    .step-item.completed .step-number {
        background-color: var(--charcoal);
    }

    .progress-container {
        height: 4px;
        background-color: rgba(113, 128, 150, 0.2);
        border-radius: 2px;
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background-color: var(--primary-red);
        width: 0;
        transition: width 0.3s ease;
    }

    .input-group-text {
        background-color: var(--charcoal);
        color: var(--white);
        border-color: var(--charcoal);
    }

    .form-section-page {
        display: none;
        opacity: 0;
        transform: translateX(20px);
        transition: none;
    }

    .form-section-page.active {
        display: block;
        opacity: 1;
        transform: translateX(0);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

    .form-navigation-buttons {
        border-top: 1px solid rgba(113, 128, 150, 0.2);
        padding-top: 1.5rem;
        margin-top: 2rem;
    }

    .next-section, .prev-section {
        padding: 0.6rem 1.2rem;
        border-radius: var(--border-radius);
    }

    .next-section i, .prev-section i {
        margin: 0 0.5rem;
    }

    .next-section {
        background-color: var(--charcoal);
        color: var(--white);
        border-color: var(--charcoal);
    }

    .next-section:hover {
        background-color: rgba(45, 55, 72, 0.9);
        border-color: rgba(45, 55, 72, 0.9);
    }

    .prev-section {
        border-color: var(--slate-gray);
        color: var(--slate-gray);
    }

    .prev-section:hover {
        background-color: var(--slate-gray);
        color: var(--white);
    }

    /* Welcome page styling */
    .welcome-container {
        background: linear-gradient(135deg, var(--light-beige), var(--white));
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: 2rem;
    }

    .welcome-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: repeat(7, auto);
        gap: 1rem;
        max-width: 1200px;
        margin-bottom: 4rem;
    }

    .center-column {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }

    .loading-gear {
        animation: spin 10s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .enter-button {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        background-color: var(--primary-red);
        color: var(--white);
        padding: 1rem 2rem;
        font-size: 1.2rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        text-decoration: none;
        box-shadow: 0 4px 10px rgba(238, 49, 36, 0.3);
        transition: var(--transition);
        margin-top: 2rem;
        border: none;
    }

    .enter-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 14px rgba(238, 49, 36, 0.4);
        color: var(--white);
    }

    /* Alert styling */
    .alert-info {
        background-color: rgba(45, 55, 72, 0.1);
        color: var(--charcoal);
        border-color: rgba(45, 55, 72, 0.2);
    }

    /* Autofill button styling */
    #autofillBtn {
        background-color: var(--charcoal);
        border-color: var(--charcoal);
        color: var(--white);
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
        transition: var(--transition);
    }

    #autofillBtn:hover {
        background-color: rgba(45, 55, 72, 0.9);
    }

    footer {
        background-color: var(--charcoal) !important;
        color: var(--white) !important;
    }

    footer .text-muted {
        color: rgba(255, 255, 255, 0.7) !important;
    }

    @media (max-width: 768px) {
        .main-title {
            font-size: 1.5rem; /* Smaller on mobile */
        }

        .main-subtitle {
            font-size: 0.9rem; /* Smaller on mobile */
        }

        .card-body {
            padding: 1.5rem;
        }

        .step-number {
            width: 2.5rem;
            height: 2.5rem;
        }

        .step-title {
            font-size: 0.8rem;
        }

        .cv-preview {
            width: 90%;
        }

        /* Adjust banner images for mobile */
        .banner-image {
            width: 80px;
        }

        .banner-image.center {
            width: 100px;
        }

        .profile-photo-wrapper {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }

        .logo-badge {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }

        .title-logo {
            max-width: 55px; /* Smaller on mobile */
            max-height: 55px; /* Smaller on mobile */
        }

        .preview-profile-photo {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }
    }

    /* Icon styling */
    .fas, .far, .fab, .fa {
        margin-right: 0.5rem;
    }
</style>
==================================================

Fichier: src\Controller\CVGeneratorController.php
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\src\Controller\CVGeneratorController.php
-----
<?php
// Last updated: 2025-04-21 00:00:15
// Author: Mohamed-abidi-95

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\HeaderUtils;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Dompdf\Dompdf;
use Dompdf\Options;


class CVGeneratorController extends AbstractController
{
    /**
     * @Route("/", name="app_welcome")
     */
    public function welcome(): Response
    {
        return $this->render('cv_generator/welcome.html.twig');
    }

    /**
     * @Route("/cv", name="app_cv_generator")
     */
    public function index(): Response
    {
        // Sample data for autofill testing
        $sampleData = [
            'firstName' => 'John',
            'lastName' => 'Doe',
            'position' => 'Software Developer',
            'email' => 'john.doe@example.com',
            'phone' => '+216 12 345 678',
            'address' => '123 Main Street',
            'city' => 'Tunis',
            'country' => 'Tunisia',
            'github' => 'github.com/johndoe',
            'linkedin' => 'linkedin.com/in/johndoe',
            'education' => [
                [
                    'degree' => 'Bachelor of Science in Computer Science',
                    'institution' => 'ESPRIT Engineering School',
                    'location' => 'Tunis, Tunisia',
                    'startDate' => '09/2018',
                    'endDate' => '06/2022',
                    'description' => 'Graduated with honors. Specialized in software engineering and artificial intelligence.'
                ],
                [
                    'degree' => 'High School Diploma',
                    'institution' => 'International High School',
                    'location' => 'Tunis, Tunisia',
                    'startDate' => '09/2015',
                    'endDate' => '06/2018',
                    'description' => 'Science track with focus on mathematics and physics.'
                ]
            ],
            'experience' => [
                [
                    'position' => 'Software Engineer',
                    'company' => 'Tech Solutions Inc.',
                    'location' => 'Tunis, Tunisia',
                    'startDate' => '08/2022',
                    'endDate' => 'Present',
                    'description' => 'Developing full-stack web applications using React and Node.js. Working with Agile methodologies in a distributed team environment.'
                ],
                [
                    'position' => 'Web Development Intern',
                    'company' => 'StartUp Hub',
                    'location' => 'Tunis, Tunisia',
                    'startDate' => '06/2021',
                    'endDate' => '09/2021',
                    'description' => 'Assisted in the development of company website. Created responsive UI components and improved site performance.'
                ]
            ],
            'skills' => [
                'JavaScript', 'React.js', 'Node.js', 'HTML/CSS', 'PHP', 'MySQL',
                'Git', 'Agile Development', 'Problem Solving', 'Team Collaboration'
            ],
            'languages' => [
                'Arabic (Native)', 'French (Fluent)', 'English (Advanced)'
            ],
            'additionalInfo' => 'Passionate about building high-quality software solutions. Constantly learning new technologies and methodologies to improve my skills.'
        ];

        return $this->render('cv_generator/main.html.twig', [
            'currentStep' => 1,
            'sampleData' => $sampleData
        ]);
    }

    /**
     * @Route("/cv-generator/generate", name="cv_generate", methods={"POST"})
     */
    public function generate(Request $request): Response
    {
        // Set memory limit to handle larger PDFs
        ini_set('memory_limit', '512M'); // Increased memory limit
        ini_set('max_execution_time', 300); // 5 minutes timeout

        try {
            // Debug request data
            if ($request->query->has('debug_data')) {
                return new Response(
                    '<pre>' . print_r($request->request->all(), true) . '</pre>',
                    Response::HTTP_OK,
                    ['Content-Type' => 'text/html']
                );
            }

            // For template debugging
            if ($request->query->has('debug')) {
                // Basic form data
                $formData = [
                    'firstName' => 'Debug',
                    'lastName' => 'User',
                    'position' => 'Template Tester',
                    'email' => 'debug@example.com',
                    'phone' => '+123 456 789',
                    'address' => 'Debug Street',
                    'city' => 'Test City',
                    'country' => 'Debug Land',
                    'github' => 'github.com/debug',
                    'linkedin' => 'linkedin.com/in/debug',
                    'education' => [
                        [
                            'degree' => 'Debug Degree',
                            'institution' => 'Debug University',
                            'location' => 'Debug City',
                            'startDate' => '01/2020',
                            'endDate' => '12/2024',
                            'description' => 'This is a debug description for testing the template rendering.'
                        ]
                    ],
                    'experience' => [
                        [
                            'position' => 'Debug Engineer',
                            'company' => 'Debug Corp',
                            'location' => 'Debug HQ',
                            'startDate' => '01/2022',
                            'endDate' => 'Present',
                            'description' => 'Working on debugging PDF generation issues.'
                        ]
                    ],
                    'skills' => ['Debugging', 'Testing', 'PDF Generation', 'Problem Solving'],
                    'languages' => ['Debug (Native)', 'Test (Fluent)'],
                    'additionalInfo' => 'This is template debugging mode.'
                ];

                // Choose template
                $templateType = $request->request->get('template', 'green');
                $templateName = ($templateType === 'blue') ? 'cv_template_blue.html.twig' : 'cv_template_green.html.twig';

                // Render HTML for debugging
                $html = $this->renderView('cv_generator/' . $templateName, [
                    'data' => $formData,
                    'photoData' => '',
                    'generatedDate' => new \DateTime()
                ]);

                return new Response($html, Response::HTTP_OK, ['Content-Type' => 'text/html']);
            }

            // Initialize form data with defaults
            $formData = [
                'firstName' => $request->request->get('firstName', 'Default User'),
                'lastName' => $request->request->get('lastName', ''),
                'position' => $request->request->get('position', 'Professional'),
                'email' => $request->request->get('email', 'example@email.com'),
                'phone' => $request->request->get('phone', ''),
                'address' => $request->request->get('address', ''),
                'city' => $request->request->get('city', ''),
                'country' => $request->request->get('country', ''),
                'github' => $request->request->get('github', ''),
                'linkedin' => $request->request->get('linkedin', ''),
                'additionalInfo' => $request->request->get('additionalInfo', ''),
                'education' => [],
                'experience' => [],
                'skills' => [],
                'languages' => []
            ];

            // Process education - format is education[degree][], education[institution][], etc.
            $educationData = [];

            // Check if education data exists in the form
            $educationKeys = ['degree', 'institution', 'location', 'startDate', 'endDate', 'description'];
            $hasEducationData = false;

            foreach ($educationKeys as $key) {
                $fieldName = 'education[' . $key . ']';
                if ($request->request->has($fieldName)) {
                    $hasEducationData = true;
                    $educationData[$key] = $request->request->all()[$fieldName];
                }
            }

            // If we have education data, organize it into entries
            if ($hasEducationData && isset($educationData['degree'])) {
                $count = count($educationData['degree']);
                for ($i = 0; $i < $count; $i++) {
                    $entry = [];
                    foreach ($educationKeys as $key) {
                        $entry[$key] = isset($educationData[$key][$i]) ? $educationData[$key][$i] : '';
                    }
                    $formData['education'][] = $entry;
                }
            }

            // Process experience - format is experience[position][], experience[company][], etc.
            $experienceData = [];

            // Check if experience data exists in the form
            $experienceKeys = ['position', 'company', 'location', 'startDate', 'endDate', 'description'];
            $hasExperienceData = false;

            foreach ($experienceKeys as $key) {
                $fieldName = 'experience[' . $key . ']';
                if ($request->request->has($fieldName)) {
                    $hasExperienceData = true;
                    $experienceData[$key] = $request->request->all()[$fieldName];
                }
            }

            // If we have experience data, organize it into entries
            if ($hasExperienceData && isset($experienceData['position'])) {
                $count = count($experienceData['position']);
                for ($i = 0; $i < $count; $i++) {
                    $entry = [];
                    foreach ($experienceKeys as $key) {
                        $entry[$key] = isset($experienceData[$key][$i]) ? $experienceData[$key][$i] : '';
                    }
                    $formData['experience'][] = $entry;
                }
            }

            // Process skills (simple array format)
            if ($request->request->has('skills')) {
                $formData['skills'] = $request->request->all()['skills'] ?? [];
            }

            // Process languages (simple array format)
            if ($request->request->has('languages')) {
                $formData['languages'] = $request->request->all()['languages'] ?? [];
            }

            // For demo data - use this when it's John Doe data from autofill
            if (empty($formData['education']) && $formData['firstName'] === 'John' && $formData['lastName'] === 'Doe') {
                // Set John Doe's sample data
                $formData['education'] = [
                    [
                        'degree' => 'Bachelor of Science in Computer Science',
                        'institution' => 'ESPRIT Engineering School',
                        'location' => 'Tunis, Tunisia',
                        'startDate' => '09/2018',
                        'endDate' => '06/2022',
                        'description' => 'Graduated with honors. Specialized in software engineering and artificial intelligence.'
                    ],
                    [
                        'degree' => 'High School Diploma',
                        'institution' => 'International High School',
                        'location' => 'Tunis, Tunisia',
                        'startDate' => '09/2015',
                        'endDate' => '06/2018',
                        'description' => 'Science track with focus on mathematics and physics.'
                    ]
                ];

                $formData['experience'] = [
                    [
                        'position' => 'Software Engineer',
                        'company' => 'Tech Solutions Inc.',
                        'location' => 'Tunis, Tunisia',
                        'startDate' => '08/2022',
                        'endDate' => 'Present',
                        'description' => 'Developing full-stack web applications using React and Node.js. Working with Agile methodologies in a distributed team environment.'
                    ],
                    [
                        'position' => 'Web Development Intern',
                        'company' => 'StartUp Hub',
                        'location' => 'Tunis, Tunisia',
                        'startDate' => '06/2021',
                        'endDate' => '09/2021',
                        'description' => 'Assisted in the development of company website. Created responsive UI components and improved site performance.'
                    ]
                ];

                $formData['skills'] = ['JavaScript', 'React.js', 'Node.js', 'HTML/CSS', 'PHP', 'MySQL', 'Git', 'Agile Development', 'Problem Solving', 'Team Collaboration'];
                $formData['languages'] = ['Arabic (Native)', 'French (Fluent)', 'English (Advanced)'];
            }

            // Special case: Simple test
            if ($request->request->get('simpleTest') === 'true' ||
                ($formData['firstName'] === 'Test' && $formData['lastName'] === 'User')) {

                $html = '<!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <title>Test CV</title>
                    <style>
                        body { 
                            font-family: Arial, sans-serif; 
                            margin: 40px; 
                            color: #333;
                        }
                        h1 { 
                            color: #27ae60; 
                            text-align: center;
                            border-bottom: 2px solid #27ae60;
                            padding-bottom: 10px;
                        }
                        h2 {
                            color: #27ae60;
                            margin-top: 20px;
                        }
                        .header {
                            text-align: center;
                            margin-bottom: 30px;
                        }
                        .section {
                            margin-bottom: 25px;
                        }
                        .footer {
                            margin-top: 50px;
                            text-align: center;
                            font-size: 12px;
                            color: #777;
                            border-top: 1px solid #ddd;
                            padding-top: 20px;
                        }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>Test CV Generation</h1>
                        <p><strong>Name:</strong> Test User</p>
                        <p><strong>Email:</strong> test@example.com</p>
                        <p><strong>Position:</strong> Test Position</p>
                    </div>
                    
                    <div class="section">
                        <h2>About This PDF</h2>
                        <p>This is a test PDF to confirm that CV generation is working properly.</p>
                        <p>If you can see this document, it means:</p>
                        <ul>
                            <li>The PDF generation system is functional</li>
                            <li>The browser can download PDFs generated by the server</li>
                            <li>The form submission is working correctly</li>
                        </ul>
                    </div>
                    
                    <div class="section">
                        <h2>Next Steps</h2>
                        <p>Now that you\'ve confirmed the system works, you can:</p>
                        <ul>
                            <li>Fill out the complete CV form</li>
                            <li>Upload a profile photo</li>
                            <li>Generate your actual CV</li>
                        </ul>
                    </div>
                    
                    <div class="footer">
                        <p>Generated on: ' . (new \DateTime())->format('Y-m-d H:i:s') . '</p>
                        <p>ESPRIT CV Generator - Test Document</p>
                    </div>
                </body>
                </html>';

                // Configure Dompdf
                $options = new Options();
                $options->set('isHtml5ParserEnabled', true);
                $options->set('defaultFont', 'DejaVu Sans');

                $dompdf = new Dompdf($options);
                $dompdf->loadHtml($html);
                $dompdf->setPaper('A4');
                $dompdf->render();

                // Return PDF for download with proper disposition
                $response = new Response($dompdf->output());
                $disposition = HeaderUtils::makeDisposition(
                    HeaderUtils::DISPOSITION_ATTACHMENT,
                    'test-cv-' . (new \DateTime())->format('Y-m-d-His') . '.pdf'
                );

                $response->headers->set('Content-Type', 'application/pdf');
                $response->headers->set('Content-Disposition', $disposition);

                return $response;
            }

            // Get template selection
            $templateType = $request->request->get('template', 'green');

            // Get photo data
            $photoData = $request->request->get('photoData', '');

            // Choose template based on selection
            $templateName = 'cv_template_green.html.twig';
            if ($templateType === 'blue') {
                $templateName = 'cv_template_blue.html.twig';
            }

            // Render HTML
            $html = $this->renderView('cv_generator/' . $templateName, [
                'data' => $formData,
                'photoData' => $photoData,
                'generatedDate' => new \DateTime()
            ]);

            // Configure Dompdf with more memory
            $options = new Options();
            $options->set('isHtml5ParserEnabled', true);
            $options->set('isRemoteEnabled', true);
            $options->set('defaultFont', 'DejaVu Sans');
            $options->set('chroot', $this->getParameter('kernel.project_dir') . '/public');
            $options->setIsRemoteEnabled(true);

            // Create Dompdf instance and render PDF
            $dompdf = new Dompdf($options);
            $dompdf->loadHtml($html);
            $dompdf->setPaper('A4');
            $dompdf->render();

            // Generate filename
            $filename = sprintf('%s-%s-CV-%s.pdf',
                !empty($formData['firstName']) ? $formData['firstName'] : 'CV',
                !empty($formData['lastName']) ? $formData['lastName'] : 'Document',
                (new \DateTime())->format('Y-m-d')
            );

            // Clean the filename
            $filename = preg_replace('/[^a-zA-Z0-9-_\.]/i', '_', $filename);

            // Return PDF for download with proper disposition
            $response = new Response($dompdf->output());
            $disposition = HeaderUtils::makeDisposition(
                HeaderUtils::DISPOSITION_ATTACHMENT,
                $filename
            );

            $response->headers->set('Content-Type', 'application/pdf');
            $response->headers->set('Content-Disposition', $disposition);

            return $response;
        } catch (\Exception $e) {
            // Return error information
            return new Response(
                '<html>
                <head>
                    <title>PDF Generation Error</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; }
                        h1 { color: #dc3545; }
                        .error-box { background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; margin: 20px 0; }
                        .trace { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow: auto; max-height: 500px; }
                        .back-link { display: inline-block; margin-top: 20px; background: #007bff; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; }
                    </style>
                </head>
                <body>
                    <h1>Error Generating PDF</h1>
                    <div class="error-box">
                        <p><strong>Error Message:</strong> ' . htmlspecialchars($e->getMessage()) . '</p>
                        <p><strong>File:</strong> ' . htmlspecialchars($e->getFile()) . ' (Line: ' . $e->getLine() . ')</p>
                    </div>
                    
                    <h2>Error Trace:</h2>
                    <div class="trace">
                        <pre>' . htmlspecialchars($e->getTraceAsString()) . '</pre>
                    </div>
                    
                    <h2>Request Data:</h2>
                    <div class="trace">
                        <pre>' . htmlspecialchars(print_r($request->request->all(), true)) . '</pre>
                    </div>
                    
                    <a href="/cv" class="back-link">Back to CV Generator</a>
                </body>
                </html>',
                Response::HTTP_INTERNAL_SERVER_ERROR,
                ['Content-Type' => 'text/html']
            );
        }
    }

    /**
     * @Route("/cv-generator/test-pdf", name="test_pdf")
     */
    public function testPdf(): Response
    {
        try {
            // Simple content for testing
            $html = '
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>Test PDF</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    h1 { color: #27ae60; }
                </style>
            </head>
            <body>
                <h1>Test PDF Generation</h1>
                <p>This is a test PDF generated with Dompdf.</p>
                <p>If you can see this document, PDF generation is working correctly.</p>
                <p>Current time: ' . (new \DateTime())->format('Y-m-d H:i:s') . '</p>
                <p>This confirms that your server can generate PDFs.</p>
            </body>
            </html>';

            // Configure Dompdf
            $options = new Options();
            $options->set('isHtml5ParserEnabled', true);
            $options->set('defaultFont', 'DejaVu Sans');

            $dompdf = new Dompdf($options);
            $dompdf->loadHtml($html);
            $dompdf->setPaper('A4');
            $dompdf->render();

            // Return PDF with inline disposition
            $response = new Response($dompdf->output());
            $disposition = HeaderUtils::makeDisposition(
                HeaderUtils::DISPOSITION_INLINE,
                'test.pdf'
            );

            $response->headers->set('Content-Type', 'application/pdf');
            $response->headers->set('Content-Disposition', $disposition);

            return $response;
        } catch (\Exception $e) {
            return new Response(
                '<html>
                <head>
                    <title>Test PDF Error</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        h1 { color: red; }
                        pre { background: #f5f5f5; padding: 10px; border-radius: 5px; }
                    </style>
                </head>
                <body>
                    <h1>Error in Test PDF</h1>
                    <p>' . htmlspecialchars($e->getMessage()) . '</p>
                    <pre>' . htmlspecialchars($e->getTraceAsString()) . '</pre>
                    <p>Common issues:</p>
                    <ul>
                        <li>Dompdf package is not installed (run: composer require dompdf/dompdf)</li>
                        <li>PHP memory limit is too low</li>
                        <li>PHP extension issue (gd, mbstring required)</li>
                    </ul>
                </body>
                </html>',
                Response::HTTP_INTERNAL_SERVER_ERROR,
                ['Content-Type' => 'text/html']
            );
        }
    }

    /**
     * @Route("/cv-generator/debug-form", name="debug_form", methods={"POST"})
     */
    public function debugForm(Request $request): Response
    {
        try {
            $data = [
                'request_data' => $request->request->all(),
                'files_data' => $request->files->all(),
                'server_data' => [
                    'method' => $request->getMethod(),
                    'content_type' => $request->headers->get('Content-Type'),
                    'request_uri' => $request->getRequestUri()
                ]
            ];

            return new Response(
                '<html>
                <head>
                    <title>Form Debug Data</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #333; }
                        pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow: auto; }
                    </style>
                </head>
                <body>
                    <h1>Form Debug Data</h1>
                    <pre>' . print_r($data, true) . '</pre>
                    <a href="/cv" style="display:inline-block; margin-top:20px; text-decoration:none; padding:10px 15px; background:#007bff; color:white; border-radius:5px;">Back to CV Generator</a>
                </body>
                </html>',
                Response::HTTP_OK,
                ['Content-Type' => 'text/html']
            );
        } catch (\Exception $e) {
            return new Response('Error: ' . $e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
==================================================

Fichier: config\packages\asset_mapper.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\asset_mapper.yaml
-----
framework:
    asset_mapper:
        # The paths to make available to the asset mapper.
        paths:
            - assets/
        missing_import_mode: strict

when@prod:
    framework:
        asset_mapper:
            missing_import_mode: warn

==================================================

Fichier: config\packages\cache.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\cache.yaml
-----
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

==================================================

Fichier: config\packages\csrf.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\csrf.yaml
-----
# Enable stateless CSRF protection for forms and logins/logouts
framework:
    form:
        csrf_protection:
            token_id: submit

    csrf_protection:
        stateless_token_ids:
            - submit
            - authenticate
            - logout

==================================================

Fichier: config\packages\debug.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\debug.yaml
-----
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

==================================================

Fichier: config\packages\doctrine.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\doctrine.yaml
-----
doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'

        profiling_collect_backtrace: '%kernel.debug%'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        identity_generation_preferences:
            Doctrine\DBAL\Platforms\PostgreSQLPlatform: identity
        auto_mapping: true
        mappings:
            App:
                type: attribute
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App
        controller_resolver:
            auto_mapping: false

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system

==================================================

Fichier: config\packages\doctrine_migrations.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\doctrine_migrations.yaml
-----
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false

==================================================

Fichier: config\packages\framework.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\framework.yaml
-----
# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true
    http_method_override: false
    handle_all_throwables: true

    # Enables session support. Note that the session will ONLY be started if you read or write from it.
    # Remove or comment this section to explicitly disable session support.
    session:
        handler_id: null
        cookie_secure: auto
        cookie_samesite: lax
        storage_factory_id: session.storage.factory.native

    #esi: true
    #fragments: true
    php_errors:
        log: true # You might configure timezone here if needed for logs, e.g., log: E_ALL & ~E_USER_DEPRECATED & ~E_DEPRECATED & ~E_STRICT

    # Timezone and locale settings
    default_locale: 'en'
    # timezone: 'UTC' # <-- REMOVED THIS LINE (set in php.ini)

    # Asset configuration
    assets:
    # Default path strategy is usually sufficient if assets are in public/
    # You might need 'version_strategy' or 'json_manifest_path' depending on your setup (e.g., using Webpack Encore)
    # If you are NOT using Webpack Encore or similar, this minimal config is often fine.
    # Removed the packages section below as it's not needed for assets in public/
    # packages:
    #     images:
    #         base_urls:
    #             - '/images'
    #     css:
    #         base_urls:
    #             - '/css'
    #     js:
    #         base_urls:
    #             - '/js'

    # Router configuration
    router:
        utf8: true
        # If using attributes for routes (recommended), remove route_class if present
        # route_class: Symfony\Component\Routing\Route # Example, might not be needed

    # Validation configuration
    validation:
        enabled: true
        enable_attributes: true
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

    # Cache configuration
    cache:
        app: cache.adapter.filesystem
        system: cache.adapter.system
        directory: '%kernel.cache_dir%/pools'

    # Form configuration
    form:
        enabled: true

    # Mailer configuration (if needed)
    mailer:
        enabled: true
        dsn: '%env(MAILER_DSN)%'

    # Notifier configuration (if needed)
    notifier:
        enabled: true
        chatter_transports: []
        texter_transports: []

    # HTTP Client configuration (if needed)
    http_client:
        default_options:
            max_redirects: 5

    # Error handler configuration
    error_controller: null # Keep this as null unless you have a specific error controller

    # Trusted configuration
    trusted_proxies: null
    trusted_headers: ['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']
    trusted_hosts: null

    # Web link configuration
    web_link:
        enabled: true

# REMOVED framework_extra section - belongs in config/packages/sensio_framework_extra.yaml if used
# REMOVED templating section - belongs in config/packages/twig.yaml
# REMOVED parameters section - belongs in config/services.yaml

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file
        profiler:
            collect: false
        validation:
            not_compromised_password: false

when@dev:
    framework:
        profiler:
            only_exceptions: false
==================================================

Fichier: config\packages\mailer.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\mailer.yaml
-----
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

==================================================

Fichier: config\packages\messenger.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\messenger.yaml
-----
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    use_notify: true
                    check_delayed_interval: 60000
                retry_strategy:
                    max_retries: 3
                    multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        default_bus: messenger.bus.default

        buses:
            messenger.bus.default: []

        routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            Symfony\Component\Notifier\Message\ChatMessage: async
            Symfony\Component\Notifier\Message\SmsMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async

==================================================

Fichier: config\packages\monolog.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\monolog.yaml
-----
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json

==================================================

Fichier: config\packages\notifier.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\notifier.yaml
-----
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }

==================================================

Fichier: config\packages\routing.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\routing.yaml
-----
framework:
    router:
        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null

==================================================

Fichier: config\packages\security.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\security.yaml
-----
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

==================================================

Fichier: config\packages\translation.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\translation.yaml
-----
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:

==================================================

Fichier: config\packages\twig.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\twig.yaml
-----
# Current Date and Time: 2025-04-20 22:01:45
# User: Mohamed-abidi-95ok

twig:
    default_path: '%kernel.project_dir%/Templates'
    paths:
        '%kernel.project_dir%/Templates': 'templates'
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    exception_controller: null
    form_themes: ['bootstrap_5_layout.html.twig']
==================================================

Fichier: config\packages\validator.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\validator.yaml
-----
framework:
    validation:
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false

==================================================

Fichier: config\packages\web_profiler.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\web_profiler.yaml
-----
when@dev:
    web_profiler:
        toolbar: true

    framework:
        profiler:
            collect_serializer_data: true

when@test:
    framework:
        profiler: { collect: false }

==================================================

