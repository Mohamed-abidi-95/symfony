Fichier: assets\styles\app.css
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\assets\styles\app.css
-----
body {
    background-color: skyblue;
}

==================================================

Fichier: Templates\base.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\base.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}ESPRIT CV Generator{% endblock %}</title>

    {% block stylesheets %}
        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        {{ include('partials/_styles.html.twig') }}
    {% endblock %}
</head>
<body>
{% block header %}
    {{ include('partials/_header.html.twig') }}
{% endblock %}

{% block body %}{% endblock %}

{% block footer %}
    <footer class="footer mt-auto py-3 bg-light">
        <div class="container text-center">
            <small class="text-muted">
                ESPRIT CV Generator | Made with <i class="fas fa-heart text-danger"></i> by ESPRIT
            </small>
        </div>
    </footer>
{% endblock %}

{% block javascripts %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
{% endblock %}
</body>
</html>
==================================================

Fichier: Templates\cv_generator\cv_template.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        body {
            font-family: 'DejaVu Sans', Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .photo {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            overflow: hidden;
            margin: 0 auto 20px;
        }

        .photo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        h1 {
            font-size: 24px;
            margin: 0 0 5px;
            color: #ee3124;
        }

        .contact-info {
            font-size: 14px;
            margin-bottom: 10px;
        }

        .section {
            margin-bottom: 25px;
        }

        h2 {
            font-size: 18px;
            color: #ee3124;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            margin-bottom: 15px;
        }

        .entry {
            margin-bottom: 15px;
        }

        .entry-title {
            font-weight: bold;
            margin-bottom: 3px;
        }

        .entry-subtitle {
            font-style: italic;
            margin-bottom: 3px;
        }

        .entry-period {
            font-size: 13px;
            color: #666;
            margin-bottom: 5px;
        }

        .skills-list {
            display: flex;
            flex-wrap: wrap;
        }

        .skill-item {
            background-color: #f5f5f5;
            padding: 5px 10px;
            margin-right: 8px;
            margin-bottom: 8px;
            border-radius: 3px;
            font-size: 13px;
        }

        .footer {
            text-align: center;
            margin-top: 40px;
            font-size: 12px;
            color: #999;
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        {% if photoData is defined and photoData %}
            <div class="photo">
                <img src="{{ photoData }}" alt="Profile Photo">
            </div>
        {% endif %}

        <h1>{{ data.firstName }} {{ data.lastName }}</h1>

        <div class="contact-info">
            {% if data.email %}
                {{ data.email }}{% if data.phone %} | {% endif %}
            {% endif %}

            {% if data.phone %}
                {{ data.phone }}
            {% endif %}
        </div>

        {% if data.address or data.city or data.country %}
            <div class="contact-info">
                {{ [data.address, data.city, data.country]|filter(v => v is not empty)|join(', ') }}
            </div>
        {% endif %}
    </div>

    {% if data.education is defined and data.education|length > 0 %}
        <div class="section">
            <h2>Education</h2>

            {% for education in data.education %}
                <div class="entry">
                    <div class="entry-title">{{ education.degree }}</div>
                    <div class="entry-subtitle">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                    <div class="entry-period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                    {% if education.description %}
                        <div>{{ education.description }}</div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% endif %}

    {% if data.experience is defined and data.experience|length > 0 %}
        <div class="section">
            <h2>Professional Experience</h2>

            {% for experience in data.experience %}
                <div class="entry">
                    <div class="entry-title">{{ experience.position }}</div>
                    <div class="entry-subtitle">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                    <div class="entry-period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                    {% if experience.description %}
                        <div>{{ experience.description }}</div>
                    {% endif %}
                </div>
            {% endfor %}
        </div>
    {% endif %}

    {% if data.skills is defined and data.skills|length > 0 %}
        <div class="section">
            <h2>Skills</h2>

            <div class="skills-list">
                {% for skill in data.skills %}
                    <div class="skill-item">{{ skill }}</div>
                {% endfor %}
            </div>
        </div>
    {% endif %}

    {% if data.additionalInfo %}
        <div class="section">
            <h2>Additional Information</h2>

            <div>{{ data.additionalInfo }}</div>
        </div>
    {% endif %}

    <div class="footer">
        <p>CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator</p>
    </div>
</div>
</body>
</html>
==================================================

Fichier: Templates\cv_generator\cv_template_blue.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template_blue.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        :root {
            --primary: #3498db;
            --secondary: #2c3e50;
            --accent: #1abc9c;
            --dark: #212529;
            --light: #f8f9fa;
            --gray: #6c757d;
            --border: #dee2e6;
            --white: #ffffff;
        }

        body {
            font-family: 'DejaVu Sans', sans-serif;
            color: var(--dark);
            background-color: var(--light);
            line-height: 1.7;
            margin: 0;
            padding: 0;
        }

        .cv-container {
            max-width: 1140px;
            margin: 0 auto;
            overflow: hidden;
            background-color: var(--white);
            border-radius: 8px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.08);
        }

        header {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            padding: 60px 40px;
            color: var(--white);
            position: relative;
            overflow: hidden;
        }

        header::before {
            content: '';
            position: absolute;
            right: -100px;
            top: -100px;
            width: 400px;
            height: 400px;
            background: rgba(255,255,255,0.05);
            border-radius: 50%;
        }

        header::after {
            content: '';
            position: absolute;
            left: -50px;
            bottom: -100px;
            width: 250px;
            height: 250px;
            background: rgba(255,255,255,0.05);
            border-radius: 50%;
        }

        .profile-title {
            position: relative;
            z-index: 1;
        }

        .name {
            font-size: 36px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .position {
            font-size: 22px;
            opacity: 0.9;
            font-weight: 300;
            margin-bottom: 25px;
        }

        .contact-list {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-top: 30px;
        }

        .contact-item {
            display: flex;
            align-items: center;
            background-color: rgba(255,255,255,0.1);
            padding: 8px 15px;
            border-radius: 30px;
        }

        .contact-icon {
            margin-right: 10px;
            font-weight: bold;
        }

        main {
            padding: 40px;
        }

        .section {
            margin-bottom: 50px;
        }

        .section:last-child {
            margin-bottom: 0;
        }

        .section-title {
            color: var(--primary);
            font-weight: 600;
            font-size: 24px;
            margin-bottom: 30px;
            position: relative;
            display: inline-block;
        }

        .section-title::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: -10px;
            width: 50%;
            height: 4px;
            background-color: var(--accent);
            border-radius: 2px;
        }

        .about-text {
            font-size: 16px;
            line-height: 1.8;
        }

        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 0;
            top: 8px;
            height: calc(100% - 8px);
            width: 2px;
            background-color: var(--primary);
        }

        .timeline-item {
            position: relative;
            padding-bottom: 40px;
        }

        .timeline-item:last-child {
            padding-bottom: 0;
        }

        .timeline-dot {
            position: absolute;
            left: -30px;
            top: 8px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background-color: var(--white);
            border: 3px solid var(--primary);
        }

        .timeline-title {
            font-weight: 600;
            font-size: 18px;
            color: var(--dark);
            margin-bottom: 5px;
            display: flex;
            align-items: center;
        }

        .timeline-company {
            font-weight: 500;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .timeline-period {
            color: var(--gray);
            font-size: 14px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
        }

        .skills-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .skill-tag {
            background-color: rgba(52, 152, 219, 0.1);
            color: var(--primary);
            border-radius: 30px;
            padding: 8px 16px;
            font-size: 14px;
            font-weight: 500;
        }

        .language-item {
            margin-bottom: 15px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
        }

        .col-8 {
            width: 70%;
        }

        .col-4 {
            width: 30%;
        }

        .profile-img {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255,255,255,0.2);
            margin-left: auto;
        }

        ul {
            padding-left: 20px;
        }

        @media print {
            body {
                background-color: white;
                color: black;
            }

            .cv-container {
                box-shadow: none;
                margin: 0;
                max-width: none;
            }
        }
    </style>
</head>
<body>
<div class="cv-container">
    <!-- Header Section -->
    <header>
        <div class="row">
            <div class="col-8 profile-title">
                <h1 class="name">{{ data.firstName }} {{ data.lastName }}</h1>
                <div class="position">{{ data.position }}</div>
                {% if data.additionalInfo %}
                    <p>{{ data.additionalInfo }}</p>
                {% endif %}

                <div class="contact-list">
                    {% if data.email %}
                        <div class="contact-item">
                            <span class="contact-icon">@</span>
                            <span>{{ data.email }}</span>
                        </div>
                    {% endif %}

                    {% if data.phone %}
                        <div class="contact-item">
                            <span class="contact-icon">☏</span>
                            <span>{{ data.phone }}</span>
                        </div>
                    {% endif %}

                    {% if data.address or data.city or data.country %}
                        <div class="contact-item">
                            <span class="contact-icon">⌂</span>
                            <span>{{ [data.city, data.country]|filter(v => v is not empty)|join(', ') }}</span>
                        </div>
                    {% endif %}

                    {% if data.github %}
                        <div class="contact-item">
                            <span class="contact-icon">GH</span>
                            <span>{{ data.github }}</span>
                        </div>
                    {% endif %}
                </div>
            </div>
            <div class="col-4" style="text-align: right;">
                {% if photoData is defined and photoData %}
                    <img src="{{ photoData|raw }}" alt="Profile Image" class="profile-img">
                {% endif %}
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <!-- Experience -->
        {% if data.experience is defined and data.experience|length > 0 %}
            <section class="section">
                <h2 class="section-title">Experience</h2>

                <div class="timeline">
                    {% for experience in data.experience %}
                        <div class="timeline-item">
                            <div class="timeline-dot"></div>
                            <div class="timeline-title">{{ experience.position }}</div>
                            <div class="timeline-company">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                            <div class="timeline-period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                            {% if experience.description %}
                                <p>{{ experience.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Education -->
        {% if data.education is defined and data.education|length > 0 %}
            <section class="section">
                <h2 class="section-title">Education</h2>

                <div class="timeline">
                    {% for education in data.education %}
                        <div class="timeline-item">
                            <div class="timeline-dot"></div>
                            <div class="timeline-title">{{ education.degree }}</div>
                            <div class="timeline-company">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                            <div class="timeline-period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                            {% if education.description %}
                                <p>{{ education.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Skills -->
        {% if data.skills is defined and data.skills|length > 0 %}
            <section class="section">
                <h2 class="section-title">Skills</h2>

                <div class="skills-grid">
                    {% for skill in data.skills %}
                        <span class="skill-tag">{{ skill }}</span>
                    {% endfor %}
                </div>
            </section>
        {% endif %}

        <!-- Languages -->
        {% if data.languages is defined and data.languages|length > 0 %}
            <section class="section">
                <h2 class="section-title">Languages</h2>

                {% for language in data.languages %}
                    <div class="language-item">
                        <strong>{{ language }}</strong>
                    </div>
                {% endfor %}
            </section>
        {% endif %}

        <div style="text-align: center; margin-top: 50px; font-size: 12px; color: #777;">
            CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator
        </div>
    </main>
</div>
{% if app is defined and app.debug is defined and app.debug %}
    <div style="background: #f5f5f5; border: 1px solid #ddd; padding: 20px; margin-top: 30px; font-family: monospace;">
        <h2>Debug Data</h2>
        <pre>{{ dump(data) }}</pre>
    </div>
{% endif %}
</body>

</html>
==================================================

Fichier: Templates\cv_generator\cv_template_green.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\cv_template_green.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ data.firstName }} {{ data.lastName }} - CV</title>
    <style>
        :root {
            --primary: #27ae60;
            --secondary: #2c3e50;
            --light: #f8f9fa;
            --dark: #343a40;
            --text: #495057;
            --border: #dee2e6;
            --white: #ffffff;
        }

        body {
            font-family: 'DejaVu Sans', 'Segoe UI', Roboto, sans-serif;
            color: var(--text);
            background-color: var(--light);
            line-height: 1.6;
            margin: 0;
            padding: 0;
        }

        .cv-container {
            max-width: 1140px;
            margin: 0 auto;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            border-radius: 8px;
            overflow: hidden;
            background-color: var(--white);
        }

        .sidebar {
            background-color: var(--secondary);
            color: var(--white);
            padding: 40px;
            height: 100%;
        }

        .main-content {
            padding: 40px;
        }

        .profile-img {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255,255,255,0.2);
            margin: 0 auto 20px;
            display: block;
        }

        .name {
            font-size: 32px;
            font-weight: 700;
            margin-top: 20px;
            margin-bottom: 5px;
            color: var(--dark);
            text-align: center;
        }

        .position {
            font-size: 20px;
            opacity: 0.8;
            margin-bottom: 25px;
            font-weight: 500;
            text-align: center;
        }

        .contact-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .contact-icon {
            width: 36px;
            height: 36px;
            background-color: rgba(255,255,255,0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-weight: bold;
        }

        .section-title {
            color: var(--primary);
            font-weight: 700;
            font-size: 24px;
            margin-bottom: 25px;
            position: relative;
            padding-bottom: 10px;
        }

        .section-title::after {
            content: '';
            position: absolute;
            left: 0;
            bottom: 0;
            width: 40px;
            height: 3px;
            background-color: var(--primary);
        }

        .experience-item, .education-item {
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .experience-item:last-child, .education-item:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .job-title, .degree {
            font-weight: 600;
            font-size: 18px;
            color: var(--dark);
            margin-bottom: 5px;
        }

        .company, .university {
            font-weight: 500;
            margin-bottom: 5px;
        }

        .period {
            color: var(--primary);
            font-size: 14px;
            margin-bottom: 10px;
            display: inline-block;
        }

        .skill-progress {
            height: 6px;
            background-color: rgba(39, 174, 96, 0.2);
            border-radius: 3px;
            margin-bottom: 25px;
            position: relative;
        }

        .skill-progress-bar {
            height: 100%;
            background-color: var(--primary);
            border-radius: 3px;
            position: absolute;
            top: 0;
            left: 0;
        }

        .skill-title {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .skill-name {
            color: var(--dark);
        }

        .skill-percentage {
            color: var(--primary);
        }

        .language-item {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .language-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: var(--primary);
            margin-right: 10px;
        }

        .sidebar-section {
            margin-bottom: 40px;
        }

        .sidebar-title {
            font-size: 20px;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 20px;
            font-weight: 600;
            color: var(--white);
        }

        .tag {
            display: inline-block;
            background-color: rgba(39, 174, 96, 0.1);
            color: var(--secondary);
            border-radius: 4px;
            padding: 5px 10px;
            margin-right: 8px;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
        }

        .col-4 {
            width: 33.333333%;
        }

        .col-8 {
            width: 66.666667%;
        }

        ul {
            padding-left: 20px;
        }

        @media print {
            body {
                background-color: white;
                color: black;
            }

            .cv-container {
                box-shadow: none;
                margin: 0;
                max-width: none;
            }
        }
    </style>
</head>
<body>
<div class="cv-container">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-4 sidebar">
            <div style="text-align: center; margin-bottom: 40px;">
                {% if photoData is defined and photoData %}
                    <img src="{{ photoData|raw }}" alt="Profile Image" class="profile-img">
                {% endif %}
                <h1 class="name" style="color: white;">{{ data.firstName }} {{ data.lastName }}</h1>
                <div class="position" style="color: rgba(255, 255, 255, 0.8);">{{ data.position }}</div>
            </div>

            <div class="sidebar-section">
                <h3 class="sidebar-title">Contact</h3>
                {% if data.email %}
                    <div class="contact-item">
                        <div class="contact-icon">@</div>
                        <div>{{ data.email }}</div>
                    </div>
                {% endif %}

                {% if data.phone %}
                    <div class="contact-item">
                        <div class="contact-icon">☏</div>
                        <div>{{ data.phone }}</div>
                    </div>
                {% endif %}

                {% if data.address or data.city or data.country %}
                    <div class="contact-item">
                        <div class="contact-icon">⌂</div>
                        <div>{{ [data.address, data.city, data.country]|filter(v => v is not empty)|join(', ') }}</div>
                    </div>
                {% endif %}

                {% if data.github %}
                    <div class="contact-item">
                        <div class="contact-icon">GH</div>
                        <div>{{ data.github }}</div>
                    </div>
                {% endif %}

                {% if data.linkedin %}
                    <div class="contact-item">
                        <div class="contact-icon">in</div>
                        <div>{{ data.linkedin }}</div>
                    </div>
                {% endif %}
            </div>

            {% if data.skills is defined and data.skills|length > 0 %}
                <div class="sidebar-section">
                    <h3 class="sidebar-title">Skills</h3>
                    {% for skill in data.skills %}
                        <div class="skill-item">
                            <div class="skill-title">
                                <span class="skill-name">{{ skill }}</span>
                            </div>
                            <div class="skill-progress">
                                <div class="skill-progress-bar" style="width: 85%"></div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}

            {% if data.languages is defined and data.languages|length > 0 %}
                <div class="sidebar-section">
                    <h3 class="sidebar-title">Languages</h3>
                    {% for language in data.languages %}
                        <div class="language-item">
                            <div class="language-dot"></div>
                            <div>{{ language }}</div>
                        </div>
                    {% endfor %}
                </div>
            {% endif %}
        </div>

        <!-- Main Content -->
        <div class="col-8 main-content">
            {% if data.additionalInfo %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">About Me</h2>
                    <p>{{ data.additionalInfo }}</p>
                </section>
            {% endif %}

            {% if data.experience is defined and data.experience|length > 0 %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">Work Experience</h2>

                    {% for experience in data.experience %}
                        <div class="experience-item">
                            <div class="job-title">{{ experience.position }}</div>
                            <div class="company">{{ experience.company }}{% if experience.location %}, {{ experience.location }}{% endif %}</div>
                            <div class="period">{{ experience.startDate }}{% if experience.startDate and experience.endDate %} - {% endif %}{{ experience.endDate }}</div>
                            {% if experience.description %}
                                <p>{{ experience.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </section>
            {% endif %}

            {% if data.education is defined and data.education|length > 0 %}
                <section style="margin-bottom: 30px;">
                    <h2 class="section-title">Education</h2>

                    {% for education in data.education %}
                        <div class="education-item">
                            <div class="degree">{{ education.degree }}</div>
                            <div class="university">{{ education.institution }}{% if education.location %}, {{ education.location }}{% endif %}</div>
                            <div class="period">{{ education.startDate }}{% if education.startDate and education.endDate %} - {% endif %}{{ education.endDate }}</div>
                            {% if education.description %}
                                <p>{{ education.description }}</p>
                            {% endif %}
                        </div>
                    {% endfor %}
                </section>
            {% endif %}

            <div style="text-align: center; margin-top: 50px; font-size: 12px; color: #777;">
                CV generated on {{ generatedDate|date('F d, Y') }} using ESPRIT CV Generator
            </div>
        </div>
    </div>
</div>
{% if app is defined and app.debug is defined and app.debug %}
    <div style="background: #f5f5f5; border: 1px solid #ddd; padding: 20px; margin-top: 30px; font-family: monospace;">
        <h2>Debug Data</h2>
        <pre>{{ dump(data) }}</pre>
    </div>
{% endif %}
</body>
</html>
==================================================

Fichier: Templates\cv_generator\index.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Generator{% endblock %}

{% block body %}
    <div class="container-fluid p-0">
        {# Header with logos #}
        <div class="header-logos">
            <div class="row m-0 p-3">
                <div class="col-4">
                    <img src="{{ asset('images/logo.png') }}" alt="Logo" class="img-fluid" style="max-height: 109px;">
                </div>
                <div class="col-4 text-center">
                    <img src="{{ asset('images/tunisie-removebg-preview.png') }}" alt="Tunisia" class="img-fluid" style="max-height: 100px;">
                </div>
                <div class="col-4 text-end">
                    <img src="{{ asset('images/esprim.png') }}" alt="ESPRIM" class="img-fluid" style="max-height: 46px;">
                </div>
            </div>
        </div>

        {# Content will go here #}
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .header-logos {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
{% endblock %}
==================================================

Fichier: Templates\cv_generator\main.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\main.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Generator{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <!-- Modern Libraries -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">

    <style>
        /* Modern Stepper Styles */
        .cv-stepper {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            margin: 30px 0;
        }

        .stepper-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #f8f9fa;
            border: 2px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: #6c757d;
            transition: all 0.3s;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .step-label {
            margin-top: 10px;
            font-size: 14px;
            color: #6c757d;
            font-weight: 500;
            transition: all 0.3s;
        }

        .step-connector {
            flex-grow: 1;
            height: 3px;
            background-color: #dee2e6;
            margin: 0 15px;
            z-index: 0;
        }

        .stepper-step.active .step-number {
            background-color: #ee3124;
            border-color: #ee3124;
            color: white;
        }

        .stepper-step.active .step-label {
            color: #212529;
            font-weight: 600;
        }

        .stepper-step.completed .step-number {
            background-color: #28a745;
            border-color: #28a745;
            color: white;
        }

        .stepper-step.completed + .step-connector {
            background-color: #28a745;
        }

        /* Modern Card Animations */
        .form-section-page {
            opacity: 0;
            transform: translateY(20px);
            transition: opacity 0.5s ease, transform 0.5s ease;
        }

        .form-section-page.active {
            opacity: 1;
            transform: translateY(0);
        }

        .card {
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.12);
        }

        .template-card {
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .template-card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent 65%, rgba(255,255,255,0.2) 100%);
            transition: all 0.3s;
        }

        .template-card:hover::after {
            background: linear-gradient(45deg, transparent 50%, rgba(255,255,255,0.3) 100%);
        }

        .template-card.selected-template::before {
            content: '\f00c';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            top: 10px;
            right: 10px;
            background: #28a745;
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }

        /* Skill Autocomplete Styles */
        .skill-suggestions {
            position: absolute;
            background: #fff;
            border-radius: 4px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            display: none;
        }

        .suggestion-item {
            padding: 10px 15px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .suggestion-item:hover {
            background: rgba(238, 49, 36, 0.1);
        }

        /* Drag and Drop Styles */
        .drag-handle {
            cursor: grab;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            height: 30px;
            color: #6c757d;
            transition: all 0.2s;
        }

        .drag-handle:hover {
            color: #ee3124;
        }

        .drag-handle:active {
            cursor: grabbing;
        }

        .sortable-ghost {
            opacity: 0.4;
            background: #f8f9fa;
        }

        .sortable-chosen {
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        }

        .sortable-drag {
            opacity: 0.8;
            transform: rotate(2deg);
        }

        /* Modern Photo Upload Styles */
        .profile-photo-container {
            position: relative;
            width: 180px;
            margin: 0 auto 2rem;
            transition: all 0.3s;
        }

        .profile-photo-wrapper {
            position: relative;
            overflow: hidden;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s;
        }

        .profile-photo-wrapper::after {
            content: '\f030';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0,0,0,0.5);
            color: white;
            padding: 8px 0;
            text-align: center;
            font-size: 16px;
            opacity: 0;
            transition: all 0.3s;
        }

        .profile-photo-wrapper:hover::after {
            opacity: 1;
        }

        .profile-photo-container.highlight {
            transform: scale(1.05);
            box-shadow: 0 0 0 3px rgba(238, 49, 36, 0.2), 0 0 20px rgba(0,0,0,0.1);
        }

        .photo-crop-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.7);
            z-index: 2000;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .photo-crop-content {
            background: white;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .photo-crop-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #dee2e6;
        }

        .photo-crop-body {
            flex: 1;
            min-height: 300px;
            overflow: hidden;
        }

        .photo-crop-footer {
            padding: 15px;
            border-top: 1px solid #dee2e6;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .crop-close-btn {
            background: none;
            border: none;
            font-size: 24px;
            line-height: 1;
            cursor: pointer;
        }

        /* Enhanced Preview Styles */
        .cv-preview {
            width: 450px;
            background: white;
        }

        .green-template-preview, .blue-template-preview {
            font-family: 'Roboto', sans-serif;
            color: #333;
        }

        .green-template-preview .preview-header {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            color: white;
            padding: 20px;
            text-align: center;
            border-radius: 8px 8px 0 0;
        }

        .green-template-preview .preview-body {
            padding: 20px;
        }

        .blue-template-preview {
            display: flex;
        }

        .blue-template-preview .preview-sidebar {
            background: #3498db;
            color: white;
            padding: 20px;
            width: 140px;
            border-radius: 8px 0 0 8px;
        }

        .blue-template-preview .preview-main {
            flex: 1;
            padding: 20px;
        }

        .blue-template-preview header {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #3498db;
        }

        .preview-skills {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }

        .skill-badge {
            background: rgba(255,255,255,0.2);
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
        }

        .preview-entry {
            margin-bottom: 10px;
            padding-left: 10px;
            border-left: 3px solid #ddd;
        }

        .green-template-preview .preview-entry {
            border-left-color: #27ae60;
        }

        .blue-template-preview .preview-entry {
            border-left-color: #3498db;
        }

        #previewContent {
            transition: all 0.3s ease;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 10px 25px rgba(0,0,0,0.15);
        }

        /* Additional styles for enlarged icons and images */
        .fas, .far, .fab, .fa {
            font-size: 200%; /* Double the icon size */
            vertical-align: middle;
        }

        /* Adjust specific icons that need special handling */
        .btn i.fas, .btn i.far, .btn i.fab, .btn i.fa {
            font-size: 150%; /* Slightly smaller for button icons to maintain button proportions */
            vertical-align: middle;
            margin-right: 0.5rem;
            margin-left: 0.5rem;
        }

        /* Adjust button padding to accommodate larger icons */
        .btn {
            padding: 0.5rem 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Fix form element alignment with larger icons */
        .form-label {
            display: flex;
            align-items: center;
            margin-bottom: 0.7rem;
        }

        /* Even larger logo badge */
        .logo-badge {
            width: 280px; /* Further enlarged from 220px */
            height: 280px; /* Further enlarged from 220px */
            border-width: 12px; /* Further enlarged from 10px */
            margin-bottom: 2rem;
        }

        /* Larger logo image inside the badge */
        .title-logo {
            max-width: 220px; /* Further enlarged from 170px */
            max-height: 220px; /* Further enlarged from 170px */
        }

        /* Larger title icon */
        .title-icon {
            font-size: 5.5rem !important; /* Further enlarged from 4.8rem */
            margin-left: 20px;
        }

        /* Adjust title container for larger elements */
        .main-title-container {
            margin: 3.5rem auto 4rem;
        }

        /* Profile photo display in CV */
        .profile-photo-container {
            display: flex;
            justify-content: center;
            margin-bottom: 2rem;
        }

        .profile-photo-wrapper {
            position: relative;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            overflow: hidden;
            border: 5px solid rgba(238, 49, 36, 0.2);
            box-shadow: 0 5px 15px rgba(45, 55, 72, 0.1);
        }

        .profile-photo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        /* Preview panel profile photo */
        .preview-profile-photo {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid rgba(238, 49, 36, 0.2);
            box-shadow: 0 3px 8px rgba(45, 55, 72, 0.1);
            margin: 0 auto 1rem;
            display: block;
        }

        /* Enhanced preview panel styling */
        .cv-preview {
            position: fixed;
            top: 0;
            right: 0;
            height: 100vh;
            width: 400px;
            background-color: var(--white);
            border-left: 1px solid rgba(113, 128, 150, 0.2);
            box-shadow: -4px 0 15px rgba(45, 55, 72, 0.1);
            padding: 2rem;
            overflow-y: auto;
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease-in-out;
        }

        .cv-preview.show {
            transform: translateX(0);
        }

        .preview-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 2.4rem;
            color: var(--slate-gray);
            cursor: pointer;
        }

        .preview-section {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(113, 128, 150, 0.2);
        }

        .preview-section:last-child {
            border-bottom: none;
        }

        .preview-section h5 {
            color: var(--primary-red);
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .preview-section h6 {
            color: var(--charcoal);
            font-weight: 600;
            margin-top: 0.5rem;
        }

        /* Language badges styling like skill badges */
        .language-badge {
            background-color: rgba(113, 128, 150, 0.1);
            color: var(--charcoal);
            border-radius: 20px;
            padding: 0.5rem 1rem;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            display: inline-flex;
            align-items: center;
            transition: var(--transition);
        }

        .language-badge button {
            background: none;
            border: none;
            color: var(--slate-gray);
            margin-left: 0.5rem;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .language-badge:hover {
            background-color: rgba(238, 49, 36, 0.1);
            color: var(--primary-red);
        }

        /* Template selection styling */
        .form-check-input[type="radio"] {
            width: 1.2em;
            height: 1.2em;
            margin-top: 0.25em;
        }

        .form-check-label {
            padding-left: 0.5em;
            font-weight: 500;
        }

        /* Template card highlight when selected */
        .template-card.selected-template .card {
            border: 3px solid;
            border-color: #3498db; /* Using a specific blue color instead of var(--primary) */
            box-shadow: 0 0 15px rgba(52, 152, 219, 0.3);
        }

        /* Template card highlight for green */
        .template-card.selected-template-green .card {
            border: 3px solid;
            border-color: #27ae60;
            box-shadow: 0 0 15px rgba(39, 174, 96, 0.3);
        }

        /* Debug info styling */
        details summary {
            cursor: pointer;
            font-weight: 600;
        }

        /* New Animation Elements */
        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .slide-in {
            animation: slideIn 0.5s ease forwards;
        }

        @keyframes slideIn {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Modern form styles */
        .form-control, .form-select {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            box-shadow: none;
            border-color: #dee2e6;
            transition: all 0.3s;
        }

        .form-control:focus, .form-select:focus {
            border-color: #ee3124;
            box-shadow: 0 0 0 0.25rem rgba(238, 49, 36, 0.25);
        }

        .form-floating label {
            padding: 0.75rem 1rem;
        }

        .form-floating .form-control:focus ~ label,
        .form-floating .form-control:not(:placeholder-shown) ~ label {
            transform: scale(0.85) translateY(-0.75rem) translateX(0.15rem);
        }

        /* Modern alert styling */
        .alert {
            border-radius: 8px;
            border: none;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

        .alert-info {
            background-color: rgba(52, 152, 219, 0.1);
            color: #2980b9;
        }

        .alert-success {
            background-color: rgba(39, 174, 96, 0.1);
            color: #27ae60;
        }

        .alert-warning {
            background-color: rgba(241, 196, 15, 0.1);
            color: #f39c12;
        }

        .alert-danger {
            background-color: rgba(231, 76, 60, 0.1);
            color: #c0392b;
        }

        /* Empty state styling */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            background-color: #f8f9fa;
            margin: 1.5rem 0;
        }

        .empty-state-icon {
            font-size: 3rem;
            color: #adb5bd;
            margin-bottom: 1rem;
        }

        .empty-state h5 {
            color: #495057;
            margin-bottom: 0.5rem;
        }

        .empty-state p {
            color: #6c757d;
            margin-bottom: 1.5rem;
        }

        /* Mobile-specific adjustments */
        @media (max-width: 768px) {
            .logo-badge {
                width: 180px; /* Adjusted for mobile */
                height: 180px; /* Adjusted for mobile */
                border-width: 8px; /* Adjusted for mobile */
            }

            .title-logo {
                max-width: 140px; /* Adjusted for mobile */
                max-height: 140px; /* Adjusted for mobile */
            }

            .title-icon {
                font-size: 4rem !important; /* Adjusted for mobile */
            }

            /* Adjust icon sizes on mobile */
            .fas, .far, .fab, .fa {
                font-size: 160%; /* Slightly smaller on mobile */
            }

            .cv-preview {
                width: 90%; /* Wider on mobile */
            }

            .profile-photo-wrapper {
                width: 120px;
                height: 120px;
            }

            .preview-profile-photo {
                width: 100px;
                height: 100px;
            }

            .step-label {
                display: none; /* Hide step labels on mobile */
            }

            .cv-stepper {
                margin: 15px 0; /* Less margin on mobile */
            }
        }
    </style>
{% endblock %}

{% block body %}
    {# Ajouter la sidebar de sélection des templates #}
    <div class="template-sidebar" id="templateSidebar">
        <!-- Entête de la sidebar -->
        <div class="sidebar-header">
            <h3><i class="fas fa-file-alt"></i> Templates CV</h3>
            <button class="close-sidebar" id="closeSidebar">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <!-- Contenu de la sidebar -->
        <div class="sidebar-content">
            <!-- Section de filtres -->
            <div class="filters-section sidebar-section">
                <div class="sidebar-section-title">
                    <i class="fas fa-filter"></i> Filtrer par
                </div>

                <!-- Filtres par style -->
                <div class="filter-group">
                    <span class="filter-label">Style</span>
                    <div class="filter-options">
                        <button class="filter-option" data-filter="all">Tous</button>
                        <button class="filter-option" data-filter="modern">Moderne</button>
                        <button class="filter-option" data-filter="classic">Classique</button>
                        <button class="filter-option" data-filter="creative">Créatif</button>
                        <button class="filter-option" data-filter="professional">Professionnel</button>
                    </div>
                </div>

                <!-- Filtres par domaine -->
                <div class="filter-group">
                    <span class="filter-label">Domaine</span>
                    <div class="filter-options">
                        <button class="filter-option" data-filter="all">Tous</button>
                        <button class="filter-option" data-filter="engineering">Ingénierie</button>
                        <button class="filter-option" data-filter="business">Business</button>
                        <button class="filter-option" data-filter="academic">Académique</button>
                    </div>
                </div>
            </div>

            <!-- Section des templates -->
            <div class="templates-section sidebar-section">
                <div class="sidebar-section-title">
                    <i class="fas fa-copy"></i> Templates disponibles
                </div>

                <ul class="template-list" id="templateList">
                    <!-- Template 1 - Moderne/Professionnel -->
                    <li class="template-item" data-template="template1" data-category="modern professional engineering">
                        <img src="{{ asset('images/cvs/1.png') }}" alt="Template Moderne" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Tech Expert</h4>
                            <div class="template-category">
                                <span class="category-tag tag-modern">Moderne</span>
                                <span class="category-tag tag-professional">Professionnel</span>
                                <span class="category-tag tag-engineering">Ingénierie</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 2 - Classique/Professionnel -->
                    <li class="template-item" data-template="template2" data-category="classic professional business">
                        <img src="{{ asset('images/cvs/2.png') }}" alt="Template Classique" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Executive</h4>
                            <div class="template-category">
                                <span class="category-tag tag-classic">Classique</span>
                                <span class="category-tag tag-professional">Professionnel</span>
                                <span class="category-tag tag-business">Business</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 3 - Créatif -->
                    <li class="template-item" data-template="template3" data-category="creative modern">
                        <img src="{{ asset('images/cvs/3.png') }}" alt="Template Créatif" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Innovation</h4>
                            <div class="template-category">
                                <span class="category-tag tag-creative">Créatif</span>
                                <span class="category-tag tag-modern">Moderne</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 4 - Académique -->
                    <li class="template-item" data-template="template4" data-category="classic academic">
                        <img src="{{ asset('images/cvs/4.png') }}" alt="Template Académique" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Academic Plus</h4>
                            <div class="template-category">
                                <span class="category-tag tag-classic">Classique</span>
                                <span class="category-tag tag-academic">Académique</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 5 - Ingénierie Moderne -->
                    <li class="template-item" data-template="template5" data-category="modern engineering">
                        <img src="{{ asset('images/cvs/5.png') }}" alt="Template Ingénierie" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Tech Engineering</h4>
                            <div class="template-category">
                                <span class="category-tag tag-modern">Moderne</span>
                                <span class="category-tag tag-engineering">Ingénierie</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 6 - Business Moderne -->
                    <li class="template-item" data-template="template6" data-category="modern business">
                        <img src="{{ asset('images/cvs/6.png') }}" alt="Template Business" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Business Pro</h4>
                            <div class="template-category">
                                <span class="category-tag tag-modern">Moderne</span>
                                <span class="category-tag tag-business">Business</span>
                                <span class="category-tag tag-professional">Professionnel</span>
                            </div>
                        </div>
                    </li>

                    <!-- Template 7 - Classique Élégant -->
                    <li class="template-item" data-template="template7" data-category="classic professional">
                        <img src="{{ asset('images/cvs/7.png') }}" alt="Template Classique Élégant" class="template-thumbnail">
                        <div class="template-info">
                            <h4 class="template-name">Classic Elite</h4>
                            <div class="template-category">
                                <span class="category-tag tag-classic">Classique</span>
                                <span class="category-tag tag-professional">Professionnel</span>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Bouton Toggle Sidebar (visible uniquement sur mobile) -->
    <button class="sidebar-toggle" id="sidebarToggle">
        <i class="fas fa-th-large"></i>
    </button>

    <!-- Overlay pour fermer la sidebar sur mobile -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Contenu principal adapté à la sidebar -->
    <div class="main-content">
        <div class="container">
            <div class="main-title-container">
                <div class="logo-badge">
                    <img src="{{ asset('images/esprim.png') }}" alt="ESPRIT" class="title-logo">
                </div>
                <h1 class="main-title">
                    <span class="title-accent">ESPRIT</span> CV Generator
                    <i class="fas fa-file-alt title-icon"></i>
                </h1>
                <p class="main-subtitle">Create professional CVs in minutes</p>
            </div>

            <!-- Modern Stepper instead of Progress Tracking -->
            <div id="cv-stepper-container" class="mb-4"></div>

            <!-- CV Form -->
            <div class="card shadow">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0"><i class="fas fa-file-alt me-2"></i>Build Your Professional CV</h3>
                    <button type="button" class="btn btn-sm btn-outline-light" id="autofillBtn" title="Autofill with sample data">
                        <i class="fas fa-magic me-1"></i> Autofill
                    </button>
                </div>
                <div class="card-body">
                    <form id="cvForm" method="post" action="/cv-generator/generate" enctype="multipart/form-data" target="pdfDownloadFrame" class="needs-validation" novalidate>
                        <div class="form-sections">
                            <!-- Personal Information Section -->
                            <div class="form-section-page active" id="section-1">
                                <h4 class="form-section-title">
                                    <i class="fas fa-user"></i>
                                    Personal Information
                                </h4>

                                <div class="alert alert-info fade-in">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Start by providing your basic personal information.
                                </div>

                                <!-- Modern Profile Photo Upload -->
                                <div class="profile-photo-container">
                                    <div class="profile-photo-wrapper">
                                        <img src="{{ asset('images/default-avatar.png') }}" alt="Profile Photo" class="profile-photo" id="profilePhotoPreview">
                                        <input type="file" id="photoUpload" name="photo" accept="image/*" class="d-none">
                                    </div>
                                    <p class="text-center mt-2 small text-muted">Click on the photo to upload</p>
                                </div>

                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="firstName" name="firstName" placeholder="First Name" required>
                                            <label for="firstName"><i class="fas fa-user-circle me-2"></i>First Name</label>
                                            <div class="invalid-feedback">Please provide your first name.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="lastName" name="lastName" placeholder="Last Name" required>
                                            <label for="lastName"><i class="fas fa-user-circle me-2"></i>Last Name</label>
                                            <div class="invalid-feedback">Please provide your last name.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="email" class="form-control" id="email" name="email" placeholder="Email Address" required>
                                            <label for="email"><i class="fas fa-envelope me-2"></i>Email Address</label>
                                            <div class="invalid-feedback">Please provide a valid email address.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="tel" class="form-control" id="phone" name="phone" placeholder="Phone Number">
                                            <label for="phone"><i class="fas fa-phone me-2"></i>Phone Number</label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="position" name="position" placeholder="Professional Title" required>
                                            <label for="position"><i class="fas fa-briefcase me-2"></i>Professional Title</label>
                                            <div class="invalid-feedback">Please provide your current or desired professional title.</div>
                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <div class="form-floating">
                                            <textarea class="form-control" id="address" name="address" placeholder="Full Address" style="height: 100px"></textarea>
                                            <label for="address"><i class="fas fa-map-marker-alt me-2"></i>Full Address</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="website" name="website" placeholder="Personal Website">
                                            <label for="website"><i class="fas fa-globe me-2"></i>Personal Website</label>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="form-floating">
                                            <input type="text" class="form-control" id="linkedin" name="linkedin" placeholder="LinkedIn Profile">
                                            <label for="linkedin"><i class="fab fa-linkedin me-2"></i>LinkedIn Profile</label>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <div class="form-floating">
                                            <textarea class="form-control" id="summary" name="summary" placeholder="Professional Summary" style="height: 150px"></textarea>
                                            <label for="summary"><i class="fas fa-comment me-2"></i>Professional Summary</label>
                                            <div class="form-text text-end"><span id="summaryCharCount">0</span>/500</div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" disabled>
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-outline-primary next-section" data-next="2">
                                        Next<i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Education Section -->
                            <div class="form-section-page" id="section-2">
                                <h4 class="form-section-title">
                                    <i class="fas fa-graduation-cap"></i>
                                    Education
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add your educational background, starting with the most recent.
                                </div>

                                <div id="educationEntries">
                                    <!-- Empty state -->
                                    <div class="empty-state" id="educationEmptyState">
                                        <div class="empty-state-icon">
                                            <i class="fas fa-graduation-cap"></i>
                                        </div>
                                        <h5>No education entries yet</h5>
                                        <p>Add your academic qualifications to enhance your CV</p>
                                        <button type="button" class="btn btn-primary" id="addFirstEducation">
                                            <i class="fas fa-plus me-2"></i>Add Education
                                        </button>
                                    </div>
                                </div>

                                <div class="text-center mb-4" id="addMoreEducationBtnContainer" style="display: none;">
                                    <button type="button" class="btn btn-outline-primary" id="addEducation">
                                        <i class="fas fa-plus me-2"></i>Add Another Education
                                    </button>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="1">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-outline-primary next-section" data-next="3">
                                        Next<i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Experience Section -->
                            <div class="form-section-page" id="section-3">
                                <h4 class="form-section-title">
                                    <i class="fas fa-briefcase"></i>
                                    Work Experience
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add your work experience, starting with the most recent.
                                </div>

                                <div id="experienceEntries">
                                    <!-- Empty state -->
                                    <div class="empty-state" id="experienceEmptyState">
                                        <div class="empty-state-icon">
                                            <i class="fas fa-briefcase"></i>
                                        </div>
                                        <h5>No experience entries yet</h5>
                                        <p>Add your work experience to showcase your professional background</p>
                                        <button type="button" class="btn btn-primary" id="addFirstExperience">
                                            <i class="fas fa-plus me-2"></i>Add Experience
                                        </button>
                                    </div>
                                </div>

                                <div class="text-center mb-4" id="addMoreExperienceBtnContainer" style="display: none;">
                                    <button type="button" class="btn btn-outline-primary" id="addExperience">
                                        <i class="fas fa-plus me-2"></i>Add Another Experience
                                    </button>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="2">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-outline-primary next-section" data-next="4">
                                        Next<i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Skills Section -->
                            <div class="form-section-page" id="section-4">
                                <h4 class="form-section-title">
                                    <i class="fas fa-tools"></i>
                                    Skills
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add skills that are relevant to the job you're applying for.
                                </div>

                                <div class="card shadow-sm mb-4">
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="skillInput" class="form-label">
                                                <i class="fas fa-star me-2"></i>Add Skills
                                            </label>
                                            <div class="input-group">
                                                <input type="text" class="form-control" id="skillInput" placeholder="Type a skill and press Enter">
                                                <button class="btn btn-outline-primary" type="button" id="addSkillBtn">
                                                    <i class="fas fa-plus"></i> Add
                                                </button>
                                            </div>
                                            <div class="form-text">Press Enter after typing each skill or click Add button</div>
                                        </div>

                                        <div id="skillsContainer" class="d-flex flex-wrap gap-2 mb-3">
                                            <!-- Skills will be added here via JavaScript -->
                                        </div>

                                        <div id="skillsEmptyState" class="empty-state" style="padding: 1.5rem;">
                                            <div class="empty-state-icon">
                                                <i class="fas fa-star"></i>
                                            </div>
                                            <h5>No skills added yet</h5>
                                            <p>Add skills that showcase your professional capabilities</p>
                                        </div>

                                        <div class="mt-3">
                                            <h6><i class="fas fa-lightbulb me-2"></i>Popular Skills</h6>
                                            <div class="d-flex flex-wrap gap-2 mt-2">
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">JavaScript</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Python</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Java</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">HTML/CSS</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">SQL</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">React</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Project Management</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Communication</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Problem Solving</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-skill">Leadership</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="3">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-outline-primary next-section" data-next="5">
                                        Next<i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Languages Section -->
                            <div class="form-section-page" id="section-5">
                                <h4 class="form-section-title">
                                    <i class="fas fa-language"></i>
                                    Languages
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add languages you speak and your proficiency level.
                                </div>

                                <div class="card shadow-sm mb-4">
                                    <div class="card-body">
                                        <div class="row g-3 mb-3">
                                            <div class="col-md-6">
                                                <div class="form-floating">
                                                    <input type="text" class="form-control" id="languageInput" placeholder="Language">
                                                    <label for="languageInput"><i class="fas fa-language me-2"></i>Language</label>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="form-floating">
                                                    <select class="form-select" id="proficiencySelect">
                                                        <option value="" selected disabled>Select proficiency</option>
                                                        <option value="Native">Native</option>
                                                        <option value="Fluent">Fluent</option>
                                                        <option value="Advanced">Advanced</option>
                                                        <option value="Intermediate">Intermediate</option>
                                                        <option value="Basic">Basic</option>
                                                    </select>
                                                    <label for="proficiencySelect"><i class="fas fa-chart-bar me-2"></i>Proficiency</label>
                                                </div>
                                            </div>
                                            <div class="col-12 text-center">
                                                <button type="button" class="btn btn-outline-primary" id="addLanguageBtn">
                                                    <i class="fas fa-plus me-2"></i>Add Language
                                                </button>
                                            </div>
                                        </div>

                                        <div id="languagesContainer" class="d-flex flex-wrap gap-2 mb-3">
                                            <!-- Languages will be added here via JavaScript -->
                                        </div>

                                        <div id="languagesEmptyState" class="empty-state" style="padding: 1.5rem;">
                                            <div class="empty-state-icon">
                                                <i class="fas fa-language"></i>
                                            </div>
                                            <h5>No languages added yet</h5>
                                            <p>Add languages to showcase your communication abilities</p>
                                        </div>

                                        <div class="mt-3">
                                            <h6><i class="fas fa-lightbulb me-2"></i>Common Languages</h6>
                                            <div class="d-flex flex-wrap gap-2 mt-2">
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-language" data-lang="English" data-level="Fluent">English (Fluent)</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-language" data-lang="French" data-level="Intermediate">French (Intermediate)</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-language" data-lang="Spanish" data-level="Basic">Spanish (Basic)</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-language" data-lang="Arabic" data-level="Native">Arabic (Native)</button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary quick-language" data-lang="German" data-level="Advanced">German (Advanced)</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="4">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-outline-primary next-section" data-next="6">
                                        Next<i class="fas fa-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Additional Information Section -->
                            <div class="form-section-page" id="section-6">
                                <h4 class="form-section-title">
                                    <i class="fas fa-plus-circle"></i>
                                    Additional Information
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Add any other information that might be relevant to your CV.
                                </div>

                                <div class="row g-3">
                                    <div class="col-12">
                                        <div class="card shadow-sm mb-4">
                                            <div class="card-header">
                                                <h5 class="mb-0"><i class="fas fa-certificate me-2"></i>Certifications</h5>
                                            </div>
                                            <div class="card-body">
                                                <div id="certificationsContainer">
                                                    <div class="mb-3">
                                                        <div class="input-group">
                                                            <input type="text" class="form-control" id="certificationInput" placeholder="e.g. AWS Certified Developer">
                                                            <button type="button" class="btn btn-outline-primary" id="addCertificationBtn">
                                                                <i class="fas fa-plus"></i> Add
                                                            </button>
                                                        </div>
                                                    </div>

                                                    <div id="certificationsList" class="list-group mb-3">
                                                        <!-- Certifications will be added here via JavaScript -->
                                                    </div>

                                                    <div id="certificationsEmptyState" class="empty-state" style="padding: 1rem;">
                                                        <div class="empty-state-icon">
                                                            <i class="fas fa-certificate"></i>
                                                        </div>
                                                        <h6>No certifications added</h6>
                                                        <p class="small">Add professional certifications to strengthen your CV</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="card shadow-sm h-100">
                                            <div class="card-header">
                                                <h5 class="mb-0"><i class="fas fa-award me-2"></i>Achievements</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="form-floating">
                                                    <textarea class="form-control" id="achievements" name="achievements" placeholder="Your Achievements" style="height: 150px"></textarea>
                                                    <label for="achievements">Noteworthy Achievements</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-md-6">
                                        <div class="card shadow-sm h-100">
                                            <div class="card-header">
                                                <h5 class="mb-0"><i class="fas fa-users me-2"></i>Interests</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="form-floating">
                                                    <textarea class="form-control" id="interests" name="interests" placeholder="Your Interests" style="height: 150px"></textarea>
                                                    <label for="interests">Personal Interests & Hobbies</label>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-12">
                                        <div class="card shadow-sm">
                                            <div class="card-header">
                                                <h5 class="mb-0"><i class="fas fa-link me-2"></i>References</h5>
                                            </div>
                                            <div class="card-body">
                                                <div class="mb-3">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="checkbox" id="includeReferences" name="includeReferences">
                                                        <label class="form-check-label" for="includeReferences">
                                                            Include references in my CV
                                                        </label>
                                                    </div>
                                                </div>

                                                <div id="referencesSection" style="display: none;">
                                                    <div class="row g-3">
                                                        <div class="col-md-6">
                                                            <div class="form-floating">
                                                                <input type="text" class="form-control" id="referenceName" name="referenceName" placeholder="Reference Name">
                                                                <label for="referenceName"><i class="fas fa-user-tie me-2"></i>Name</label>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-floating">
                                                                <input type="text" class="form-control" id="referencePosition" name="referencePosition" placeholder="Reference Position">
                                                                <label for="referencePosition"><i class="fas fa-briefcase me-2"></i>Position</label>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-floating">
                                                                <input type="text" class="form-control" id="referenceCompany" name="referenceCompany" placeholder="Company">
                                                                <label for="referenceCompany"><i class="fas fa-building me-2"></i>Company</label>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-floating">
                                                                <input type="email" class="form-control" id="referenceEmail" name="referenceEmail" placeholder="Email">
                                                                <label for="referenceEmail"><i class="fas fa-envelope me-2"></i>Email</label>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-6">
                                                            <div class="form-floating">
                                                                <input type="tel" class="form-control" id="referencePhone" name="referencePhone" placeholder="Phone">
                                                                <label for="referencePhone"><i class="fas fa-phone me-2"></i>Phone</label>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="mt-3">
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" id="referenceUponRequest" name="referenceUponRequest">
                                                            <label class="form-check-label" for="referenceUponRequest">
                                                                Or just write "References available upon request"
                                                            </label>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="5">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button type="button" class="btn btn-submit-review btn-primary">
                                        Review CV<i class="fas fa-check ms-2"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Review Section -->
                            <div class="form-section-page" id="section-7">
                                <h4 class="form-section-title">
                                    <i class="fas fa-check-circle"></i>
                                    Review Your CV
                                </h4>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Please review your CV information before generating the final document.
                                </div>

                                <div id="reviewContent" class="p-3 border rounded bg-light">
                                    <!-- Review content will be generated here -->
                                </div>

                                <!-- Template Selection -->
                                <div class="mt-5 mb-4">
                                    <h4 class="form-section-title">
                                        <i class="fas fa-palette"></i>
                                        Choose Template
                                    </h4>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <div class="card h-100 template-card" id="greenTemplateCard">
                                                <div class="card-header bg-success text-white">
                                                    <h5 class="mb-0">Green Professional Template</h5>
                                                </div>
                                                <div class="card-body text-center">
                                                    <img src="{{ asset('images/template_green.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Green Template Preview">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="template" id="template-green" value="green" checked>
                                                        <label class="form-check-label" for="template-green">
                                                            Select Green Template
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 mb-3">
                                            <div class="card h-100 template-card" id="blueTemplateCard">
                                                <div class="card-header bg-primary text-white">
                                                    <h5 class="mb-0">Blue Modern Template</h5>
                                                </div>
                                                <div class="card-body text-center">
                                                    <img src="{{ asset('images/template_blue.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Blue Template Preview">
                                                    <div class="form-check">
                                                        <input class="form-check-input" type="radio" name="template" id="template-blue" value="blue">
                                                        <label class="form-check-label" for="template-blue">
                                                            Select Blue Template
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Hidden field for photo data -->
                                <input type="hidden" name="photoData" id="photoDataField" value="">

                                <!-- Section Navigation -->
                                <div class="form-navigation-buttons d-flex justify-content-between mt-4 mb-2">
                                    <button type="button" class="btn btn-outline-secondary prev-section" data-prev="6">
                                        <i class="fas fa-arrow-left me-2"></i>Previous
                                    </button>
                                    <button id="generateBtn" type="button" class="btn btn-primary pulse">
                                        <i class="fas fa-file-download me-2"></i>Generate CV
                                    </button>
                                </div>

                                <!-- Status message -->
                                <div id="statusMessage" class="alert alert-info mt-3" style="display: none;">
                                    <i class="fas fa-spinner fa-spin me-2"></i>
                                    Generating your CV... Please wait.
                                </div>

                                <!-- Alternative methods -->
                                <div class="mt-4 p-3 border rounded bg-light">
                                    <h5>Other Download Options</h5>
                                    <p class="small text-muted">If you're having trouble with the main download button, try these alternatives:</p>
                                    <div class="d-flex flex-wrap gap-2">
                                        <button type="button" class="btn btn-success" id="directDownloadBtn">
                                            <i class="fas fa-file-download me-1"></i> Direct Download
                                        </button>
                                        <button type="button" class="btn btn-info" id="simpleDownloadBtn">
                                            <i class="fas fa-file-alt me-1"></i> Simple CV
                                        </button>
                                        <a href="/cv-generator/test-pdf" class="btn btn-warning" target="_blank">
                                            <i class="fas fa-vial me-1"></i> Test PDF System
                                        </a>
                                    </div>
                                </div>

                                <!-- Debug information in development -->
                                <div class="mt-3 p-2 border rounded border-danger">
                                    <details>
                                        <summary class="text-danger"><i class="fas fa-bug me-1"></i> Debug Tools</summary>
                                        <div class="mt-2">
                                            <button type="button" class="btn btn-sm btn-outline-danger me-1" id="viewFormDataBtn">
                                                View Form Data
                                            </button>
                                            <a href="/cv-generator/generate?debug=1" class="btn btn-sm btn-outline-danger me-1" target="_blank">
                                                View HTML Template
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-danger" id="clearCacheBtn">
                                                Clear Local Storage
                                            </button>
                                        </div>
                                    </details>
                                </div>
                            </div>
                        </div>

                        <!-- Preview Button (always visible) -->
                        <div class="text-center mt-4">
                            <button type="button" class="btn btn-outline-secondary btn-preview">
                                <i class="fas fa-file-invoice me-2"></i>Preview CV
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- CV Preview Panel -->
    <div class="cv-preview" id="cvPreview">
        <button type="button" class="preview-close" id="closePreview">&times;</button>
        <div class="text-center mb-4">
            <h4><i class="fas fa-file-invoice me-2"></i>CV Preview</h4>
            <div class="small text-muted">This is how your CV will appear when generated</div>
        </div>
        <div id="previewContent" class="preview-content">
            <!-- Preview content will be generated here -->
        </div>
    </div>

    <!-- Education Entry Template (hidden) -->
    <template id="educationEntryTemplate">
        <div class="education-entry card mb-4 shadow-sm slide-in">
            <div class="card-header bg-light d-flex align-items-center">
                <span class="drag-handle me-2">
                    <i class="fas fa-grip-vertical"></i>
                </span>
                <h5 class="mb-0 education-title">New Education Entry</h5>
                <button type="button" class="btn-close ms-auto remove-education" aria-label="Remove"></button>
            </div>

            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control institution-input" name="education[institution][]" placeholder="University or School Name" data-required="true">
                            <label><i class="fas fa-university me-2"></i>Institution</label>
                            <div class="invalid-feedback">Please provide an institution name.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control degree-input" name="education[degree][]" placeholder="Bachelor, Master, Ph.D, Certificate, etc." data-required="true">
                            <label><i class="fas fa-scroll me-2"></i>Degree/Certificate</label>
                            <div class="invalid-feedback">Please provide a degree or certificate.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control field-input" name="education[field][]" placeholder="e.g. Computer Science">
                            <label><i class="fas fa-book me-2"></i>Field of Study</label>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control location-input" name="education[location][]" placeholder="City, Country">
                            <label><i class="fas fa-map-marker-alt me-2"></i>Location</label>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control date-input start-date-input" name="education[startDate][]" placeholder="Select start date" data-required="true">
                            <label><i class="fas fa-calendar-alt me-2"></i>Start Date</label>
                            <div class="invalid-feedback">Please provide a start date.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="input-group end-date-group">
                            <div class="form-floating flex-grow-1">
                                <input type="text" class="form-control date-input end-date-input" name="education[endDate][]" placeholder="Select end date">
                                <label><i class="fas fa-calendar-check me-2"></i>End Date</label>
                            </div>
                            <div class="input-group-text">
                                <div class="form-check form-switch m-0">
                                    <input class="form-check-input current-checkbox" type="checkbox" role="switch" name="education[current][]">
                                    <label class="form-check-label">Current</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="form-floating">
                            <textarea class="form-control description-input" name="education[description][]" rows="3" placeholder="Provide details about your studies, achievements, etc." style="height: 100px"></textarea>
                            <label><i class="fas fa-align-left me-2"></i>Description</label>
                            <div class="form-text text-end"><span class="char-count">0</span>/500</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <!-- Experience Entry Template (hidden) -->
    <template id="experienceEntryTemplate">
        <div class="experience-entry card mb-4 shadow-sm slide-in">
            <div class="card-header bg-light d-flex align-items-center">
                <span class="drag-handle me-2">
                    <i class="fas fa-grip-vertical"></i>
                </span>
                <h5 class="mb-0 experience-title">New Experience Entry</h5>
                <button type="button" class="btn-close ms-auto remove-experience" aria-label="Remove"></button>
            </div>

            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control company-input" name="experience[company][]" placeholder="Company Name" data-required="true">
                            <label><i class="fas fa-building me-2"></i>Company</label>
                            <div class="invalid-feedback">Please provide a company name.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control position-input" name="experience[position][]" placeholder="Your job title" data-required="true">
                            <label><i class="fas fa-id-badge me-2"></i>Position</label>
                            <div class="invalid-feedback">Please provide your job title.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control location-input" name="experience[location][]" placeholder="City, Country">
                            <label><i class="fas fa-map-marker-alt me-2"></i>Location</label>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-floating">
                            <input type="text" class="form-control date-input start-date-input" name="experience[startDate][]" placeholder="Select start date" data-required="true">
                            <label><i class="fas fa-calendar-alt me-2"></i>Start Date</label>
                            <div class="invalid-feedback">Please provide a start date.</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="input-group end-date-group">
                            <div class="form-floating flex-grow-1">
                                <input type="text" class="form-control date-input end-date-input" name="experience[endDate][]" placeholder="Select end date">
                                <label><i class="fas fa-calendar-check me-2"></i>End Date</label>
                            </div>
                            <div class="input-group-text">
                                <div class="form-check form-switch m-0">
                                    <input class="form-check-input current-checkbox" type="checkbox" role="switch" name="experience[current][]">
                                    <label class="form-check-label">Current</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-12">
                        <div class="form-floating">
                            <textarea class="form-control description-input" name="experience[description][]" rows="3" placeholder="Describe your responsibilities and achievements" style="height: 120px"></textarea>
                            <label><i class="fas fa-align-left me-2"></i>Description</label>
                            <div class="form-text text-end"><span class="char-count">0</span>/500</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </template>

    <!-- Sample data for autofill (hidden) -->
    <div id="sampleData" data-sample="{{ sampleData|json_encode }}" style="display:none;"></div>

    <!-- Hidden iframe for PDF downloads -->
    <iframe id="pdfDownloadFrame" name="pdfDownloadFrame" style="display:none;"></iframe>

    <style>
        :root {
            /* Utilisation des couleurs cohérentes avec votre template principal */
            --primary-color: #ee3124; /* Rouge primaire ESPRIT */
            --primary-light: rgba(238, 49, 36, 0.1);
            --primary-shadow: rgba(238, 49, 36, 0.25);
            --secondary-color: #2d3748; /* Charcoal */
            --accent-color: #718096; /* Slate Gray */
            --light-bg: #faf7f2; /* Light Beige */
            --white-bg: #ffffff; /* White */
            --text-dark: #1a202c; /* Dark Text */
            --text-medium: #2d3748; /* Charcoal pour texte moyen */
            --text-light: #718096; /* Slate Gray */
            --border-color: #e2e8f0;
            --card-shadow: rgba(45, 55, 72, 0.1);
            --font-family-sans-serif: 'Poppins', sans-serif;
        }

        .template-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100vh;
            width: 280px;
            background-color: var(--white-bg);
            box-shadow: 2px 0 10px var(--card-shadow);
            z-index: 1000;
            overflow-y: auto;
            transition: transform 0.3s ease-in-out;
            font-family: var(--font-family-sans-serif);
        }

        .template-sidebar.collapsed {
            transform: translateX(-280px);
        }

        .sidebar-header {
            padding: 1.5rem 1rem;
            background-color: var(--secondary-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .sidebar-header h3 {
            font-size: 1.25rem;
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .sidebar-header .close-sidebar {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0;
            display: none;
        }

        .sidebar-content {
            padding: 1.5rem 1rem;
        }

        .sidebar-section {
            margin-bottom: 2rem;
        }

        .sidebar-section-title {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--border-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .template-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .template-item {
            margin-bottom: 1rem;
            border-radius: 0.5rem;
            overflow: hidden;
            box-shadow: 0 2px 8px var(--card-shadow);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            position: relative;
            background-color: var(--light-bg);
        }

        .template-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px var(--card-shadow);
        }

        .template-item.selected {
            border: 2px solid var(--primary-color);
        }

        .template-item.selected::after {
            content: '\f00c';
            font-family: 'Font Awesome 6 Free';
            font-weight: 900;
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: var(--primary-color);
            color: white;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
        }

        .template-thumbnail {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 0.5rem 0.5rem 0 0;
            display: block;
        }

        .template-info {
            padding: 0.75rem 1rem;
            background-color: white;
        }

        .template-name {
            font-weight: 600;
            font-size: 0.95rem;
            margin: 0 0 0.25rem;
            color: var(--text-dark);
        }

        .template-category {
            font-size: 0.8rem;
            color: var(--text-light);
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.4rem;
        }

        /* Style pour les tags des différentes catégories */
        .category-tag {
            display: inline-flex;
            align-items: center;
            padding: 0.15rem 0.5rem;
            font-size: 0.7rem;
            border-radius: 20px;
            margin-top: 0.5rem;
            font-weight: 500;
        }

        .tag-modern {
            background-color: rgba(79, 209, 197, 0.15);
            color: #0694a2;
        }

        .tag-classic {
            background-color: rgba(102, 126, 234, 0.15);
            color: #5145cd;
        }

        .tag-creative {
            background-color: rgba(245, 158, 11, 0.15);
            color: #c05621;
        }

        .tag-professional {
            background-color: rgba(16, 185, 129, 0.15);
            color: #057a55;
        }

        .tag-academic {
            background-color: rgba(236, 72, 153, 0.15);
            color: #9d174d;
        }

        .tag-engineering {
            background-color: rgba(37, 99, 235, 0.15);
            color: #1e429f;
        }

        .tag-business {
            background-color: rgba(220, 38, 38, 0.15);
            color: #9b1c1c;
        }

        .filters-section {
            margin-bottom: 1.5rem;
        }

        .filter-group {
            margin-bottom: 1rem;
        }

        .filter-label {
            display: block;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-medium);
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .filter-option {
            padding: 0.35rem 0.75rem;
            font-size: 0.8rem;
            border-radius: 20px;
            background-color: var(--light-bg);
            color: var(--text-medium);
            border: 1px solid var(--border-color);
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .filter-option:hover {
            background-color: var(--primary-light);
            color: var(--primary-color);
        }

        .filter-option.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Bouton Toggle Sidebar (visible uniquement sur mobile) */
        .sidebar-toggle {
            position: fixed;
            top: 1rem;
            left: 1rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            width: 45px;
            height: 45px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            z-index: 1001;
            box-shadow: 0 2px 8px var(--primary-shadow);
            display: none;
        }

        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        /* Contenu principal - décalé par la sidebar */
        .main-content {
            margin-left: 280px;
            transition: margin-left 0.3s ease;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        /* Responsive */
        @media (max-width: 992px) {
            .template-sidebar {
                transform: translateX(-280px);
            }

            .template-sidebar.active {
                transform: translateX(0);
            }

            .sidebar-toggle {
                display: flex;
            }

            .sidebar-overlay.active {
                display: block;
            }

            .sidebar-header .close-sidebar {
                display: block;
            }

            .main-content {
                margin-left: 0;
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Récupération des éléments DOM
            const sidebar = document.getElementById('templateSidebar');
            const mainContent = document.querySelector('.main-content');
            const sidebarToggle = document.getElementById('sidebarToggle');
            const closeSidebar = document.getElementById('closeSidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const templateItems = document.querySelectorAll('.template-item');
            const filterOptions = document.querySelectorAll('.filter-option');

            // Fonction pour afficher/masquer la sidebar sur mobile
            function toggleSidebar() {
                sidebar.classList.toggle('active');
                sidebarOverlay.classList.toggle('active');
                document.body.classList.toggle('sidebar-open');
            }

            // Écouteurs d'événements pour la sidebar
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', toggleSidebar);
            }

            if (closeSidebar) {
                closeSidebar.addEventListener('click', toggleSidebar);
            }

            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', toggleSidebar);
            }

            // Sélection d'un template
            templateItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Supprimer la classe selected de tous les templates
                    templateItems.forEach(el => {
                        el.classList.remove('selected');
                    });

                    // Ajouter la classe selected au template cliqué
                    this.classList.add('selected');

                    // Récupérer l'identifiant du template sélectionné
                    const templateId = this.getAttribute('data-template');

                    // Stocker la sélection (dans localStorage ou autre)
                    localStorage.setItem('selectedTemplate', templateId);

                    // Déclencher un événement personnalisé pour informer d'autres scripts de la sélection
                    const event = new CustomEvent('templateSelected', { detail: { templateId: templateId } });
                    document.dispatchEvent(event);

                    // Sur mobile, fermer la sidebar après la sélection
                    if (window.innerWidth < 992) {
                        toggleSidebar();
                    }
                });
            });

            // Filtrage des templates
            filterOptions.forEach(option => {
                option.addEventListener('click', function() {
                    const filterValue = this.getAttribute('data-filter');
                    const filterGroup = this.closest('.filter-group');

                    // Supprimer la classe active des autres options du même groupe
                    if (filterGroup) {
                        const groupOptions = filterGroup.querySelectorAll('.filter-option');
                        groupOptions.forEach(opt => {
                            opt.classList.remove('active');
                        });
                    }

                    // Ajouter la classe active à l'option cliquée
                    this.classList.add('active');

                    // Filtrer les templates
                    filterTemplates();
                });
            });

            // Fonction pour filtrer les templates en fonction des options sélectionnées
            function filterTemplates() {
                const activeFilters = [];

                // Récupérer tous les filtres actifs
                document.querySelectorAll('.filter-option.active').forEach(option => {
                    const filter = option.getAttribute('data-filter');
                    if (filter !== 'all') {
                        activeFilters.push(filter);
                    }
                });

                // Si aucun filtre actif, ou seulement des "all", afficher tous les templates
                if (activeFilters.length === 0) {
                    templateItems.forEach(item => {
                        item.style.display = 'block';
                    });
                    return;
                }

                // Appliquer les filtres
                templateItems.forEach(item => {
                    const categories = item.getAttribute('data-category').split(' ');
                    let shouldShow = false;

                    // Si un template correspond à au moins un des filtres actifs, l'afficher
                    for (let filter of activeFilters) {
                        if (categories.includes(filter)) {
                            shouldShow = true;
                            break;
                        }
                    }

                    item.style.display = shouldShow ? 'block' : 'none';
                });
            }

            // Vérifier s'il y a un template sélectionné en localStorage
            const savedTemplate = localStorage.getItem('selectedTemplate');
            if (savedTemplate) {
                const template = document.querySelector(`.template-item[data-template="${savedTemplate}"]`);
                if (template) {
                    template.classList.add('selected');
                }
            }

            // Initialiser avec tous les templates visibles
            filterOptions[0].classList.add('active'); // Activer le filtre "Tous" par défaut

            // Ajouter un écouteur d'événement pour la sélection du template
            document.addEventListener('templateSelected', function(e) {
                // Si vous avez un formulaire avec un champ caché pour le template
                const cvForm = document.getElementById('cvForm');
                if (cvForm) {
                    // Vérifier si le champ caché existe déjà
                    let templateInput = document.getElementById('templateInput');
                    if (!templateInput) {
                        // Créer le champ s'il n'existe pas
                        templateInput = document.createElement('input');
                        templateInput.type = 'hidden';
                        templateInput.id = 'templateInput';
                        templateInput.name = 'template';
                        cvForm.appendChild(templateInput);
                    }
                    // Mettre à jour la valeur
                    templateInput.value = e.detail.templateId;

                    // Si on est sur la page de revue, mettre à jour la sélection visuelle
                    // Cette partie est synchronisée avec votre fonctionnalité existante de sélection de template
                    if (e.detail.templateId === 'template1' || e.detail.templateId === 'template5') {
                        document.getElementById('template-green').checked = true;
                    } else if (e.detail.templateId === 'template2' || e.detail.templateId === 'template6') {
                        document.getElementById('template-blue').checked = true;
                    }

                    // Afficher un message de confirmation pour l'utilisateur (optionnel)
                    console.log('Template sélectionné:', e.detail.templateId);
                }
            });
        });
    </script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <!-- Modern Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Modern Components Classes

            // Modern Stepper Component
            class CVStepper {
                constructor(element, steps, currentStep) {
                    this.element = element;
                    this.steps = steps;
                    this.currentStep = currentStep;
                    this.render();
                }

                render() {
                    const stepperWrapper = document.createElement('div');
                    stepperWrapper.className = 'cv-stepper';

                    this.steps.forEach((step, index) => {
                        const stepElement = document.createElement('div');
                        stepElement.className = `stepper-step ${index + 1 === this.currentStep ? 'active' : ''}
                            ${index + 1 < this.currentStep ? 'completed' : ''}`;

                        const stepNumber = document.createElement('div');
                        stepNumber.className = 'step-number';
                        stepNumber.innerHTML = index + 1 < this.currentStep ?
                            '<i class="fas fa-check"></i>' : (index + 1);

                        const stepLabel = document.createElement('div');
                        stepLabel.className = 'step-label';
                        stepLabel.textContent = step;

                        stepElement.appendChild(stepNumber);
                        stepElement.appendChild(stepLabel);

                        stepperWrapper.appendChild(stepElement);

                        if (index < this.steps.length - 1) {
                            const connector = document.createElement('div');
                            connector.className = `step-connector ${index + 1 < this.currentStep ? 'completed' : ''}`;
                            stepperWrapper.appendChild(connector);
                        }
                    });

                    this.element.innerHTML = '';
                    this.element.appendChild(stepperWrapper);
                }

                updateStep(stepNumber) {
                    this.currentStep = stepNumber;
                    this.render();
                }
            }

            // Skills Autocomplete Component
            class SkillAutocomplete {
                constructor(inputElement, skillsArray) {
                    this.input = inputElement;
                    this.skills = skillsArray;
                    this.suggestionsContainer = document.createElement('div');
                    this.suggestionsContainer.className = 'skill-suggestions';
                    this.input.parentNode.insertBefore(this.suggestionsContainer, this.input.nextSibling);

                    this.setupEventListeners();
                }

                setupEventListeners() {
                    // Input event to show suggestions
                    this.input.addEventListener('input', () => {
                        const value = this.input.value.toLowerCase();
                        if (value.length < 2) {
                            this.hideSuggestions();
                            return;
                        }

                        const filteredSkills = this.skills.filter(skill =>
                            skill.toLowerCase().includes(value)
                        ).slice(0, 5); // Limit to 5 suggestions

                        this.showSuggestions(filteredSkills);
                    });

                    // Blur event to hide suggestions when clicking elsewhere
                    document.addEventListener('click', (e) => {
                        if (e.target !== this.input && !this.suggestionsContainer.contains(e.target)) {
                            this.hideSuggestions();
                        }
                    });
                }

                showSuggestions(suggestions) {
                    if (suggestions.length === 0) {
                        this.hideSuggestions();
                        return;
                    }

                    this.suggestionsContainer.innerHTML = '';

                    suggestions.forEach(skill => {
                        const item = document.createElement('div');
                        item.className = 'suggestion-item';
                        item.textContent = skill;

                        item.addEventListener('click', () => {
                            this.input.value = skill;
                            this.hideSuggestions();
                            // Trigger add skill function if exists
                            if (typeof addSkill === 'function') {
                                addSkill(skill);
                                this.input.value = '';
                            }
                        });

                        this.suggestionsContainer.appendChild(item);
                    });

                    this.suggestionsContainer.style.display = 'block';

                    // Position the suggestions dropdown
                    const inputRect = this.input.getBoundingClientRect();
                    this.suggestionsContainer.style.width = `${inputRect.width}px`;
                    this.suggestionsContainer.style.top = `${inputRect.bottom}px`;
                    this.suggestionsContainer.style.left = `${inputRect.left}px`;
                }

                hideSuggestions() {
                    this.suggestionsContainer.style.display = 'none';
                }
            }

            // Photo Upload with Preview and Cropping
            class PhotoUpload {
                constructor(inputElement, previewElement, options = {}) {
                    this.input = inputElement;
                    this.preview = previewElement;
                    this.options = {
                        aspectRatio: 1,
                        cropable: true,
                        maxSize: 2, // MB
                        ...options
                    };

                    this.cropper = null;
                    this.setupEventListeners();
                }

                setupEventListeners() {
                    // Setup click handler for preview to trigger file input
                    const photoWrapper = this.preview.closest('.profile-photo-wrapper');
                    if (photoWrapper) {
                        photoWrapper.addEventListener('click', () => {
                            this.input.click();
                        });
                    }

                    this.input.addEventListener('change', this.handleFileSelect.bind(this));

                    // Setup drag and drop
                    const dropArea = this.preview.closest('.profile-photo-container') || this.preview.parentNode;

                    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                        dropArea.addEventListener(eventName, this.preventDefaults, false);
                    });

                    ['dragenter', 'dragover'].forEach(eventName => {
                        dropArea.addEventListener(eventName, () => {
                            dropArea.classList.add('highlight');
                        }, false);
                    });

                    ['dragleave', 'drop'].forEach(eventName => {
                        dropArea.addEventListener(eventName, () => {
                            dropArea.classList.remove('highlight');
                        }, false);
                    });

                    dropArea.addEventListener('drop', (e) => {
                        const dt = e.dataTransfer;
                        const files = dt.files;
                        if (files.length) {
                            this.handleFiles(files);
                        }
                    }, false);
                }

                preventDefaults(e) {
                    e.preventDefault();
                    e.stopPropagation();
                }

                handleFileSelect(e) {
                    if (e.target.files.length) {
                        this.handleFiles(e.target.files);
                    }
                }

                handleFiles(files) {
                    const file = files[0];

                    // Check file size
                    if (file.size > this.options.maxSize * 1024 * 1024) {
                        alert(`File is too big. Max size is ${this.options.maxSize}MB`);
                        return;
                    }

                    // Check file type
                    if (!file.type.match('image.*')) {
                        alert('Only image files are allowed');
                        return;
                    }

                    const reader = new FileReader();

                    reader.onload = (e) => {
                        if (this.options.cropable && typeof Cropper !== 'undefined') {
                            this.initCropper(e.target.result);
                        } else {
                            this.preview.src = e.target.result;
                            this.saveToLocalStorage(e.target.result);
                        }
                    };

                    reader.readAsDataURL(file);
                }

                initCropper(imageData) {
                    // Create modal for cropping
                    const modalHTML = `
                        <div class="photo-crop-modal">
                            <div class="photo-crop-content">
                                <div class="photo-crop-header">
                                    <h4>Crop Your Photo</h4>
                                    <button type="button" class="crop-close-btn">&times;</button>
                                </div>
                                <div class="photo-crop-body">
                                    <img src="${imageData}" id="crop-image">
                                </div>
                                <div class="photo-crop-footer">
                                    <button type="button" class="btn btn-secondary crop-cancel-btn">Cancel</button>
                                    <button type="button" class="btn btn-primary crop-save-btn">Save</button>
                                </div>
                            </div>
                        </div>
                    `;

                    // Add modal to body
                    const modalContainer = document.createElement('div');
                    modalContainer.innerHTML = modalHTML;
                    document.body.appendChild(modalContainer);

                    const modal = modalContainer.querySelector('.photo-crop-modal');
                    const cropImage = document.getElementById('crop-image');
                    const closeBtn = modal.querySelector('.crop-close-btn');
                    const cancelBtn = modal.querySelector('.crop-cancel-btn');
                    const saveBtn = modal.querySelector('.crop-save-btn');

                    // Show modal
                    modal.style.display = 'flex';

                    // Initialize cropper
                    this.cropper = new Cropper(cropImage, {
                        aspectRatio: this.options.aspectRatio,
                        viewMode: 1,
                        autoCropArea: 1
                    });

                    // Close handlers
                    const closeCropper = () => {
                        if (this.cropper) {
                            this.cropper.destroy();
                            this.cropper = null;
                        }
                        document.body.removeChild(modalContainer);
                    };

                    closeBtn.addEventListener('click', closeCropper);
                    cancelBtn.addEventListener('click', closeCropper);

                    // Save handler
                    saveBtn.addEventListener('click', () => {
                        const canvas = this.cropper.getCroppedCanvas({
                            width: 300,
                            height: 300
                        });

                        const croppedImageData = canvas.toDataURL('image/jpeg');
                        this.preview.src = croppedImageData;
                        this.saveToLocalStorage(croppedImageData);

                        closeCropper();
                    });
                }

                saveToLocalStorage(imageData) {
                    // Save to localStorage or hidden field
                    localStorage.setItem('cvProfilePhoto', imageData);

                    // Update hidden field if exists
                    const photoDataField = document.getElementById('photoDataField');
                    if (photoDataField) {
                        photoDataField.value = imageData;
                    }

                    // Trigger preview update if needed
                    const previewPhoto = document.querySelector('.preview-profile-photo');
                    if (previewPhoto) {
                        previewPhoto.src = imageData;
                    }
                }
            }

            // Section Sorter for Drag and Drop
            class SectionSorter {
                constructor(containerSelector, itemSelector, updateCallback) {
                    this.container = document.querySelector(containerSelector);
                    if (!this.container) return;

                    this.items = Array.from(this.container.querySelectorAll(itemSelector));
                    this.updateCallback = updateCallback;

                    this.initSortable();
                }

                initSortable() {
                    this.sortable = new Sortable(this.container, {
                        animation: 150,
                        ghostClass: 'sortable-ghost',
                        chosenClass: 'sortable-chosen',
                        dragClass: 'sortable-drag',
                        handle: '.drag-handle',
                        onEnd: (evt) => {
                            if (typeof this.updateCallback === 'function') {
                                this.updateCallback(evt);
                            }
                        }
                    });
                }

                updateItems() {
                    this.items = Array.from(this.container.querySelectorAll(itemSelector));
                }
            }

            // Interactive Template Preview
            class TemplatePreview {
                constructor() {
                    this.templateCards = document.querySelectorAll('.template-card');
                    this.previewContainer = document.getElementById('previewContent');
                    this.setupEventListeners();
                }

                setupEventListeners() {
                    this.templateCards.forEach(card => {
                        card.addEventListener('click', () => {
                            // Remove selected class from all cards
                            this.templateCards.forEach(c => {
                                c.classList.remove('selected-template');
                                c.classList.remove('selected-template-green');
                            });

                            // Add selected class to clicked card
                            const templateType = card.querySelector('input[type="radio"]').value;
                            if (templateType === 'green') {
                                card.classList.add('selected-template-green');
                            } else {
                                card.classList.add('selected-template');
                            }

                            // Check the radio button
                            card.querySelector('input[type="radio"]').checked = true;

                            // Update preview with selected template
                            this.updatePreview(templateType);
                        });
                    });
                }

                updatePreview(templateType) {
                    // Get form data for preview
                    const formData = new FormData(document.getElementById('cvForm'));
                    const previewData = {};

                    for (const [key, value] of formData.entries()) {
                        previewData[key] = value;
                    }

                    // Add template class to preview container
                    this.previewContainer.className = `preview-content template-${templateType}`;

                    // Update preview HTML based on template
                    if (templateType === 'green') {
                        this.renderGreenTemplate(previewData);
                    } else if (templateType === 'blue') {
                        this.renderBlueTemplate(previewData);
                    }
                }

                renderGreenTemplate(data) {
                    // Sample simplified green template preview
                    const photoSrc = localStorage.getItem('cvProfilePhoto') || '{{ asset('images/default-avatar.png') }}';

                    const html = `
                        <div class="green-template-preview">
                            <header class="preview-header">
                                <img src="${photoSrc}" class="preview-profile-photo" alt="Profile Photo">
                                <h2>${data.firstName || 'First'} ${data.lastName || 'Last'}</h2>
                                <p class="position">${data.position || 'Position'}</p>
                            </header>
                            <div class="preview-body">
                                <div class="preview-section">
                                    <h5><i class="fas fa-user"></i> Personal Information</h5>
                                    <p><i class="fas fa-envelope"></i> ${data.email || 'email@example.com'}</p>
                                    <p><i class="fas fa-phone"></i> ${data.phone || '+1234567890'}</p>
                                </div>

                                <div class="preview-section">
                                    <h5><i class="fas fa-graduation-cap"></i> Education</h5>
                                    <div class="preview-entry">
                                        <h6>Sample University</h6>
                                        <p>Degree in Field of Study</p>
                                    </div>
                                </div>

                                <div class="preview-section">
                                    <h5><i class="fas fa-briefcase"></i> Experience</h5>
                                    <div class="preview-entry">
                                        <h6>Sample Company</h6>
                                        <p>Job Title</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    this.previewContainer.innerHTML = html;
                }

                renderBlueTemplate(data) {
                    // Sample simplified blue template preview
                    const photoSrc = localStorage.getItem('cvProfilePhoto') || '{{ asset('images/default-avatar.png') }}';

                    const html = `
                        <div class="blue-template-preview">
                            <div class="preview-sidebar">
                                <img src="${photoSrc}" class="preview-profile-photo" alt="Profile Photo">
                                <div class="sidebar-section">
                                    <h5>Contact</h5>
                                    <p><i class="fas fa-envelope"></i> ${data.email || 'email@example.com'}</p>
                                    <p><i class="fas fa-phone"></i> ${data.phone || '+1234567890'}</p>
                                </div>

                                <div class="sidebar-section">
                                    <h5>Skills</h5>
                                    <div class="preview-skills">
                                        <span class="skill-badge">Sample Skill</span>
                                        <span class="skill-badge">Another Skill</span>
                                    </div>
                                </div>
                            </div>

                            <div class="preview-main">
                                <header>
                                    <h2>${data.firstName || 'First'} ${data.lastName || 'Last'}</h2>
                                    <p class="position">${data.position || 'Position'}</p>
                                </header>

                                <div class="preview-section">
                                    <h5><i class="fas fa-graduation-cap"></i> Education</h5>
                                    <div class="preview-entry">
                                        <h6>Sample University</h6>
                                        <p>Degree in Field of Study</p>
                                    </div>
                                </div>

                                <div class="preview-section">
                                    <h5><i class="fas fa-briefcase"></i> Experience</h5>
                                    <div class="preview-entry">
                                        <h6>Sample Company</h6>
                                        <p>Job Title</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    this.previewContainer.innerHTML = html;
                }
            }

            // Initialize Stepper
            const stepperContainer = document.getElementById('cv-stepper-container');
            if (stepperContainer) {
                const steps = ['Personal Info', 'Education', 'Experience', 'Skills', 'Languages', 'Additional', 'Review'];
                const currentStep = parseInt('{{ currentStep }}' || 1);
                const stepper = new CVStepper(stepperContainer, steps, currentStep);

                // Update stepper when changing sections
                document.querySelectorAll('.next-section, .prev-section, .btn-submit-review').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const nextStep = this.dataset.next || this.dataset.prev || 7;
                        stepper.updateStep(parseInt(nextStep));
                    });
                });
            }

            // Initialize Photo Upload
            const photoInput = document.getElementById('photoUpload');
            const photoPreview = document.getElementById('profilePhotoPreview');
            if (photoInput && photoPreview) {
                const photoUpload = new PhotoUpload(photoInput, photoPreview, {
                    aspectRatio: 1,
                    cropable: true,
                    maxSize: 5 // 5MB
                });

                // Check for existing photo data in localStorage
                const savedPhoto = localStorage.getItem('cvProfilePhoto');
                if (savedPhoto) {
                    photoPreview.src = savedPhoto;
                }
            }

            // Initialize Skills Autocomplete
            const skillInput = document.getElementById('skillInput');
            if (skillInput) {
                const commonSkills = [
                    'JavaScript', 'Python', 'Java', 'C++', 'C#', 'PHP', 'Swift', 'Kotlin',
                    'React', 'Angular', 'Vue.js', 'Node.js', 'Express', 'Django', 'Flask',
                    'SQL', 'MongoDB', 'Firebase', 'AWS', 'Azure', 'Docker', 'Kubernetes',
                    'Git', 'GitHub', 'GitLab', 'Jira', 'Agile', 'Scrum', 'Project Management',
                    'UI/UX Design', 'Adobe Photoshop', 'Illustrator', 'Figma', 'Sketch'
                ];
                new SkillAutocomplete(skillInput, commonSkills);

                // Handle adding skills
                const addSkillBtn = document.getElementById('addSkillBtn');
                const skillsContainer = document.getElementById('skillsContainer');
                const skillsEmptyState = document.getElementById('skillsEmptyState');

                function addSkill(skill) {
                    if (!skill) return;

                    const skillBadge = document.createElement('div');
                    skillBadge.className = 'badge bg-light text-dark p-2 mb-2 me-2';
                    skillBadge.style.fontSize = '1rem';

                    const skillText = document.createElement('span');
                    skillText.textContent = skill;

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'btn-close ms-2';
                    removeBtn.setAttribute('aria-label', 'Remove');
                    removeBtn.style.fontSize = '0.5rem';

                    removeBtn.addEventListener('click', function() {
                        skillBadge.remove();
                        updateHiddenSkills();

                        if (skillsContainer.children.length === 0) {
                            skillsEmptyState.style.display = 'block';
                        }
                    });

                    skillBadge.appendChild(skillText);
                    skillBadge.appendChild(removeBtn);
                    skillsContainer.appendChild(skillBadge);

                    // Hide empty state if visible
                    skillsEmptyState.style.display = 'none';

                    // Add to hidden input field
                    updateHiddenSkills();
                }

                function updateHiddenSkills() {
                    const skills = Array.from(skillsContainer.children).map(badge => {
                        return badge.querySelector('span').textContent;
                    });

                    // Create or update hidden field
                    let hiddenField = document.getElementById('skillsHidden');
                    if (!hiddenField) {
                        hiddenField = document.createElement('input');
                        hiddenField.type = 'hidden';
                        hiddenField.name = 'skills';
                        hiddenField.id = 'skillsHidden';
                        skillsContainer.parentNode.appendChild(hiddenField);
                    }

                    hiddenField.value = JSON.stringify(skills);
                }

                // Add skill event listeners
                addSkillBtn.addEventListener('click', function() {
                    addSkill(skillInput.value);
                    skillInput.value = '';
                });

                skillInput.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        addSkill(skillInput.value);
                        skillInput.value = '';
                    }
                });

                // Quick skill buttons
                document.querySelectorAll('.quick-skill').forEach(btn => {
                    btn.addEventListener('click', function() {
                        addSkill(this.textContent);
                    });
                });
            }

            // Initialize Language functionality
            const languageInput = document.getElementById('languageInput');
            const proficiencySelect = document.getElementById('proficiencySelect');
            const addLanguageBtn = document.getElementById('addLanguageBtn');
            const languagesContainer = document.getElementById('languagesContainer');
            const languagesEmptyState = document.getElementById('languagesEmptyState');

            if (addLanguageBtn) {
                function addLanguage(language, proficiency) {
                    if (!language || !proficiency) return;

                    const langBadge = document.createElement('div');
                    langBadge.className = 'language-badge';

                    const langText = document.createElement('span');
                    langText.innerHTML = `<strong>${language}</strong> - ${proficiency}`;

                    const removeBtn = document.createElement('button');
                    removeBtn.innerHTML = '&times;';

                    removeBtn.addEventListener('click', function() {
                        langBadge.remove();
                        updateHiddenLanguages();

                        if (languagesContainer.children.length === 0) {
                            languagesEmptyState.style.display = 'block';
                        }
                    });

                    langBadge.appendChild(langText);
                    langBadge.appendChild(removeBtn);
                    languagesContainer.appendChild(langBadge);

                    // Hide empty state if visible
                    languagesEmptyState.style.display = 'none';

                    // Update hidden input
                    updateHiddenLanguages();
                }

                function updateHiddenLanguages() {
                    const languages = Array.from(languagesContainer.children).map(badge => {
                        const langText = badge.querySelector('span').textContent;
                        const parts = langText.split(' - ');
                        return {
                            language: parts[0],
                            proficiency: parts[1]
                        };
                    });

                    // Create or update hidden field
                    let hiddenField = document.getElementById('languagesHidden');
                    if (!hiddenField) {
                        hiddenField = document.createElement('input');
                        hiddenField.type = 'hidden';
                        hiddenField.name = 'languages';
                        hiddenField.id = 'languagesHidden';
                        languagesContainer.parentNode.appendChild(hiddenField);
                    }

                    hiddenField.value = JSON.stringify(languages);
                }

                addLanguageBtn.addEventListener('click', function() {
                    addLanguage(languageInput.value, proficiencySelect.value);
                    languageInput.value = '';
                    proficiencySelect.selectedIndex = 0;
                });

                // Quick language buttons
                document.querySelectorAll('.quick-language').forEach(btn => {
                    btn.addEventListener('click', function() {
                        addLanguage(this.dataset.lang, this.dataset.level);
                    });
                });
            }

            // Initialize Education functionality
            const educationEntries = document.getElementById('educationEntries');
            const addEducationBtn = document.getElementById('addEducation');
            const addFirstEducationBtn = document.getElementById('addFirstEducation');
            const educationEmptyState = document.getElementById('educationEmptyState');
            const addMoreEducationBtnContainer = document.getElementById('addMoreEducationBtnContainer');

            if (educationEntries && (addEducationBtn || addFirstEducationBtn)) {
                let educationCounter = 0;

                function addEducationEntry() {
                    const template = document.getElementById('educationEntryTemplate');
                    const clone = document.importNode(template.content, true);

                    // Update IDs to be unique
                    const entryId = `education-${educationCounter++}`;
                    clone.querySelector('.education-entry').id = entryId;

                    // Add to container
                    educationEntries.appendChild(clone);

                    // Initialize datepickers for this entry
                    initDatePickers(document.getElementById(entryId));

                    // Show "add more" button and hide empty state
                    educationEmptyState.style.display = 'none';
                    addMoreEducationBtnContainer.style.display = 'block';

                    // Add remove handler
                    document.getElementById(entryId).querySelector('.remove-education').addEventListener('click', function() {
                        document.getElementById(entryId).remove();

                        // Show empty state if no entries left
                        if (educationEntries.querySelectorAll('.education-entry').length === 0) {
                            educationEmptyState.style.display = 'block';
                            addMoreEducationBtnContainer.style.display = 'none';
                        }
                    });

                    // Character counter for description
                    const descriptionInput = document.getElementById(entryId).querySelector('.description-input');
                    const charCount = document.getElementById(entryId).querySelector('.char-count');
                    if (descriptionInput && charCount) {
                        descriptionInput.addEventListener('input', function() {
                            charCount.textContent = this.value.length;
                            if (this.value.length > 500) {
                                this.value = this.value.substring(0, 500);
                                charCount.textContent = 500;
                            }
                        });
                    }

                    // Current checkbox handler
                    const currentCheckbox = document.getElementById(entryId).querySelector('.current-checkbox');
                    const endDateInput = document.getElementById(entryId).querySelector('.end-date-input');
                    if (currentCheckbox && endDateInput) {
                        currentCheckbox.addEventListener('change', function() {
                            if (this.checked) {
                                endDateInput.value = 'Present';
                                endDateInput.disabled = true;
                            } else {
                                endDateInput.value = '';
                                endDateInput.disabled = false;
                            }
                        });
                    }
                }

                // Initialize drag and drop for education entries
                function initEducationSorter() {
                    new SectionSorter('#educationEntries', '.education-entry', function(evt) {
                        console.log('Education reordered:', evt.oldIndex, evt.newIndex);
                    });
                }

                // Add education button handlers
                if (addEducationBtn) {
                    addEducationBtn.addEventListener('click', function() {
                        addEducationEntry();
                        initEducationSorter();
                    });
                }

                if (addFirstEducationBtn) {
                    addFirstEducationBtn.addEventListener('click', function() {
                        addEducationEntry();
                        initEducationSorter();
                    });
                }
            }

            // Initialize Experience functionality
            const experienceEntries = document.getElementById('experienceEntries');
            const addExperienceBtn = document.getElementById('addExperience');
            const addFirstExperienceBtn = document.getElementById('addFirstExperience');
            const experienceEmptyState = document.getElementById('experienceEmptyState');
            const addMoreExperienceBtnContainer = document.getElementById('addMoreExperienceBtnContainer');

            if (experienceEntries && (addExperienceBtn || addFirstExperienceBtn)) {
                let experienceCounter = 0;

                function addExperienceEntry() {
                    const template = document.getElementById('experienceEntryTemplate');
                    const clone = document.importNode(template.content, true);

                    // Update IDs to be unique
                    const entryId = `experience-${experienceCounter++}`;
                    clone.querySelector('.experience-entry').id = entryId;

                    // Add to container
                    experienceEntries.appendChild(clone);

                    // Initialize datepickers for this entry
                    initDatePickers(document.getElementById(entryId));

                    // Show "add more" button and hide empty state
                    experienceEmptyState.style.display = 'none';
                    addMoreExperienceBtnContainer.style.display = 'block';

                    // Add remove handler
                    document.getElementById(entryId).querySelector('.remove-experience').addEventListener('click', function() {
                        document.getElementById(entryId).remove();

                        // Show empty state if no entries left
                        if (experienceEntries.querySelectorAll('.experience-entry').length === 0) {
                            experienceEmptyState.style.display = 'block';
                            addMoreExperienceBtnContainer.style.display = 'none';
                        }
                    });

                    // Character counter for description
                    const descriptionInput = document.getElementById(entryId).querySelector('.description-input');
                    const charCount = document.getElementById(entryId).querySelector('.char-count');
                    if (descriptionInput && charCount) {
                        descriptionInput.addEventListener('input', function() {
                            charCount.textContent = this.value.length;
                            if (this.value.length > 500) {
                                this.value = this.value.substring(0, 500);
                                charCount.textContent = 500;
                            }
                        });
                    }

                    // Current checkbox handler
                    const currentCheckbox = document.getElementById(entryId).querySelector('.current-checkbox');
                    const endDateInput = document.getElementById(entryId).querySelector('.end-date-input');
                    if (currentCheckbox && endDateInput) {
                        currentCheckbox.addEventListener('change', function() {
                            if (this.checked) {
                                endDateInput.value = 'Present';
                                endDateInput.disabled = true;
                            } else {
                                endDateInput.value = '';
                                endDateInput.disabled = false;
                            }
                        });
                    }
                }

                // Initialize drag and drop for experience entries
                function initExperienceSorter() {
                    new SectionSorter('#experienceEntries', '.experience-entry', function(evt) {
                        console.log('Experience reordered:', evt.oldIndex, evt.newIndex);
                    });
                }

                // Add experience button handlers
                if (addExperienceBtn) {
                    addExperienceBtn.addEventListener('click', function() {
                        addExperienceEntry();
                        initExperienceSorter();
                    });
                }

                if (addFirstExperienceBtn) {
                    addFirstExperienceBtn.addEventListener('click', function() {
                        addExperienceEntry();
                        initExperienceSorter();
                    });
                }
            }

            // Initialize Date Pickers
            function initDatePickers(container = document) {
                const dateInputs = container.querySelectorAll('.date-input');
                dateInputs.forEach(input => {
                    flatpickr(input, {
                        dateFormat: "Y-m-d",
                        allowInput: true,
                        disableMobile: false
                    });
                });
            }
            initDatePickers();

            // Initialize Template Preview
            new TemplatePreview();

            // CV Preview Panel functionality
            const previewBtn = document.querySelector('.btn-preview');
            const cvPreview = document.getElementById('cvPreview');
            const closePreviewBtn = document.getElementById('closePreview');

            if (previewBtn && cvPreview) {
                previewBtn.addEventListener('click', function() {
                    updatePreviewContent();
                    cvPreview.classList.add('show');
                });

                if (closePreviewBtn) {
                    closePreviewBtn.addEventListener('click', function() {
                        cvPreview.classList.remove('show');
                    });
                }

                function updatePreviewContent() {
                    const previewContent = document.getElementById('previewContent');
                    if (!previewContent) return;

                    const formData = new FormData(document.getElementById('cvForm'));
                    const data = {};

                    for (const [key, value] of formData.entries()) {
                        data[key] = value;
                    }

                    const photoSrc = localStorage.getItem('cvProfilePhoto') || '{{ asset('images/default-avatar.png') }}';

                    // Create preview HTML
                    let html = `
                        <div class="preview-section">
                            <img src="${photoSrc}" class="preview-profile-photo" alt="Profile Photo">
                            <h4 class="text-center">${data.firstName || ''} ${data.lastName || ''}</h4>
                            <p class="text-center text-muted">${data.position || ''}</p>
                        </div>

                        <div class="preview-section">
                            <h5><i class="fas fa-user"></i> Personal Information</h5>
                            <div class="row">
                                <div class="col-6">
                                    <strong>Email:</strong> ${data.email || ''}
                                </div>
                                <div class="col-6">
                                    <strong>Phone:</strong> ${data.phone || ''}
                                </div>
                            </div>
                        </div>
                    `;

                    // Add education section if entries exist
                    const educationEntries = document.querySelectorAll('.education-entry');
                    if (educationEntries.length > 0) {
                        html += `
                            <div class="preview-section">
                                <h5><i class="fas fa-graduation-cap"></i> Education</h5>
                        `;

                        educationEntries.forEach(entry => {
                            const institution = entry.querySelector('.institution-input')?.value || '';
                            const degree = entry.querySelector('.degree-input')?.value || '';

                            html += `
                                <div class="preview-item">
                                    <h6>${institution}</h6>
                                    <p>${degree}</p>
                                </div>
                            `;
                        });

                        html += `</div>`;
                    }

                    // Add experience section if entries exist
                    const experienceEntries = document.querySelectorAll('.experience-entry');
                    if (experienceEntries.length > 0) {
                        html += `
                            <div class="preview-section">
                                <h5><i class="fas fa-briefcase"></i> Experience</h5>
                        `;

                        experienceEntries.forEach(entry => {
                            const company = entry.querySelector('.company-input')?.value || '';
                            const position = entry.querySelector('.position-input')?.value || '';

                            html += `
                                <div class="preview-item">
                                    <h6>${company}</h6>
                                    <p>${position}</p>
                                </div>
                            `;
                        });

                        html += `</div>`;
                    }

                    // Add skills section if skills exist
                    const skillsContainer = document.getElementById('skillsContainer');
                    if (skillsContainer && skillsContainer.children.length > 0) {
                        html += `
                            <div class="preview-section">
                                <h5><i class="fas fa-tools"></i> Skills</h5>
                                <div class="d-flex flex-wrap gap-2">
                        `;

                        Array.from(skillsContainer.children).forEach(skill => {
                            const skillText = skill.querySelector('span').textContent;
                            html += `<span class="badge bg-light text-dark p-2">${skillText}</span>`;
                        });

                        html += `
                                </div>
                            </div>
                        `;
                    }

                    previewContent.innerHTML = html;
                }
            }

            // Navigation between sections
            document.querySelectorAll('.next-section, .prev-section').forEach(btn => {
                btn.addEventListener('click', function() {
                    const currentSection = document.querySelector('.form-section-page.active');
                    let targetSectionId;

                    if (this.classList.contains('next-section')) {
                        targetSectionId = `section-${this.dataset.next}`;
                    } else {
                        targetSectionId = `section-${this.dataset.prev}`;
                    }

                    const targetSection = document.getElementById(targetSectionId);

                    if (currentSection && targetSection) {
                        currentSection.classList.remove('active');
                        targetSection.classList.add('active');
                    }
                });
            });

            // Review button handler
            document.querySelector('.btn-submit-review')?.addEventListener('click', function() {
                const currentSection = document.querySelector('.form-section-page.active');
                const reviewSection = document.getElementById('section-7');

                if (currentSection && reviewSection) {
                    generateReviewContent();
                    currentSection.classList.remove('active');
                    reviewSection.classList.add('active');
                }
            });

            // Generate review content
            function generateReviewContent() {
                const reviewContent = document.getElementById('reviewContent');
                if (!reviewContent) return;

                const formData = new FormData(document.getElementById('cvForm'));
                const data = {};

                for (const [key, value] of formData.entries()) {
                    data[key] = value;
                }

                const photoSrc = localStorage.getItem('cvProfilePhoto') || '{{ asset('images/default-avatar.png') }}';

                let html = `
                    <div class="row mb-4">
                        <div class="col-md-3 text-center">
                            <img src="${photoSrc}" class="img-thumbnail rounded-circle mb-2" style="width: 120px; height: 120px; object-fit: cover;" alt="Profile Photo">
                        </div>
                        <div class="col-md-9">
                            <h3>${data.firstName || ''} ${data.lastName || ''}</h3>
                            <h5 class="text-muted">${data.position || ''}</h5>
                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <p><i class="fas fa-envelope me-2"></i>${data.email || ''}</p>
                                </div>
                                <div class="col-md-6">
                                    <p><i class="fas fa-phone me-2"></i>${data.phone || ''}</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="accordion" id="reviewAccordion">
                `;

                // Personal Information section
                html += `
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#personalInfoCollapse" aria-expanded="true" aria-controls="personalInfoCollapse">
                                <i class="fas fa-user me-2"></i>Personal Information
                            </button>
                        </h2>
                        <div id="personalInfoCollapse" class="accordion-collapse collapse show" data-bs-parent="#reviewAccordion">
                            <div class="accordion-body">
                                <div class="row">
                                    <div class="col-md-6 mb-2">
                                        <strong>Email:</strong> ${data.email || ''}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <strong>Phone:</strong> ${data.phone || ''}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <strong>Address:</strong> ${data.address || ''}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <strong>Website:</strong> ${data.website || ''}
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <strong>LinkedIn:</strong> ${data.linkedin || ''}
                                    </div>
                                </div>
                                <div class="mt-2">
                                    <strong>Professional Summary:</strong>
                                    <p>${data.summary || ''}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Education section
                const educationEntries = document.querySelectorAll('.education-entry');
                html += `
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#educationCollapse" aria-expanded="false" aria-controls="educationCollapse">
                                <i class="fas fa-graduation-cap me-2"></i>Education
                            </button>
                        </h2>
                        <div id="educationCollapse" class="accordion-collapse collapse" data-bs-parent="#reviewAccordion">
                            <div class="accordion-body">
                `;

                if (educationEntries.length > 0) {
                    educationEntries.forEach(entry => {
                        const institution = entry.querySelector('.institution-input')?.value || '';
                        const degree = entry.querySelector('.degree-input')?.value || '';
                        const field = entry.querySelector('.field-input')?.value || '';
                        const startDate = entry.querySelector('.start-date-input')?.value || '';
                        const endDate = entry.querySelector('.end-date-input')?.value || '';

                        html += `
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">${institution}</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">${degree} ${field ? 'in ' + field : ''}</h6>
                                    <p class="card-text">
                                        <small>${startDate} - ${endDate}</small>
                                    </p>
                                </div>
                            </div>
                        `;
                    });
                } else {
                    html += `<p class="text-muted">No education entries added.</p>`;
                }

                html += `
                            </div>
                        </div>
                    </div>
                `;

                // Experience section
                const experienceEntries = document.querySelectorAll('.experience-entry');
                html += `
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#experienceCollapse" aria-expanded="false" aria-controls="experienceCollapse">
                                <i class="fas fa-briefcase me-2"></i>Experience
                            </button>
                        </h2>
                        <div id="experienceCollapse" class="accordion-collapse collapse" data-bs-parent="#reviewAccordion">
                            <div class="accordion-body">
                `;

                if (experienceEntries.length > 0) {
                    experienceEntries.forEach(entry => {
                        const company = entry.querySelector('.company-input')?.value || '';
                        const position = entry.querySelector('.position-input')?.value || '';
                        const location = entry.querySelector('.location-input')?.value || '';
                        const startDate = entry.querySelector('.start-date-input')?.value || '';
                        const endDate = entry.querySelector('.end-date-input')?.value || '';
                        const description = entry.querySelector('.description-input')?.value || '';

                        html += `
                            <div class="card mb-3">
                                <div class="card-body">
                                    <h5 class="card-title">${position}</h5>
                                    <h6 class="card-subtitle mb-2 text-muted">${company} ${location ? '- ' + location : ''}</h6>
                                    <p class="card-text">
                                        <small>${startDate} - ${endDate}</small>
                                    </p>
                                    <p class="card-text">${description}</p>
                                </div>
                            </div>
                        `;
                    });
                } else {
                    html += `<p class="text-muted">No experience entries added.</p>`;
                }

                html += `
                            </div>
                        </div>
                    </div>
                `;

                // Complete the accordion
                html += `</div>`;

                reviewContent.innerHTML = html;
            }

            // PDF Generation functionality
            const generateBtn = document.getElementById('generateBtn');
            const directDownloadBtn = document.getElementById('directDownloadBtn');
            const simpleDownloadBtn = document.getElementById('simpleDownloadBtn');
            const statusMessage = document.getElementById('statusMessage');

            if (generateBtn) {
                generateBtn.addEventListener('click', function() {
                    // Show status message
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                        statusMessage.className = 'alert alert-info mt-3';
                        statusMessage.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating your CV... Please wait.';
                    }

                    // Ensure photo data is included
                    const photoDataField = document.getElementById('photoDataField');
                    if (photoDataField) {
                        const photoData = localStorage.getItem('cvProfilePhoto');
                        if (photoData) {
                            photoDataField.value = photoData;
                        }
                    }

                    // Submit the form
                    const cvForm = document.getElementById('cvForm');
                    if (cvForm) {
                        // Create a duplicate form for submission
                        const submitForm = cvForm.cloneNode(true);
                        submitForm.target = '_blank';
                        document.body.appendChild(submitForm);
                        submitForm.submit();
                        document.body.removeChild(submitForm);

                        // Show success message after a delay
                        setTimeout(() => {
                            if (statusMessage) {
                                statusMessage.className = 'alert alert-success mt-3';
                                statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i>Your CV has been generated! Check your downloads.';
                            }
                        }, 2000);
                    }
                });
            }

            // Direct download button
            if (directDownloadBtn) {
                directDownloadBtn.addEventListener('click', function() {
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                        statusMessage.className = 'alert alert-info mt-3';
                        statusMessage.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Downloading your CV... Please wait.';
                    }

                    // Create direct download form
                    const directForm = document.createElement('form');
                    directForm.method = 'post';
                    directForm.action = '/cv-generator/generate';
                    directForm.target = '_blank';

                    // Add minimal required fields
                    const fields = [
                        { name: 'firstName', value: document.querySelector('input[name="firstName"]')?.value || 'Direct' },
                        { name: 'lastName', value: document.querySelector('input[name="lastName"]')?.value || 'Download' },
                        { name: 'email', value: document.querySelector('input[name="email"]')?.value || 'direct@example.com' },
                        { name: 'position', value: document.querySelector('input[name="position"]')?.value || 'Test Position' },
                        { name: 'template', value: document.querySelector('input[name="template"]:checked')?.value || 'green' },
                        { name: 'photoData', value: localStorage.getItem('cvProfilePhoto') || '' },
                        { name: 'directDownload', value: 'true' }
                    ];

                    fields.forEach(field => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = field.name;
                        input.value = field.value;
                        directForm.appendChild(input);
                    });

                    // Add to document and submit
                    document.body.appendChild(directForm);
                    directForm.submit();
                    document.body.removeChild(directForm);

                    // Show success message
                    setTimeout(() => {
                        if (statusMessage) {
                            statusMessage.className = 'alert alert-success mt-3';
                            statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i>Your CV has been generated! Check your downloads.';
                        }
                    }, 2000);
                });
            }

            // Simple CV button
            if (simpleDownloadBtn) {
                simpleDownloadBtn.addEventListener('click', function() {
                    if (statusMessage) {
                        statusMessage.style.display = 'block';
                        statusMessage.className = 'alert alert-info mt-3';
                        statusMessage.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Generating simple CV... Please wait.';
                    }

                    // Create simple form
                    const simpleForm = document.createElement('form');
                    simpleForm.method = 'post';
                    simpleForm.action = '/cv-generator/generate';
                    simpleForm.target = '_blank';

                    // Add minimal fields
                    const fields = [
                        { name: 'firstName', value: 'Test' },
                        { name: 'lastName', value: 'User' },
                        { name: 'email', value: 'test@example.com' },
                        { name: 'position', value: 'Test Position' },
                        { name: 'template', value: 'green' },
                        { name: 'simpleTest', value: 'true' }
                    ];

                    fields.forEach(field => {
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = field.name;
                        input.value = field.value;
                        simpleForm.appendChild(input);
                    });

                    // Add to document and submit
                    document.body.appendChild(simpleForm);
                    simpleForm.submit();
                    document.body.removeChild(simpleForm);

                    // Show success message
                    setTimeout(() => {
                        if (statusMessage) {
                            statusMessage.className = 'alert alert-success mt-3';
                            statusMessage.innerHTML = '<i class="fas fa-check-circle me-2"></i>Simple CV generated! Check your downloads.';
                        }
                    }, 2000);
                });
            }

            // Character counter for summary
            const summaryInput = document.getElementById('summary');
            const summaryCharCount = document.getElementById('summaryCharCount');
            if (summaryInput && summaryCharCount) {
                summaryInput.addEventListener('input', function() {
                    summaryCharCount.textContent = this.value.length;
                    if (this.value.length > 500) {
                        this.value = this.value.substring(0, 500);
                        summaryCharCount.textContent = 500;
                    }
                });
            }

            // References toggle
            const includeReferencesCheckbox = document.getElementById('includeReferences');
            const referencesSection = document.getElementById('referencesSection');
            if (includeReferencesCheckbox && referencesSection) {
                includeReferencesCheckbox.addEventListener('change', function() {
                    referencesSection.style.display = this.checked ? 'block' : 'none';
                });
            }

            // Reference upon request toggle
            const referenceUponRequestCheckbox = document.getElementById('referenceUponRequest');
            const referenceFields = document.querySelectorAll('#referencesSection .form-floating');
            if (referenceUponRequestCheckbox && referenceFields.length) {
                referenceUponRequestCheckbox.addEventListener('change', function() {
                    referenceFields.forEach(field => {
                        field.style.display = this.checked ? 'none' : 'block';
                    });
                });
            }

            // Debug tools
            const viewFormDataBtn = document.getElementById('viewFormDataBtn');
            const clearCacheBtn = document.getElementById('clearCacheBtn');

            if (viewFormDataBtn) {
                viewFormDataBtn.addEventListener('click', function() {
                    // Get form data
                    const formData = new FormData(document.getElementById('cvForm'));
                    const dataObj = {};
                    for (const [key, value] of formData.entries()) {
                        dataObj[key] = value;
                    }

                    // Create modal to display data
                    const modalHTML = `
                        <div class="modal fade" id="formDataModal" tabindex="-1" aria-labelledby="formDataModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="formDataModalLabel">Form Data</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <pre>${JSON.stringify(dataObj, null, 2)}</pre>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    // Add to document
                    const modalContainer = document.createElement('div');
                    modalContainer.innerHTML = modalHTML;
                    document.body.appendChild(modalContainer);

                    // Show modal using Bootstrap
                    const modal = new bootstrap.Modal(document.getElementById('formDataModal'));
                    modal.show();

                    // Remove from document when hidden
                    document.getElementById('formDataModal').addEventListener('hidden.bs.modal', function() {
                        document.body.removeChild(modalContainer);
                    });
                });
            }

            if (clearCacheBtn) {
                clearCacheBtn.addEventListener('click', function() {
                    localStorage.clear();
                    alert('Local storage cleared! The page will now reload.');
                    location.reload();
                });
            }

            // Initialize template selection
            const greenTemplateCard = document.getElementById('greenTemplateCard');
            const blueTemplateCard = document.getElementById('blueTemplateCard');

            if (greenTemplateCard && blueTemplateCard) {
                // Initially mark the green template as selected
                greenTemplateCard.classList.add('selected-template-green');

                greenTemplateCard.addEventListener('click', function() {
                    document.getElementById('template-green').checked = true;
                    this.classList.add('selected-template-green');
                    blueTemplateCard.classList.remove('selected-template');
                });

                blueTemplateCard.addEventListener('click', function() {
                    document.getElementById('template-blue').checked = true;
                    this.classList.add('selected-template');
                    greenTemplateCard.classList.remove('selected-template-green');
                });
            }

            // Enhanced form validation
            const forms = document.querySelectorAll('.needs-validation');
            forms.forEach(form => {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });

            // Certifications functionality
            const addCertificationBtn = document.getElementById('addCertificationBtn');
            const certificationInput = document.getElementById('certificationInput');
            const certificationsList = document.getElementById('certificationsList');
            const certificationsEmptyState = document.getElementById('certificationsEmptyState');

            if (addCertificationBtn && certificationInput && certificationsList) {
                function addCertification(certText) {
                    if (!certText) return;

                    const listItem = document.createElement('div');
                    listItem.className = 'list-group-item d-flex justify-content-between align-items-center fade-in';

                    const certContent = document.createElement('span');
                    certContent.textContent = certText;

                    const removeBtn = document.createElement('button');
                    removeBtn.className = 'btn btn-sm btn-outline-danger';
                    removeBtn.innerHTML = '<i class="fas fa-times"></i>';
                    removeBtn.addEventListener('click', function() {
                        listItem.remove();
                        updateHiddenCertifications();

                        if (certificationsList.children.length === 0) {
                            certificationsEmptyState.style.display = 'block';
                        }
                    });

                    listItem.appendChild(certContent);
                    listItem.appendChild(removeBtn);
                    certificationsList.appendChild(listItem);

                    // Hide empty state
                    if (certificationsEmptyState) {
                        certificationsEmptyState.style.display = 'none';
                    }

                    // Update hidden field
                    updateHiddenCertifications();
                }

                function updateHiddenCertifications() {
                    const certifications = Array.from(certificationsList.children).map(item => {
                        return item.querySelector('span').textContent;
                    });

                    // Create or update hidden field
                    let hiddenField = document.getElementById('certificationsHidden');
                    if (!hiddenField) {
                        hiddenField = document.createElement('input');
                        hiddenField.type = 'hidden';
                        hiddenField.name = 'certifications';
                        hiddenField.id = 'certificationsHidden';
                        certificationsList.parentNode.appendChild(hiddenField);
                    }

                    hiddenField.value = JSON.stringify(certifications);
                }

                addCertificationBtn.addEventListener('click', function() {
                    addCertification(certificationInput.value);
                    certificationInput.value = '';
                });

                certificationInput.addEventListener('keypress', function(event) {
                    if (event.key === 'Enter') {
                        event.preventDefault();
                        addCertification(this.value);
                        this.value = '';
                    }
                });
            }

            // Autofill button functionality
            const autofillBtn = document.getElementById('autofillBtn');
            if (autofillBtn) {
                autofillBtn.addEventListener('click', function() {
                    // Get sample data
                    let sampleData = {};
                    const sampleDataElement = document.getElementById('sampleData');
                    if (sampleDataElement && sampleDataElement.dataset.sample) {
                        try {
                            sampleData = JSON.parse(sampleDataElement.dataset.sample);
                        } catch (e) {
                            console.error('Error parsing sample data:', e);
                        }
                    } else {
                        // Default sample data if none provided
                        sampleData = {
                            firstName: 'Mohamed',
                            lastName: 'Abidi',
                            email: 'mohamed.abidi@esprit.tn',
                            phone: '+216 55 123 456',
                            position: 'Fullstack Developer',
                            address: '123 Main Street, Tunis, Tunisia',
                            website: 'www.mohamedabidi.com',
                            linkedin: 'linkedin.com/in/mohamedabidi',
                            summary: 'Experienced full-stack developer with expertise in modern web technologies. Strong problem-solving skills and passion for creating efficient, scalable applications.'
                        };
                    }

                    // Fill personal info
                    document.getElementById('firstName').value = sampleData.firstName || '';
                    document.getElementById('lastName').value = sampleData.lastName || '';
                    document.getElementById('email').value = sampleData.email || '';
                    document.getElementById('phone').value = sampleData.phone || '';
                    document.getElementById('position').value = sampleData.position || '';
                    document.getElementById('address').value = sampleData.address || '';
                    document.getElementById('website').value = sampleData.website || '';
                    document.getElementById('linkedin').value = sampleData.linkedin || '';
                    document.getElementById('summary').value = sampleData.summary || '';

                    if (document.getElementById('summaryCharCount')) {
                        document.getElementById('summaryCharCount').textContent = document.getElementById('summary').value.length;
                    }

                    // Add sample education
                    if (addFirstEducationBtn) {
                        addFirstEducationBtn.click();

                        // Wait for entry to be created
                        setTimeout(() => {
                            const educationEntry = document.querySelector('.education-entry');
                            if (educationEntry) {
                                educationEntry.querySelector('.institution-input').value = 'ESPRIT School of Engineering';
                                educationEntry.querySelector('.degree-input').value = 'Bachelor of Science';
                                educationEntry.querySelector('.field-input').value = 'Computer Science';
                                educationEntry.querySelector('.location-input').value = 'Tunis, Tunisia';
                                educationEntry.querySelector('.start-date-input').value = '2019-09-01';
                                educationEntry.querySelector('.end-date-input').value = '2023-06-30';

                                // Add another education entry
                                if (addEducationBtn) {
                                    addEducationBtn.click();

                                    setTimeout(() => {
                                        const secondEducation = document.querySelectorAll('.education-entry')[1];
                                        if (secondEducation) {
                                            secondEducation.querySelector('.institution-input').value = 'University of Technology';
                                            secondEducation.querySelector('.degree-input').value = 'Master of Science';
                                            secondEducation.querySelector('.field-input').value = 'Software Engineering';
                                            secondEducation.querySelector('.location-input').value = 'Tunis, Tunisia';
                                            secondEducation.querySelector('.start-date-input').value = '2023-09-01';
                                            secondEducation.querySelector('.end-date-input').value = 'Present';
                                            secondEducation.querySelector('.current-checkbox').checked = true;

                                            const descInput = secondEducation.querySelector('.description-input');
                                            if (descInput) {
                                                descInput.value = 'Focusing on advanced software architecture, cloud computing, and AI applications. Working on research project related to distributed systems.';
                                                const charCount = secondEducation.querySelector('.char-count');
                                                if (charCount) {
                                                    charCount.textContent = descInput.value.length;
                                                }
                                            }
                                        }
                                    }, 100);
                                }
                            }
                        }, 100);
                    }

                    // Add sample experience
                    if (addFirstExperienceBtn) {
                        addFirstExperienceBtn.click();

                        // Wait for entry to be created
                        setTimeout(() => {
                            const experienceEntry = document.querySelector('.experience-entry');
                            if (experienceEntry) {
                                experienceEntry.querySelector('.company-input').value = 'Tech Innovations Inc.';
                                experienceEntry.querySelector('.position-input').value = 'Junior Developer';
                                experienceEntry.querySelector('.location-input').value = 'Tunis, Tunisia';
                                experienceEntry.querySelector('.start-date-input').value = '2022-01-01';
                                experienceEntry.querySelector('.end-date-input').value = '2023-12-31';

                                const descInput = experienceEntry.querySelector('.description-input');
                                if (descInput) {
                                    descInput.value = 'Developed and maintained web applications using React.js and Node.js. Collaborated with design team to implement UI/UX improvements. Participated in agile development processes.';
                                    const charCount = experienceEntry.querySelector('.char-count');
                                    if (charCount) {
                                        charCount.textContent = descInput.value.length;
                                    }
                                }

                                // Add another experience entry
                                if (addExperienceBtn) {
                                    addExperienceBtn.click();

                                    setTimeout(() => {
                                        const secondExperience = document.querySelectorAll('.experience-entry')[1];
                                        if (secondExperience) {
                                            secondExperience.querySelector('.company-input').value = 'Global Solutions Ltd';
                                            secondExperience.querySelector('.position-input').value = 'Senior Full-Stack Developer';
                                            secondExperience.querySelector('.location-input').value = 'Tunis, Tunisia';
                                            secondExperience.querySelector('.start-date-input').value = '2024-01-15';
                                            secondExperience.querySelector('.end-date-input').value = 'Present';
                                            secondExperience.querySelector('.current-checkbox').checked = true;

                                            const descInput = secondExperience.querySelector('.description-input');
                                            if (descInput) {
                                                descInput.value = 'Leading development team for enterprise SaaS application. Designing system architecture and implementing key features. Mentoring junior developers and managing project timelines.';
                                                const charCount = secondExperience.querySelector('.char-count');
                                                if (charCount) {
                                                    charCount.textContent = descInput.value.length;
                                                }
                                            }
                                        }
                                    }, 100);
                                }
                            }
                        }, 100);
                    }

                    // Add sample skills
                    if (typeof addSkill === 'function') {
                        const sampleSkills = ['JavaScript', 'React.js', 'Node.js', 'MongoDB', 'Python', 'Git', 'Docker', 'AWS', 'RESTful API', 'TypeScript'];
                        sampleSkills.forEach(skill => {
                            addSkill(skill);
                        });
                    }

                    // Add sample languages
                    if (typeof addLanguage === 'function') {
                        addLanguage('Arabic', 'Native');
                        addLanguage('English', 'Fluent');
                        addLanguage('French', 'Advanced');
                    }

                    // Add sample certifications
                    if (typeof addCertification === 'function') {
                        addCertification('AWS Certified Developer – Associate');
                        addCertification('MongoDB Certified Developer Associate');
                        addCertification('Microsoft Certified: Azure Developer Associate');
                    }

                    // Fill additional information
                    if (document.getElementById('achievements')) {
                        document.getElementById('achievements').value = 'Winner of National Coding Challenge 2022\nRecognized for "Best Team Collaboration" award\nCompleted 10+ client projects with 100% satisfaction';
                    }

                    if (document.getElementById('interests')) {
                        document.getElementById('interests').value = 'Open-source contribution, AI research, Web3 development, Hiking, Photography, Chess';
                    }

                    // Display completion message
                    alert('Form has been filled with sample data! You can now review and modify as needed.');
                });
            }

            // Get current date and time for footer display
            const currentDate = new Date();
            const formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')} ${String(currentDate.getHours()).padStart(2, '0')}:${String(currentDate.getMinutes()).padStart(2, '0')}:${String(currentDate.getSeconds()).padStart(2, '0')}`;

            // Display current user info
            const currentUser = '{{ app.user ? app.user.username : "Mohamed-abidi-95" }}';
            console.log(`CV Generator accessed by ${currentUser} at ${formattedDate}`);

            // Function definitions needed by other components

            // Define addSkill for skills functionality
            function addSkill(skill) {
                if (!skill) return;

                const skillsContainer = document.getElementById('skillsContainer');
                const skillsEmptyState = document.getElementById('skillsEmptyState');

                if (!skillsContainer) return;

                const skillBadge = document.createElement('div');
                skillBadge.className = 'badge bg-light text-dark p-2 mb-2 me-2';
                skillBadge.style.fontSize = '1rem';

                const skillText = document.createElement('span');
                skillText.textContent = skill;

                const removeBtn = document.createElement('button');
                removeBtn.className = 'btn-close ms-2';
                removeBtn.setAttribute('aria-label', 'Remove');
                removeBtn.style.fontSize = '0.5rem';

                removeBtn.addEventListener('click', function() {
                    skillBadge.remove();
                    updateHiddenSkills();

                    if (skillsContainer.children.length === 0 && skillsEmptyState) {
                        skillsEmptyState.style.display = 'block';
                    }
                });

                skillBadge.appendChild(skillText);
                skillBadge.appendChild(removeBtn);
                skillsContainer.appendChild(skillBadge);

                // Hide empty state if visible
                if (skillsEmptyState) {
                    skillsEmptyState.style.display = 'none';
                }

                // Add to hidden input field
                updateHiddenSkills();
            }

            function updateHiddenSkills() {
                const skillsContainer = document.getElementById('skillsContainer');
                if (!skillsContainer) return;

                const skills = Array.from(skillsContainer.children).map(badge => {
                    return badge.querySelector('span').textContent;
                });

                // Create or update hidden field
                let hiddenField = document.getElementById('skillsHidden');
                if (!hiddenField) {
                    hiddenField = document.createElement('input');
                    hiddenField.type = 'hidden';
                    hiddenField.name = 'skills';
                    hiddenField.id = 'skillsHidden';
                    skillsContainer.parentNode.appendChild(hiddenField);
                }

                hiddenField.value = JSON.stringify(skills);
            }

            // Define addLanguage for languages functionality
            function addLanguage(language, proficiency) {
                if (!language || !proficiency) return;

                const languagesContainer = document.getElementById('languagesContainer');
                const languagesEmptyState = document.getElementById('languagesEmptyState');

                if (!languagesContainer) return;

                const langBadge = document.createElement('div');
                langBadge.className = 'language-badge';

                const langText = document.createElement('span');
                langText.innerHTML = `<strong>${language}</strong> - ${proficiency}`;

                const removeBtn = document.createElement('button');
                removeBtn.innerHTML = '&times;';

                removeBtn.addEventListener('click', function() {
                    langBadge.remove();
                    updateHiddenLanguages();

                    if (languagesContainer.children.length === 0 && languagesEmptyState) {
                        languagesEmptyState.style.display = 'block';
                    }
                });

                langBadge.appendChild(langText);
                langBadge.appendChild(removeBtn);
                languagesContainer.appendChild(langBadge);

                // Hide empty state if visible
                if (languagesEmptyState) {
                    languagesEmptyState.style.display = 'none';
                }

                // Update hidden input
                updateHiddenLanguages();
            }

            function updateHiddenLanguages() {
                const languagesContainer = document.getElementById('languagesContainer');
                if (!languagesContainer) return;

                const languages = Array.from(languagesContainer.children).map(badge => {
                    const langText = badge.querySelector('span').textContent;
                    const parts = langText.split(' - ');
                    return {
                        language: parts[0],
                        proficiency: parts[1]
                    };
                });

                // Create or update hidden field
                let hiddenField = document.getElementById('languagesHidden');
                if (!hiddenField) {
                    hiddenField = document.createElement('input');
                    hiddenField.type = 'hidden';
                    hiddenField.name = 'languages';
                    hiddenField.id = 'languagesHidden';
                    languagesContainer.parentNode.appendChild(hiddenField);
                }

                hiddenField.value = JSON.stringify(languages);
            }

            // Check if this is a mobile device
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            if (isMobile) {
                document.body.classList.add('mobile-device');

                // Adjust UI for better mobile experience
                document.querySelectorAll('.card-header').forEach(header => {
                    header.style.padding = '10px';
                });

                document.querySelectorAll('.form-section-title').forEach(title => {
                    title.style.fontSize = '1.25rem';
                });
            }

            // Current date: {{ "now"|date("Y-m-d H:i:s") }}
            // User: {{ app.user ? app.user.username : "Mohamed-abidi-95" }}

            // Timestamp display in footer
            const timestampElement = document.createElement('div');
            timestampElement.className = 'text-center text-muted mt-4 small';
            timestampElement.innerHTML = `<i class="fas fa-clock me-1"></i> Last updated: ${formattedDate} by ${currentUser}`;
            document.querySelector('.container').appendChild(timestampElement);
        });
    </script>
{% endblock %}

==================================================

Fichier: Templates\cv_generator\welcome.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\welcome.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}ESPRIT CV Generator | Accueil{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/welcome.css') }}">
    <link rel="stylesheet" href="{{ asset('css/template_carousel.css') }}">
    <style>
        /* Ajout de Times New Roman comme police principale */
        body, h1, h2, h3, h4, h5, h6, p, span, div {
            font-family: 'Times New Roman', Times, serif !important;
        }

        /* Styles pour l'aperçu simplifié */
        .simple-cv-preview {
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
            height: auto;
            min-height: 250px;
            max-height: 500px;
            position: relative;
        }

        .preview-header {
            background-color: #f8f9fa;
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
        }

        .preview-title {
            margin: 0;
            color: var(--secondary-color);
            font-size: 1.2rem;
            font-weight: 600;
        }

        .preview-body {
            padding: 1rem;
            min-height: 200px;
            overflow-y: auto;
        }

        .preview-placeholder {
            text-align: center;
            color: #adb5bd;
            padding: 2rem 1rem;
            font-style: italic;
        }

        .preview-section {
            background-color: #f8f9fa;
            border-left: 3px solid var(--primary-color);
            padding: 0.75rem;
            margin-bottom: 0.75rem;
            border-radius: 4px;
            cursor: move;
            transition: all 0.3s ease;
        }

        .preview-section:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }

        .preview-section-title {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--secondary-color);
        }

        .preview-section-content {
            color: var(--text-medium);
            font-size: 0.9rem;
            line-height: 1.4;
        }

        /* Styles pour les sections disponibles */
        .available-sections {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            margin-bottom: 1.5rem;
        }

        .cv-section {
            cursor: grab;
            background-color: var(--white-bg);
            padding: 1rem;
            border-radius: 8px;
            border-left: 3px solid var(--secondary-color);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .cv-section:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08);
        }

        .cv-section.dragging {
            opacity: 0.8;
            background-color: var(--primary-light);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        /* Correction pour la responsivité */
        @media (max-width: 768px) {
            .cv-structure-container {
                flex-direction: column;
            }

            .cv-builder-controls,
            .cv-preview {
                width: 100%;
            }

            .simple-cv-preview {
                max-height: 400px;
            }
        }
        /* Animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0px); }
        }

        /* Styles généraux */
        body {
            font-family: var(--font-family-sans-serif);
            background-color: var(--light-bg);
            color: var(--text-medium);
            line-height: 1.6;
        }

        .welcome-container {
            max-width: 100%;
            overflow-x: hidden;
        }

        /* Section Titre */
        .hero-section {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--dark-bg) 100%);
            padding: 6rem 0 8rem;
            position: relative;
            overflow: hidden;
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: var(--font-weight-bold);
            color: #ffffff;
            margin-bottom: 1.5rem;
            line-height: 1.2;
        }

        .hero-subtitle {
            font-size: 1.25rem;
            color: rgba(255, 255, 255, 0.85);
            margin-bottom: 2.5rem;
            max-width: 650px;
        }

        .hero-accent {
            color: var(--primary-color);
            font-weight: var(--font-weight-bold);
        }

        .hero-buttons {
            display: flex;
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .btn-hero-primary {
            padding: 0.875rem 2rem;
            font-size: 1.1rem;
            font-weight: var(--font-weight-medium);
            background-color: var(--primary-color);
            border: none;
            color: white;
            border-radius: 50px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--primary-shadow);
        }

        .btn-hero-primary:hover {
            background-color: var(--primary-dark);
            transform: translateY(-3px);
            box-shadow: 0 8px 25px var(--primary-shadow);
        }

        .btn-hero-secondary {
            padding: 0.875rem 2rem;
            font-size: 1.1rem;
            font-weight: var(--font-weight-medium);
            background-color: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(8px);
            border: 1px solid rgba(255, 255, 255, 0.25);
            color: white;
            border-radius: 50px;
            transition: all 0.3s ease;
        }

        .btn-hero-secondary:hover {
            background-color: rgba(255, 255, 255, 0.25);
            transform: translateY(-3px);
        }

        .hero-image {
            position: relative;
            z-index: 2;
            max-width: 100%;
            height: auto;
            animation: float 6s ease-in-out infinite;
        }

        .hero-shape-1, .hero-shape-2, .hero-shape-3 {
            position: absolute;
            z-index: 1;
            opacity: 0.5;
        }

        .hero-shape-1 {
            top: 10%;
            left: 5%;
            width: 300px;
            height: 300px;
            background: radial-gradient(var(--primary-color), transparent 70%);
            border-radius: 50%;
            filter: blur(50px);
        }

        .hero-shape-2 {
            bottom: -10%;
            right: 10%;
            width: 250px;
            height: 250px;
            background: radial-gradient(var(--info), transparent 70%);
            border-radius: 50%;
            filter: blur(60px);
        }

        .hero-shape-3 {
            top: 30%;
            right: 20%;
            width: 200px;
            height: 200px;
            background: radial-gradient(var(--warning), transparent 70%);
            border-radius: 50%;
            filter: blur(40px);
        }

        /* Section des caracteristiques */
        .features-outer-section {
            background-color: var(--white-bg);
            padding: 5rem 0;
        }

        .section-title {
            font-size: 2.5rem;
            font-weight: var(--font-weight-bold);
            color: var(--text-dark);
            margin-bottom: 1rem;
            text-align: center;
        }

        .section-subtitle {
            font-size: 1.1rem;
            color: var(--text-light);
            margin-bottom: 3rem;
            text-align: center;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .feature-card {
            background-color: #ffffff;
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            height: 100%;
            border: 1px solid var(--border-light);
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

        .feature-icon {
            width: 64px;
            height: 64px;
            background-color: var(--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        .feature-icon i {
            font-size: 1.75rem;
            color: var(--primary-color);
        }

        .feature-title {
            font-size: 1.5rem;
            font-weight: var(--font-weight-semibold);
            color: var(--text-dark);
            margin-bottom: 1rem;
        }

        .feature-text {
            color: var(--text-medium);
            margin-bottom: 1.5rem;
        }

        .feature-link {
            font-weight: var(--font-weight-medium);
            color: var(--primary-color);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .feature-link:hover {
            color: var(--primary-dark);
            transform: translateX(5px);
        }

        /* Section de contenu en décalé */
        .content-section {
            padding: 6rem 0;
            position: relative;
            overflow: hidden;
        }

        .content-section:nth-child(odd) {
            background-color: var(--light-bg);
        }

        .content-section:nth-child(even) {
            background-color: var(--white-bg);
        }

        .content-image {
            max-width: 90%;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .content-image:hover {
            transform: translateY(-10px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        }

        .content-title {
            font-size: 2.25rem;
            font-weight: var(--font-weight-bold);
            color: var(--text-dark);
            margin-bottom: 1.25rem;
        }

        .content-subtitle {
            font-size: 1.1rem;
            color: var(--accent-color);
            margin-bottom: 1.5rem;
            letter-spacing: 1px;
            text-transform: uppercase;
            font-weight: var(--font-weight-medium);
        }

        .content-text {
            color: var(--text-medium);
            margin-bottom: 2rem;
            font-size: 1.05rem;
        }

        .content-list {
            padding-left: 0;
            list-style: none;
            margin-bottom: 2rem;
        }

        .content-list-item {
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border-light);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: var(--text-medium);
        }

        .content-list-item:last-child {
            border-bottom: none;
        }

        .content-list-icon {
            width: 28px;
            height: 28px;
            min-width: 28px;
            background-color: var(--primary-light);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .content-list-icon i {
            font-size: 0.9rem;
            color: var(--primary-color);
        }

        /* Section de témoignages */
        .testimonials-section {
            padding: 6rem 0;
            background-color: var(--light-bg);
            position: relative;
        }

        .testimonial-card {
            background-color: #ffffff;
            border-radius: 16px;
            padding: 2.5rem;
            margin: 1.5rem 0.5rem;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.06);
            position: relative;
            z-index: 1;
            transition: all 0.3s ease;
            height: 100%;
        }

        .testimonial-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
        }

        .testimonial-quote {
            position: absolute;
            top: 20px;
            right: 25px;
            font-size: 4rem;
            color: var(--primary-light);
            z-index: -1;
            opacity: 0.8;
        }

        .testimonial-content {
            font-size: 1.1rem;
            color: var(--text-medium);
            margin-bottom: 2rem;
            position: relative;
            z-index: 2;
        }

        .testimonial-user {
            display: flex;
            align-items: center;
        }

        .testimonial-avatar {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1rem;
            border: 3px solid var(--border-light);
        }

        .testimonial-info {
            flex: 1;
        }

        .testimonial-name {
            font-weight: var(--font-weight-medium);
            color: var(--text-dark);
            margin-bottom: 0.25rem;
            font-size: 1.1rem;
        }

        .testimonial-position {
            color: var(--text-light);
            font-size: 0.9rem;
        }

        .testimonial-rating {
            color: #f59e0b;
            font-size: 1rem;
            margin-top: 0.5rem;
        }

        /* Section Call to Action */
        .cta-section {
            padding: 6rem 0;
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--dark-bg) 100%);
            position: relative;
            overflow: hidden;
        }

        .cta-content {
            position: relative;
            z-index: 2;
            text-align: center;
        }

        .cta-title {
            font-size: 2.75rem;
            font-weight: var(--font-weight-bold);
            color: #ffffff;
            margin-bottom: 1.5rem;
        }

        .cta-text {
            font-size: 1.2rem;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 2.5rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
        }

        .cta-button {
            padding: 1rem 2.5rem;
            font-size: 1.25rem;
            font-weight: var(--font-weight-medium);
            background-color: var(--primary-color);
            border: none;
            color: white;
            border-radius: 50px;
            transition: all 0.3s ease;
            box-shadow: 0 8px 20px var(--primary-shadow);
            display: inline-flex;
            align-items: center;
            gap: 0.75rem;
        }

        .cta-button:hover {
            background-color: var(--primary-dark);
            transform: translateY(-3px);
            box-shadow: 0 12px 30px var(--primary-shadow);
        }

        .cta-shape-1, .cta-shape-2 {
            position: absolute;
            z-index: 1;
            opacity: 0.4;
        }

        .cta-shape-1 {
            top: -100px;
            left: -100px;
            width: 300px;
            height: 300px;
            background: radial-gradient(var(--primary-color), transparent 70%);
            border-radius: 50%;
            filter: blur(60px);
        }

        .cta-shape-2 {
            bottom: -100px;
            right: -100px;
            width: 350px;
            height: 350px;
            background: radial-gradient(var(--info), transparent 70%);
            border-radius: 50%;
            filter: blur(80px);
        }

        /* Animation à l'apparition */
        .animate-on-scroll {
            opacity: 0;
            transform: translateY(30px);
            transition: opacity 0.8s ease, transform 0.8s ease;
        }

        .animate-on-scroll.animated {
            opacity: 1;
            transform: translateY(0);
        }

        /* Styles spécifiques au carousel de templates */
        .carousel-section {
            padding: 5rem 0;
            background-color: var(--white-bg);
            position: relative;
        }

        .carousel-card {
            background-color: var(--white-bg);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(45, 55, 72, 0.08);
            overflow: hidden;
            margin: 0 auto;
            max-width: 1100px;
        }

        /* Section de personnalisation du CV */
        .sections-editor-section {
            padding: 5rem 0;
            background-color: var(--light-bg);
            position: relative;
            overflow: hidden;
        }

        .section-heading {
            text-align: center;
            margin-bottom: 4rem;
            position: relative;
        }

        .section-heading .section-title {
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .section-heading .section-title::after {
            content: '';
            position: absolute;
            bottom: -0.75rem;
            left: 50%;
            transform: translateX(-50%);
            height: 3px;
            width: 60px;
            background-color: var(--primary-color);
            border-radius: 3px;
        }

        /* CV Structure Builder avec page A4 en temps réel */
        .cv-structure-container {
            display: flex;
            flex-wrap: wrap;
            gap: 2rem;
            margin-top: 3rem;
        }

        .cv-builder-controls {
            flex: 1;
            min-width: 300px;
        }

        .cv-preview {
            flex: 1;
            min-width: 300px;
        }

        .a4-preview {
            width: 100%;
            height: 0;
            padding-bottom: 141.4%; /* A4 ratio */
            background-color: #ffffff;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
            border-radius: 5px;
            position: relative;
            overflow: hidden;
        }

        .a4-content {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }

        .a4-header {
            padding-bottom: 1rem;
            margin-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .a4-name {
            font-size: 1.75rem;
            font-weight: 600;
            color: var(--secondary-color);
            margin-bottom: 0.5rem;
        }

        .a4-title {
            color: var(--primary-color);
            font-size: 1.1rem;
            font-weight: 500;
        }

        .a4-contact {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            font-size: 0.8rem;
            color: var(--text-medium);
            margin-top: 0.5rem;
        }

        .a4-contact-item {
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .a4-body {
            flex: 1;
            display: flex;
        }

        .a4-main {
            flex: 3;
            padding-right: 1rem;
        }

        .a4-sidebar {
            flex: 1;
            padding-left: 1rem;
            border-left: 1px solid var(--border-color);
        }

        .a4-section {
            margin-bottom: 1rem;
            min-height: 30px; /* Pour permettre le drag & drop même vide */
        }

        .a4-section-title {
            font-weight: 600;
            color: var(--secondary-color);
            margin-bottom: 0.5rem;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .a4-section-title i {
            color: var(--primary-color);
            font-size: 0.9rem;
        }

        .a4-section-content {
            font-size: 0.8rem;
            color: var(--text-medium);
        }

        .a4-drop-zone {
            min-height: 50px;
            border: 1px dashed var(--border-color);
            border-radius: 4px;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background-color: rgba(0, 0, 0, 0.01);
            transition: all 0.3s ease;
        }

        .a4-drop-zone:hover {
            background-color: rgba(0, 0, 0, 0.03);
        }

        .a4-drop-zone.highlight {
            background-color: var(--primary-light);
            border-color: var(--primary-color);
        }

        .a4-item {
            background: var(--white-bg);
            border-radius: 4px;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            border-left: 2px solid var(--secondary-color);
            cursor: grab;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .a4-item:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .a4-item.dragging {
            opacity: 0.5;
            transform: scale(0.95);
        }

        /* CV Structure Builder */
        .cv-structure-builder {
            background-color: var(--white-bg);
            border-radius: 16px;
            padding: 2rem;
            margin-top: 3rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            position: relative;
        }

        .builder-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .structure-preview {
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            padding: 1.5rem;
            background-color: rgba(255, 255, 255, 0.6);
            min-height: 400px;
            position: relative;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .structure-preview::before {
            content: "Aperçu de votre CV";
            position: absolute;
            top: -10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--white-bg);
            padding: 0 0.75rem;
            font-size: 0.9rem;
            color: var(--text-light);
        }

        .cv-section {
            cursor: grab;
            background-color: var(--white-bg);
            padding: 1rem;
            border-radius: 8px;
            border-left: 3px solid var(--secondary-color);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .cv-section:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.08);
        }

        .cv-section.dragging {
            opacity: 0.8;
            background-color: var(--primary-light);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }

        .section-icon {
            color: var(--secondary-color);
            width: 36px;
            height: 36px;
            min-width: 36px;
            background-color: rgba(45, 55, 72, 0.05);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .section-details {
            flex: 1;
        }

        .section-details h5 {
            font-weight: 600;
            color: var(--text-dark);
            margin: 0;
        }

        .section-desc {
            font-size: 0.85rem;
            color: var(--text-medium);
            margin: 0.25rem 0 0;
        }

        .structure-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1.5rem;
        }

        .tip-text {
            color: var(--text-medium);
            font-size: 0.9rem;
        }

        .reset-btn {
            background-color: rgba(45, 55, 72, 0.05);
            color: var(--text-medium);
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .reset-btn:hover {
            background-color: rgba(238, 49, 36, 0.1);
            color: var(--primary-color);
        }

        .cv-layout-options {
            margin-bottom: 1.5rem;
        }

        .cv-layout-option {
            display: inline-flex;
            margin-right: 1rem;
            margin-bottom: 1rem;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            background-color: var(--white-bg);
            border: 1px solid var(--border-color);
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--text-medium);
        }

        .cv-layout-option.active {
            border-color: var(--primary-color);
            background-color: var(--primary-light);
            color: var(--primary-color);
            box-shadow: 0 3px 10px var(--primary-shadow);
        }

        .cv-layout-option:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        }

        /* Responsive */
        @media (max-width: 992px) {
            .hero-title {
                font-size: 2.75rem;
            }

            .content-image {
                margin-bottom: 2rem;
            }

            .content-section {
                padding: 4rem 0;
            }

            .cv-structure-container {
                flex-direction: column;
            }

            .a4-preview {
                margin-top: 2rem;
            }
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 2.25rem;
            }

            .hero-subtitle {
                font-size: 1.1rem;
            }

            .hero-buttons {
                flex-direction: column;
                gap: 1rem;
            }

            .section-title {
                font-size: 2rem;
            }

            .content-title {
                font-size: 1.75rem;
            }

            .cta-title {
                font-size: 2rem;
            }

            .cta-text {
                font-size: 1.1rem;
            }

            .a4-body {
                flex-direction: column;
            }

            .a4-sidebar {
                border-left: none;
                border-top: 1px solid var(--border-color);
                padding-left: 0;
                padding-top: 1rem;
                margin-top: 1rem;
            }
        }

        @media (max-width: 576px) {
            .cv-layout-option {
                font-size: 0.85rem;
                padding: 0.4rem 0.8rem;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="welcome-container">
    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-shape-1"></div>
        <div class="hero-shape-2"></div>
        <div class="hero-shape-3"></div>

        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6 hero-content">
                    <h1 class="hero-title">Créez un CV professionnel avec <span class="hero-accent">ESPRIT</span> CV Generator</h1>
                    <p class="hero-subtitle">Générez un CV personnalisé en quelques minutes. Choisissez parmi nos templates professionnels et boostez vos chances de décrocher le job de vos rêves!</p>
                    <div class="hero-buttons">
                        <a href="{{ path('app_cv_generator') }}" class="btn btn-hero-primary">
                            <i class="fas fa-file-alt me-2"></i>Créer mon CV
                        </a>
                        <a href="#templates" class="btn btn-hero-secondary">
                            <i class="fas fa-palette me-2"></i>Voir les templates
                        </a>
                    </div>
                </div>
                <div class="col-lg-6 text-center">
                    <img src="{{ asset('images/cv-hero-image.png') }}" alt="CV Generator Preview" class="hero-image">
                </div>
            </div>
        </div>
    </section>

    <!-- Templates Carousel Section -->
    <section id="templates" class="carousel-section">
        <div class="container">
            <div class="section-heading animate-on-scroll">
                <h2 class="section-title">Choisissez Votre Template</h2>
                <p class="section-subtitle">Sélectionnez parmi nos designs professionnels adaptés à différents domaines</p>
            </div>
            <div class="carousel-card animate-on-scroll">
                <div class="carousel-wrapper" id="template-carousel">
                    <!-- Template 1 - Moderne/Professionnel -->
                    <div class="carousel-item active" data-carousel-item="0" data-template="template1">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/1.png') }}" alt="Template Tech Expert" class="template-preview">
                            <div class="template-details">
                                <h3>Tech Expert</h3>
                                <p>Un design moderne parfait pour les profils d'ingénierie et tech</p>
                                <div class="template-tags">
                                    <span class="tag tag-modern">Moderne</span>
                                    <span class="tag tag-professional">Professionnel</span>
                                    <span class="tag tag-engineering">Ingénierie</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template1">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 2 - Classique/Professionnel -->
                    <div class="carousel-item" data-carousel-item="1" data-template="template2">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/2.png') }}" alt="Template Executive" class="template-preview">
                            <div class="template-details">
                                <h3>Executive</h3>
                                <p>Design classique et élégant parfait pour les profils business et management</p>
                                <div class="template-tags">
                                    <span class="tag tag-classic">Classique</span>
                                    <span class="tag tag-professional">Professionnel</span>
                                    <span class="tag tag-business">Business</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template2">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 3 - Créatif -->
                    <div class="carousel-item" data-carousel-item="2" data-template="template3">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/3.png') }}" alt="Template Innovation" class="template-preview">
                            <div class="template-details">
                                <h3>Innovation</h3>
                                <p>Un design créatif et moderne pour se démarquer</p>
                                <div class="template-tags">
                                    <span class="tag tag-creative">Créatif</span>
                                    <span class="tag tag-modern">Moderne</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template3">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 4 - Académique -->
                    <div class="carousel-item" data-carousel-item="3" data-template="template4">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/4.png') }}" alt="Template Académique" class="template-preview">
                            <div class="template-details">
                                <h3>Academic Plus</h3>
                                <p>Idéal pour les profils académiques et recherche</p>
                                <div class="template-tags">
                                    <span class="tag tag-classic">Classique</span>
                                    <span class="tag tag-academic">Académique</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template4">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 5 - Ingénierie Moderne -->
                    <div class="carousel-item" data-carousel-item="4" data-template="template5">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/5.png') }}" alt="Template Ingénierie" class="template-preview">
                            <div class="template-details">
                                <h3>Tech Engineering</h3>
                                <p>Spécialement conçu pour les ingénieurs et techniciens</p>
                                <div class="template-tags">
                                    <span class="tag tag-modern">Moderne</span>
                                    <span class="tag tag-engineering">Ingénierie</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template5">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 6 - Business Moderne -->
                    <div class="carousel-item" data-carousel-item="5" data-template="template6">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/6.png') }}" alt="Template Business" class="template-preview">
                            <div class="template-details">
                                <h3>Business Pro</h3>
                                <p>Pour les profils professionnels orientés business</p>
                                <div class="template-tags">
                                    <span class="tag tag-modern">Moderne</span>
                                    <span class="tag tag-business">Business</span>
                                    <span class="tag tag-professional">Professionnel</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template6">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Template 7 - Classique Élégant -->
                    <div class="carousel-item" data-carousel-item="6" data-template="template7">
                        <div class="template-slide">
                            <img src="{{ asset('images/cvs/7.png') }}" alt="Template Classique Élégant" class="template-preview">
                            <div class="template-details">
                                <h3>Classic Elite</h3>
                                <p>Élégant et intemporel pour une impression durable</p>
                                <div class="template-tags">
                                    <span class="tag tag-classic">Classique</span>
                                    <span class="tag tag-professional">Professionnel</span>
                                </div>
                                <button class="btn btn-primary select-template-btn" data-template="template7">
                                    Sélectionner ce template
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Carousel controls -->
                <button class="carousel-control prev" id="carousel-prev" aria-label="Template précédent">
                    <i class="fas fa-chevron-left"></i>
                </button>
                <button class="carousel-control next" id="carousel-next" aria-label="Template suivant">
                    <i class="fas fa-chevron-right"></i>
                </button>

                <!-- Carousel indicators -->
                <div class="carousel-indicators" role="tablist">
                    <button class="carousel-indicator active" data-carousel-goto="0" aria-label="Template 1" aria-controls="template-carousel" role="tab" aria-selected="true"></button>
                    <button class="carousel-indicator" data-carousel-goto="1" aria-label="Template 2" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                    <button class="carousel-indicator" data-carousel-goto="2" aria-label="Template 3" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                    <button class="carousel-indicator" data-carousel-goto="3" aria-label="Template 4" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                    <button class="carousel-indicator" data-carousel-goto="4" aria-label="Template 5" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                    <button class="carousel-indicator" data-carousel-goto="5" aria-label="Template 6" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                    <button class="carousel-indicator" data-carousel-goto="6" aria-label="Template 7" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
                </div>
            </div>
        </div>
    </section>

    <!-- Section de personnalisation du CV -->
    <section id="customize" class="sections-editor-section">
        <div class="container">
            <div class="section-heading animate-on-scroll">
                <h2 class="section-title">Personnalisez Votre CV</h2>
                <p class="section-subtitle">Organisez les sections selon vos préférences et besoins spécifiques</p>
            </div>

            <!-- Sélecteur de sections principales -->
            <div class="sections-selector animate-on-scroll">
                <h3 class="sections-selector-title">Sections de votre CV</h3>
                <ul class="sections-list">
                    <li class="section-item active" data-section="personal">
                        <div class="section-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        <p class="section-name">Informations personnelles</p>
                        <span class="section-status">
                                <i class="fas fa-check"></i>
                            </span>
                    </li>
                    <li class="section-item" data-section="education">
                        <div class="section-icon">
                            <i class="fas fa-graduation-cap"></i>
                        </div>
                        <p class="section-name">Éducation</p>
                    </li>
                    <li class="section-item" data-section="experience">
                        <div class="section-icon">
                            <i class="fas fa-briefcase"></i>
                        </div>
                        <p class="section-name">Expérience pro.</p>
                    </li>
                    <li class="section-item" data-section="skills">
                        <div class="section-icon">
                            <i class="fas fa-tools"></i>
                        </div>
                        <p class="section-name">Compétences</p>
                    </li>
                    <li class="section-item" data-section="languages">
                        <div class="section-icon">
                            <i class="fas fa-language"></i>
                        </div>
                        <p class="section-name">Langues</p>
                    </li>
                    <li class="section-item" data-section="additional">
                        <div class="section-icon">
                            <i class="fas fa-plus-circle"></i>
                        </div>
                        <p class="section-name">Additionnel</p>
                    </li>
                    <li class="section-item" data-section="review">
                        <div class="section-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <p class="section-name">Revue</p>
                    </li>
                </ul>
            </div>

            <!-- NOUVEAU: CV Structure Builder avec Aperçu en temps réel -->
            <!-- NOUVEAU: CV Structure Builder avec Aperçu en temps réel simplifié -->
            <div class="cv-structure-container animate-on-scroll">
                <!-- Partie gauche: Contrôles de structure -->
                <div class="cv-builder-controls">
                    <h3 class="builder-title">
                        <i class="fas fa-object-group"></i>
                        Structure du CV
                    </h3>

                    <!-- Éléments à glisser-déposer -->
                    <div id="availableSections" class="available-sections">
                        <div class="cv-section" draggable="true" data-section="personal">
                            <div class="section-icon">
                                <i class="fas fa-user"></i>
                            </div>
                            <div class="section-details">
                                <h5>Informations personnelles</h5>
                                <p class="section-desc">Contact, photo, résumé</p>
                            </div>
                        </div>

                        <div class="cv-section" draggable="true" data-section="education">
                            <div class="section-icon">
                                <i class="fas fa-graduation-cap"></i>
                            </div>
                            <div class="section-details">
                                <h5>Éducation</h5>
                                <p class="section-desc">Diplômes et formations</p>
                            </div>
                        </div>

                        <div class="cv-section" draggable="true" data-section="experience">
                            <div class="section-icon">
                                <i class="fas fa-briefcase"></i>
                            </div>
                            <div class="section-details">
                                <h5>Expérience professionnelle</h5>
                                <p class="section-desc">Emplois et stages</p>
                            </div>
                        </div>

                        <div class="cv-section" draggable="true" data-section="skills">
                            <div class="section-icon">
                                <i class="fas fa-tools"></i>
                            </div>
                            <div class="section-details">
                                <h5>Compétences</h5>
                                <p class="section-desc">Techniques et professionnelles</p>
                            </div>
                        </div>

                        <div class="cv-section" draggable="true" data-section="languages">
                            <div class="section-icon">
                                <i class="fas fa-language"></i>
                            </div>
                            <div class="section-details">
                                <h5>Langues</h5>
                                <p class="section-desc">Niveaux et certifications</p>
                            </div>
                        </div>

                        <div class="cv-section" draggable="true" data-section="projects">
                            <div class="section-icon">
                                <i class="fas fa-project-diagram"></i>
                            </div>
                            <div class="section-details">
                                <h5>Projets</h5>
                                <p class="section-desc">Réalisations personnelles</p>
                            </div>
                        </div>
                    </div>

                    <div class="structure-info">
                        <p class="tip-text"><i class="fas fa-lightbulb text-warning me-2"></i> Glissez-déposez les sections à droite pour voir l'aperçu en temps réel.</p>
                        <button type="button" class="reset-btn" id="resetLayout">
                            <i class="fas fa-undo"></i>
                            Réinitialiser
                        </button>
                    </div>
                </div>

                <!-- Partie droite: Aperçu simplifié -->
                <div class="cv-preview">
                    <h3 class="builder-title">
                        <i class="fas fa-file-alt"></i>
                        Aperçu en temps réel
                    </h3>

                    <div class="simple-cv-preview">
                        <div class="preview-header">
                            <h4 class="preview-title">Structure de votre CV</h4>
                        </div>
                        <div id="previewDropZone" class="preview-body">
                            <div class="preview-placeholder">Glissez les sections ici pour visualiser</div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Éditeur de section drag-and-drop -->
            <div class="section-editor animate-on-scroll">
                <h3 class="editor-title">
                    <i class="fas fa-edit"></i>
                    Personnaliser l'ordre des sections
                </h3>
                <ul class="sortable-sections" id="sortableSections">
                    <li class="sortable-section-item" data-section="personal">
                        <div class="sortable-handle">
                            <i class="fas fa-grip-vertical"></i>
                        </div>
                        <div class="sortable-content">
                            <h4 class="sortable-section-name">
                                <i class="fas fa-user"></i>
                                Informations personnelles
                            </h4>
                            <p class="sortable-description">Nom, contact, photo, résumé professionnel...</p>
                        </div>
                        <div class="sortable-actions">
                            <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </li>

                    <li class="sortable-section-item" data-section="education">
                        <div class="sortable-handle">
                            <i class="fas fa-grip-vertical"></i>
                        </div>
                        <div class="sortable-content">
                            <h4 class="sortable-section-name">
                                <i class="fas fa-graduation-cap"></i>
                                Éducation
                            </h4>
                            <p class="sortable-description">Diplômes, formations, certifications...</p>
                        </div>
                        <div class="sortable-actions">
                            <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="sortable-btn remove" title="Remove section">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </li>

                    <li class="sortable-section-item" data-section="experience">
                        <div class="sortable-handle">
                            <i class="fas fa-grip-vertical"></i>
                        </div>
                        <div class="sortable-content">
                            <h4 class="sortable-section-name">
                                <i class="fas fa-briefcase"></i>
                                Expérience professionnelle
                            </h4>
                            <p class="sortable-description">Emplois, stages, projets professionnels...</p>
                        </div>
                        <div class="sortable-actions">
                            <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button type="button" class="sortable-btn remove" title="Remove section">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </li>

                    <li class="sortable-section-item disabled" data-section="skills">
                        <div class="sortable-handle">
                            <i class="fas fa-grip-vertical"></i>
                        </div>
                        <div class="sortable-content">
                            <h4 class="sortable-section-name">
                                <i class="fas fa-tools"></i>
                                Compétences
                            </h4>
                            <p class="sortable-description">Compétences techniques, professionnelles...</p>
                        </div>
                        <div class="sortable-actions">
                            <button type="button" class="sortable-btn toggle-visibility hidden" title="Toggle visibility">
                                <i class="fas fa-eye-slash"></i>
                            </button>
                            <button type="button" class="sortable-btn remove" title="Remove section">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </li>
                </ul>

                <button class="section-add-btn" id="addSectionBtn">
                    <i class="fas fa-plus"></i>
                    Ajouter une section
                </button>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section class="features-outer-section">
        <div class="container">
            <div class="section-heading animate-on-scroll">
                <h2 class="section-title">Caractéristiques Principales</h2>
                <p class="section-subtitle">Notre générateur de CV offre tout ce dont vous avez besoin pour créer un CV professionnel qui vous distingue des autres candidats</p>
            </div>

            <div class="row">
                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-paint-brush"></i>
                        </div>
                        <h3 class="feature-title">Templates Professionnels</h3>
                        <p class="feature-text">Choisissez parmi une variété de templates modernes et professionnels adaptés à différents secteurs d'activité.</p>
                        <a href="#templates" class="feature-link">
                            Explorer les templates <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-magic"></i>
                        </div>
                        <h3 class="feature-title">Interface Intuitive</h3>
                        <p class="feature-text">Notre interface conviviale vous guide pas à pas dans la création de votre CV, sans aucune compétence technique requise.</p>
                        <a href="{{ path('app_cv_generator') }}" class="feature-link">
                            Essayer maintenant <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-download"></i>
                        </div>
                        <h3 class="feature-title">Export PDF</h3>
                        <p class="feature-text">Téléchargez instantanément votre CV en format PDF de haute qualité, prêt à être envoyé aux recruteurs.</p>
                        <a href="{{ path('app_cv_generator') }}" class="feature-link">
                            Créer mon CV <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                        <h3 class="feature-title">100% Responsive</h3>
                        <p class="feature-text">Créez votre CV depuis n'importe quel appareil - ordinateur, tablette ou smartphone, à tout moment.</p>
                        <a href="#" class="feature-link">
                            En savoir plus <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-lock"></i>
                        </div>
                        <h3 class="feature-title">Confidentialité</h3>
                        <p class="feature-text">Vos données personnelles sont sécurisées. Nous respectons votre vie privée et ne partageons pas vos informations.</p>
                        <a href="#" class="feature-link">
                            Notre politique <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>

                <div class="col-lg-4 col-md-6 animate-on-scroll">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-award"></i>
                        </div>
                        <h3 class="feature-title">Conseils d'experts</h3>
                        <p class="feature-text">Bénéficiez de conseils professionnels intégrés pour optimiser chaque section de votre CV et maximiser vos chances.</p>
                        <a href="#" class="feature-link">
                            Voir les conseils <i class="fas fa-arrow-right"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Content Section 1 -->
    <section class="content-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6 animate-on-scroll">
                    <img src="{{ asset('images/content-image-1.jpg') }}" alt="CV Templates" class="content-image">
                </div>
                <div class="col-lg-6 animate-on-scroll">
                    <span class="content-subtitle">DESIGN PROFESSIONNEL</span>
                    <h2 class="content-title">Des templates conçus pour impressionner</h2>
                    <p class="content-text">Nous avons collaboré avec des experts en recrutement et des designers pour créer des templates de CV qui répondent aux standards actuels du marché de l'emploi. Chaque détail a été soigneusement étudié pour vous aider à faire une première impression remarquable.</p>

                    <ul class="content-list">
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Designs modernes et professionnels</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Adaptés à différents secteurs d'activité</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Optimisés pour les logiciels de recrutement (ATS)</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Mise en page soignée et équilibrée</span>
                        </li>
                    </ul>

                    <a href="#templates" class="btn btn-primary">
                        <i class="fas fa-palette me-2"></i>Explorer les templates
                    </a>
                </div>
            </div>
        </div>
    </section>

    <!-- Content Section 2 -->
    <section class="content-section">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-6 order-lg-2 animate-on-scroll">
                    <img src="{{ asset('images/content-image-2.jpg') }}" alt="Easy CV Creation" class="content-image">
                </div>
                <div class="col-lg-6 order-lg-1 animate-on-scroll">
                    <span class="content-subtitle">SIMPLICITÉ D'UTILISATION</span>
                    <h2 class="content-title">Créez votre CV en quelques minutes</h2>
                    <p class="content-text">Notre interface intuitive vous guide pas à pas dans le processus de création. Plus besoin de vous soucier de la mise en page ou du formatage. Concentrez-vous uniquement sur le contenu, nous nous occupons du reste!</p>

                    <ul class="content-list">
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Interface intuitive et conviviale</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Formulaire guidé étape par étape</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Prévisualisation en temps réel</span>
                        </li>
                        <li class="content-list-item">
                            <div class="content-list-icon">
                                <i class="fas fa-check"></i>
                            </div>
                            <span>Sauvegarde automatique de votre progression</span>
                        </li>
                    </ul>

                    <a href="{{ path('app_cv_generator') }}" class="btn btn-primary">
                        <i class="fas fa-file-alt me-2"></i>Commencer mon CV
                    </a>
                </div>
            </div>
        </div>
    </section>

    <!-- Testimonials Section -->
    <section class="testimonials-section">
        <div class="container">
            <div class="section-heading animate-on-scroll">
                <h2 class="section-title">Témoignages</h2>
                <p class="section-subtitle">Découvrez ce que nos utilisateurs disent de notre générateur de CV</p>
            </div>

            <div class="row">
                <div class="col-lg-4 animate-on-scroll">
                    <div class="testimonial-card">
                        <div class="testimonial-quote">"</div>
                        <p class="testimonial-content">J'ai obtenu trois entretiens en une semaine après avoir refait mon CV avec cet outil. L'interface est intuitive et les templates sont vraiment professionnels. Je le recommande vivement!</p>
                        <div class="testimonial-user">
                            <img src="{{ asset('images/avatar-1.jpg') }}" alt="User Avatar" class="testimonial-avatar">
                            <div class="testimonial-info">
                                <h4 class="testimonial-name">Sophia Laroui</h4>
                                <p class="testimonial-position">Ingénieure Logiciel</p>
                                <div class="testimonial-rating">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 animate-on-scroll">
                    <div class="testimonial-card">
                        <div class="testimonial-quote">"</div>
                        <p class="testimonial-content">En tant que recruteur, je peux dire que les CVs créés avec cet outil se démarquent vraiment. Ils sont bien structurés, faciles à lire et professionnels. Un excellent investissement pour toute personne en recherche d'emploi.</p>
                        <div class="testimonial-user">
                            <img src="{{ asset('images/avatar-2.jpg') }}" alt="User Avatar" class="testimonial-avatar">
                            <div class="testimonial-info">
                                <h4 class="testimonial-name">Mohamed Bensalem</h4>
                                <p class="testimonial-position">Directeur RH</p>
                                <div class="testimonial-rating">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 animate-on-scroll">
                    <div class="testimonial-card">
                        <div class="testimonial-quote">"</div>
                        <p class="testimonial-content">Je n'avais aucune idée par où commencer pour mon CV. Cet outil a rendu le processus tellement simple! J'ai pu créer un CV professionnel en moins d'une heure. Le résultat final dépasse mes attentes.</p>
                        <div class="testimonial-user">
                            <img src="{{ asset('images/avatar-3.jpg') }}" alt="User Avatar" class="testimonial-avatar">
                            <div class="testimonial-info">
                                <h4 class="testimonial-name">Yassine Triki</h4>
                                <p class="testimonial-position">Étudiant en Master</p>
                                <div class="testimonial-rating">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="cta-section">
        <div class="cta-shape-1"></div>
        <div class="cta-shape-2"></div>

        <div class="container">
            <div class="cta-content">
                <h2 class="cta-title">Prêt à créer un CV qui impressionne?</h2>
                <p class="cta-text">Rejoignez des milliers d'utilisateurs satisfaits et commencez à générer votre CV professionnel dès aujourd'hui. Notre outil simple et intuitif vous guide à chaque étape.</p>
                <a href="{{ path('app_cv_generator') }}" class="cta-button">
                    <i class="fas fa-file-alt me-2"></i>Créer mon CV maintenant
                </a>
            </div>
        </div>
    </section>
</div>

    <!-- Current Date and User Info -->
    <div class="text-center mt-4 mb-4 text-muted small">
        <div>Date et heure actuelles (UTC): {{ "now"|date("Y-m-d H:i:s", "UTC") }}</div>
        <div>Utilisateur connecté: Mohamed-abidi-95</div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.14.0/Sortable.min.js"></script>
    <script src="{{ asset('js/template_carousel.js') }}"></script>
    <script src="{{ asset('js/section_editor.js') }}"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Animation au défilement
            const animateElements = document.querySelectorAll('.animate-on-scroll');

            const checkScroll = () => {
                const triggerBottom = window.innerHeight * 0.85;

                animateElements.forEach(element => {
                    const elementTop = element.getBoundingClientRect().top;
                    if (elementTop < triggerBottom) {
                        element.classList.add('animated');
                    }
                });
            };

            checkScroll(); // Vérifier les éléments visibles au chargement
            window.addEventListener('scroll', checkScroll);

            // Fonction pour afficher un feedback
            window.showFeedback = function(message, type = 'success') {
                // Vérifier si l'élément de feedback existe
                let feedback = document.getElementById('template-feedback');
                if (!feedback) {
                    // Créer l'élément s'il n'existe pas
                    feedback = document.createElement('div');
                    feedback.id = 'template-feedback';
                    feedback.className = 'template-feedback';
                    document.body.appendChild(feedback);

                    // Ajouter le style
                    const style = document.createElement('style');
                    style.textContent = `
                        .template-feedback {
                            position: fixed;
                            bottom: 20px;
                            right: 20px;
                            background-color: #28a745;
                            color: white;
                            padding: 12px 20px;
                            border-radius: 4px;
                            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                            z-index: 1050;
                            opacity: 0;
                            transform: translateY(20px);
                            transition: opacity 0.3s ease, transform 0.3s ease;
                            font-family: var(--font-family-sans-serif);
                            font-weight: 500;
                        }
                        .template-feedback.show {
                            opacity: 1;
                            transform: translateY(0);
                        }
                        .template-feedback i {
                            margin-right: 8px;
                        }
                        .template-feedback.error {
                            background-color: #dc3545;
                        }
                        .template-feedback.info {
                            background-color: #17a2b8;
                        }
                        .template-feedback.warning {
                            background-color: #ffc107;
                            color: #212529;
                        }
                    `;
                    document.head.appendChild(style);
                }

                // Réinitialiser les classes
                feedback.className = 'template-feedback';

                // Appliquer la classe en fonction du type
                if (type === 'error') {
                    feedback.classList.add('error');
                    feedback.innerHTML = `<i class="fas fa-times-circle"></i>${message}`;
                } else if (type === 'warning') {
                    feedback.classList.add('warning');
                    feedback.innerHTML = `<i class="fas fa-exclamation-triangle"></i>${message}`;
                } else if (type === 'info') {
                    feedback.classList.add('info');
                    feedback.innerHTML = `<i class="fas fa-info-circle"></i>${message}`;
                } else {
                    // success par défaut
                    feedback.innerHTML = `<i class="fas fa-check-circle"></i>${message}`;
                }

                // Afficher le feedback
                feedback.classList.add('show');

                // Masquer après 3 secondes
                setTimeout(() => {
                    feedback.classList.remove('show');
                }, 3000);
            };

            // Smooth scroll pour les liens d'ancrage
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        window.scrollTo({
                            top: target.offsetTop - 80, // 80px de décalage pour la navbar
                            behavior: 'smooth'
                        });
                    }
                });
            });

            // NOUVEAU: Gestion du drag & drop pour l'aperçu A4 en temps réel
            initA4Preview();

            function initA4Preview() {
                // Configuration des layouts
                const layoutOptions = document.querySelectorAll('.cv-layout-option');
                const a4Body = document.getElementById('a4Body');
                const a4Main = document.getElementById('a4Main');
                const a4Sidebar = document.getElementById('a4Sidebar');

                // Bouton reset layout
                const resetBtn = document.getElementById('resetLayout');

                // Zones de drop
                const dropZones = [
                    document.getElementById('mainDropZone'),
                    document.getElementById('sidebarDropZone')
                ];

                // Sections disponibles
                const availableSections = document.getElementById('availableSections');

                // Gestionnaire de layout
                layoutOptions.forEach(option => {
                    option.addEventListener('click', function() {
                        // Reset active state
                        layoutOptions.forEach(opt => opt.classList.remove('active'));
                        this.classList.add('active');

                        const layout = this.getAttribute('data-layout');

                        // Appliquer le changement de layout
                        switch (layout) {
                            case 'one-column':
                                a4Body.className = 'a4-body';
                                a4Main.style.flex = '1';
                                a4Sidebar.style.display = 'none';
                                break;
                            case 'two-columns-left':
                                a4Body.className = 'a4-body two-columns';
                                a4Main.style.flex = '2';
                                a4Sidebar.style.display = 'block';
                                a4Sidebar.style.order = '0'; // À gauche
                                a4Main.style.order = '1';
                                break;
                            case 'two-columns-right':
                                a4Body.className = 'a4-body two-columns';
                                a4Main.style.flex = '2';
                                a4Sidebar.style.display = 'block';
                                a4Sidebar.style.order = '1'; // À droite
                                a4Main.style.order = '0';
                                break;
                        }

                        // Sauvegarder la préférence
                        localStorage.setItem('cvPreviewLayout', layout);

                        showFeedback(`Mise en page "${layout}" appliquée`, 'info');
                    });
                });

                // Initialiser SortableJS pour les zones de drop
                dropZones.forEach(zone => {
                    if (!zone) return;

                    new Sortable(zone, {
                        group: {
                            name: 'cv-sections',
                            pull: true,
                            put: true
                        },
                        animation: 150,
                        ghostClass: 'a4-item-ghost',
                        chosenClass: 'a4-item-chosen',
                        dragClass: 'a4-item-drag',
                        onStart: function(evt) {
                            // Masquer les placeholders
                            const placeholders = document.querySelectorAll('.a4-placeholder');
                            placeholders.forEach(p => p.style.display = 'none');
                        },
                        onEnd: function(evt) {
                            updatePreview();
                        }
                    });
                });

                // Initialiser les éléments glissables
                if (availableSections) {
                    // Clone les sections pour pouvoir les réutiliser
                    const sections = Array.from(availableSections.children);

                    // Créer des sections A4 à partir de ces éléments
                    sections.forEach(section => {
                        section.addEventListener('dragstart', function(e) {
                            const sectionType = this.getAttribute('data-section');
                            e.dataTransfer.setData('text/plain', sectionType);
                        });
                    });
                }

                // Système D&D natif
                document.querySelectorAll('.cv-section').forEach(item => {
                    item.setAttribute('draggable', true);

                    item.addEventListener('dragstart', function(e) {
                        e.dataTransfer.setData('text/plain', this.getAttribute('data-section'));
                        this.classList.add('dragging');
                    });

                    item.addEventListener('dragend', function() {
                        this.classList.remove('dragging');
                    });
                });

                dropZones.forEach(zone => {
                    if (!zone) return;

                    zone.addEventListener('dragover', function(e) {
                        e.preventDefault();
                        this.classList.add('highlight');
                    });

                    zone.addEventListener('dragleave', function() {
                        this.classList.remove('highlight');
                    });

                    zone.addEventListener('drop', function(e) {
                        e.preventDefault();
                        this.classList.remove('highlight');

                        const sectionType = e.dataTransfer.getData('text/plain');
                        addSectionToA4(sectionType, this);
                    });
                });

                // Fonction pour ajouter une section au CV
                function addSectionToA4(sectionType, dropZone) {
                    // Créer un élément de section pour le CV
                    const sectionData = getSectionData(sectionType);

                    // Vérifier si la section existe déjà dans le CV
                    const existingSections = document.querySelectorAll(`.a4-section[data-section="${sectionType}"]`);
                    if (existingSections.length > 0) {
                        showFeedback(`La section ${sectionData.title} existe déjà dans le CV`, 'warning');
                        return;
                    }

                    // Créer la section
                    const section = document.createElement('div');
                    section.className = 'a4-section';
                    section.setAttribute('data-section', sectionType);

                    section.innerHTML = `
                        <div class="a4-section-title">
                            <i class="fas fa-${sectionData.icon}"></i>
                            ${sectionData.title}
                        </div>
                        <div class="a4-section-content">
                            ${sectionData.content}
                        </div>
                    `;

                    // Masquer le placeholder si présent
                    const placeholder = dropZone.querySelector('.a4-placeholder');
                    if (placeholder) placeholder.style.display = 'none';

                    // Ajouter la section à la zone de drop
                    dropZone.appendChild(section);

                    // Effet d'apparition
                    section.style.opacity = '0';
                    section.style.transform = 'translateY(10px)';

                    setTimeout(() => {
                        section.style.transition = 'all 0.3s ease';
                        section.style.opacity = '1';
                        section.style.transform = 'translateY(0)';
                    }, 10);

                    // Sauvegarder l'état du CV
                    updatePreview();

                    showFeedback(`Section ${sectionData.title} ajoutée au CV`, 'success');
                }

                // Obtenir les données pour une section
                function getSectionData(sectionType) {
                    const sections = {
                        'personal': {
                            title: 'Informations personnelles',
                            icon: 'user',
                            content: 'Adresse complète<br>Téléphone: +216 00 000 000<br>Email: exemple@email.com'
                        },
                        'education': {
                            title: 'Formation',
                            icon: 'graduation-cap',
                            content: '<strong>2022-2025</strong> - Diplôme d\'ingénieur, ESPRIT<br><strong>2019-2022</strong> - Licence, FST'
                        },
                        'experience': {
                            title: 'Expérience professionnelle',
                            icon: 'briefcase',
                            content: '<strong>2023-Présent</strong> - Développeur Full Stack, Entreprise XYZ<br><strong>2021-2023</strong> - Stagiaire, Entreprise ABC'
                        },
                        'skills': {
                            title: 'Compétences',
                            icon: 'tools',
                            content: 'HTML/CSS, JavaScript, PHP, Python, MySQL, MongoDB'
                        },
                        'languages': {
                            title: 'Langues',
                            icon: 'language',
                            content: 'Français (Natif), Anglais (Courant), Arabe (Natif)'
                        },
                        'projects': {
                            title: 'Projets',
                            icon: 'project-diagram',
                            content: '<strong>Projet X</strong> - Description du projet<br><strong>Projet Y</strong> - Description du projet'
                        }
                    };

                    return sections[sectionType] || {
                        title: 'Section personnalisée',
                        icon: 'plus',
                        content: 'Contenu personnalisé'
                    };
                }

                // Mettre à jour l'aperçu du CV
                function updatePreview() {
                    // Mettre à jour la structure dans le localStorage
                    const layout = document.querySelector('.cv-layout-option.active').getAttribute('data-layout');

                    const structure = {
                        main: Array.from(document.querySelectorAll('#mainDropZone .a4-section')).map(section => section.getAttribute('data-section')),
                        sidebar: Array.from(document.querySelectorAll('#sidebarDropZone .a4-section')).map(section => section.getAttribute('data-section'))
                    };

                    localStorage.setItem('cvPreviewStructure', JSON.stringify({
                        layout: layout,
                        structure: structure
                    }));

                    // Montrer ou masquer les placeholders
                    const mainDropZone = document.getElementById('mainDropZone');
                    const sidebarDropZone = document.getElementById('sidebarDropZone');

                    if (mainDropZone && mainDropZone.querySelectorAll('.a4-section').length === 0) {
                        let placeholder = mainDropZone.querySelector('.a4-placeholder');
                        if (!placeholder) {
                            placeholder = document.createElement('div');
                            placeholder.className = 'a4-placeholder';
                            placeholder.textContent = 'Glissez les sections ici';
                            mainDropZone.appendChild(placeholder);
                        }
                        placeholder.style.display = 'block';
                    }

                    if (sidebarDropZone && sidebarDropZone.querySelectorAll('.a4-section').length === 0) {
                        let placeholder = sidebarDropZone.querySelector('.a4-placeholder');
                        if (!placeholder) {
                            placeholder = document.createElement('div');
                            placeholder.className = 'a4-placeholder';
                            placeholder.textContent = 'Glissez les sections ici';
                            sidebarDropZone.appendChild(placeholder);
                        }
                        placeholder.style.display = 'block';
                    }
                }

                // Reset le CV
                resetBtn.addEventListener('click', function() {
                    // Vider les zones de drop
                    dropZones.forEach(zone => {
                        if (!zone) return;

                        // Supprimer toutes les sections
                        const sections = zone.querySelectorAll('.a4-section');
                        sections.forEach(section => section.remove());

                        // Réinitialiser le placeholder
                        let placeholder = zone.querySelector('.a4-placeholder');
                        if (!placeholder) {
                            placeholder = document.createElement('div');
                            placeholder.className = 'a4-placeholder';
                            placeholder.textContent = 'Glissez les sections ici';
                            zone.appendChild(placeholder);
                        }
                        placeholder.style.display = 'block';
                    });

                    // Reset le layout
                    document.querySelector('[data-layout="one-column"]').click();

                    // Supprimer les données du localStorage
                    localStorage.removeItem('cvPreviewStructure');

                    showFeedback('Aperçu du CV réinitialisé', 'info');
                });

                // Charger la structure sauvegardée
                loadSavedStructure();
                function loadSavedStructure() {
                    const savedStructure = localStorage.getItem('cvPreviewStructure');

                    if (savedStructure) {
                        try {
                            const data = JSON.parse(savedStructure);

                            // Appliquer le layout
                            const layoutOption = document.querySelector(`[data-layout="${data.layout}"]`);
                            if (layoutOption) layoutOption.click();

                            // Appliquer les sections
                            // Note: Une implémentation complète serait plus complexe
                        } catch (e) {
                            console.error('Error loading saved CV structure:', e);
                        }
                    }
                }
            }
        });
    </script>
{% endblock %}
==================================================

Fichier: Templates\cv_generator\_additional.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_additional.html.twig
-----
<div class="form-section" id="additionalSection">
    <h4 class="form-section-title">
        <i class="fas fa-plus-circle"></i>
        Additional Information
    </h4>
    <div class="row g-4">
        <div class="col-md-6">
            <label class="form-label">Languages</label>
            <textarea class="form-control" name="languages" rows="2" placeholder="e.g. English (Fluent), French (Intermediate), Arabic (Native)"></textarea>
        </div>
        <div class="col-md-6">
            <label class="form-label">Interests & Hobbies</label>
            <textarea class="form-control" name="interests" rows="2" placeholder="e.g. Reading, Photography, Traveling"></textarea>
        </div>
        <div class="col-md-12">
            <label class="form-label">Publications/Projects/Certifications</label>
            <textarea class="form-control" name="certifications" rows="4" placeholder="List any relevant certifications, publications, or notable projects"></textarea>
        </div>
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_education.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_education.html.twig
-----
<div class="form-section" id="educationSection">
    <h4 class="form-section-title">
        <i class="fas fa-graduation-cap"></i>
        Education
    </h4>
    <div id="educationContainer">
        <div class="entry-container">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Degree / Certificate</label>
                    <input type="text" class="form-control" name="education[0][degree]" placeholder="e.g. Bachelor of Science in Computer Science" data-required="true">
                </div>
                <div class="col-md-6">
                    <label class="form-label">Institution</label>
                    <input type="text" class="form-control" name="education[0][institution]" placeholder="e.g. ESPRIT School of Engineering" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="education[0][startDate]" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">End Date</label>
                    <div class="input-group">
                        <input type="date" class="form-control" name="education[0][endDate]">
                        <div class="input-group-text">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="currentEducation0">
                                <label class="form-check-label" for="currentEducation0">Present</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" name="education[0][description]" rows="2" placeholder="Include relevant coursework, honors, achievements, etc."></textarea>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-add" id="addEducation">
        <i class="fas fa-plus"></i> Add Another Education
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_experience.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_experience.html.twig
-----
<div class="form-section" id="experienceSection">
    <h4 class="form-section-title">
        <i class="fas fa-briefcase"></i>
        Work Experience
    </h4>
    <div id="experienceContainer">
        <div class="entry-container">
            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Position / Job Title</label>
                    <input type="text" class="form-control" name="experience[0][position]" placeholder="e.g. Senior Developer" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Company / Organization</label>
                    <input type="text" class="form-control" name="experience[0][company]" placeholder="e.g. Tech Solutions Inc." required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="experience[0][startDate]" required>
                </div>
                <div class="col-md-6">
                    <label class="form-label">End Date</label>
                    <div class="input-group">
                        <input type="date" class="form-control" name="experience[0][endDate]">
                        <div class="input-group-text">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="currentPosition0">
                                <label class="form-check-label" for="currentPosition0">Present</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-12">
                    <label class="form-label">Description</label>
                    <textarea class="form-control" name="experience[0][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
                </div>
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-add" id="addExperience">
        <i class="fas fa-plus"></i> Add Another Experience
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_form_scripts.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_form_scripts.html.twig
-----
document.addEventListener('DOMContentLoaded', function() {
// Form Section Navigation
function initFormNavigation() {
const sections = document.querySelectorAll('.form-section-page');
const nextButtons = document.querySelectorAll('.next-section');
const prevButtons = document.querySelectorAll('.prev-section');
const reviewButton = document.querySelector('.btn-submit-review');
const progressBar = document.querySelector('.progress-bar');
const stepItems = document.querySelectorAll('.step-item');

// Show section
function showSection(sectionId) {
// Hide all sections
sections.forEach(section => {
section.classList.remove('active');
});

// Show the target section
const targetSection = document.getElementById('section-' + sectionId);
if (targetSection) {
targetSection.classList.add('active');

// Update progress bar
if (progressBar) {
progressBar.style.width = ((sectionId - 1) * 20) + '%';
}

// Update step items
stepItems.forEach((step, index) => {
if (index + 1 < sectionId) {
step.classList.add('completed');
step.classList.remove('active');
} else if (index + 1 === parseInt(sectionId)) {
step.classList.add('active');
step.classList.remove('completed');
} else {
step.classList.remove('active', 'completed');
}
});

// Scroll to top of form
const formCard = document.querySelector('.card');
if (formCard) {
formCard.scrollIntoView({ behavior: 'smooth', block: 'start' });
}
}
}

// Next button click
nextButtons.forEach(button => {
button.addEventListener('click', function() {
const nextSection = this.getAttribute('data-next');
if (nextSection) {
// Validate current section here if needed
showSection(nextSection);
}
});
});

// Previous button click
prevButtons.forEach(button => {
button.addEventListener('click', function() {
const prevSection = this.getAttribute('data-prev');
if (prevSection) {
showSection(prevSection);
}
});
});

// Review button click
if (reviewButton) {
reviewButton.addEventListener('click', function() {
// Generate review content
generateReview();
showSection('6');
});
}

// Generate review content
function generateReview() {
const reviewContent = document.getElementById('reviewContent');
if (!reviewContent) return;

const firstName = document.getElementById('firstName')?.value || 'First Name';
const lastName = document.getElementById('lastName')?.value || 'Last Name';

// Generate comprehensive review HTML with all form data
let reviewHTML = `
<div class="row">
    <div class="col-md-12 mb-4">
        <h5>Personal Information</h5>
        <table class="table table-bordered table-sm">
            <tbody>
            <tr>
                <th>Name</th>
                <td>${firstName} ${lastName}</td>
            </tr>
            <tr>
                <th>Job Title</th>
                <td>${document.getElementById('jobTitle')?.value || '-'}</td>
            </tr>
            <tr>
                <th>Email</th>
                <td>${document.getElementById('email')?.value || '-'}</td>
            </tr>
            <tr>
                <th>Phone</th>
                <td>${document.getElementById('phone')?.value || '-'}</td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-12 mb-4">
        <h5>Education</h5>
        <ul class="list-group">
            `;

            // Add education entries
            const educationEntries = document.querySelectorAll('#educationContainer .entry-container');
            if (educationEntries.length > 0) {
            educationEntries.forEach((entry, index) => {
            const degree = entry.querySelector('input[name$="[degree]"]')?.value || '-';
            const institution = entry.querySelector('input[name$="[institution]"]')?.value || '-';

            reviewHTML += `
            <li class="list-group-item">
                <strong>${degree}</strong> at ${institution}
            </li>
            `;
            });
            } else {
            reviewHTML += `
            <li class="list-group-item text-muted">No education entries added</li>
            `;
            }

            reviewHTML += `
        </ul>
    </div>
    <div class="col-md-12 mb-4">
        <h5>Experience</h5>
        <ul class="list-group">
            `;

            // Add experience entries
            const experienceEntries = document.querySelectorAll('#experienceContainer .entry-container');
            if (experienceEntries.length > 0) {
            experienceEntries.forEach((entry, index) => {
            const position = entry.querySelector('input[name$="[position]"]')?.value || '-';
            const company = entry.querySelector('input[name$="[company]"]')?.value || '-';

            reviewHTML += `
            <li class="list-group-item">
                <strong>${position}</strong> at ${company}
            </li>
            `;
            });
            } else {
            reviewHTML += `
            <li class="list-group-item text-muted">No experience entries added</li>
            `;
            }

            reviewHTML += `
        </ul>
    </div>
    <div class="col-md-12">
        <h5>Skills</h5>
        <div>
            `;

            // Add skills
            const skills = document.querySelectorAll('.skill-badge');
            if (skills.length > 0) {
            skills.forEach(skill => {
            const skillText = skill.textContent.replace('×', '').trim();
            reviewHTML += `<span class="badge bg-secondary m-1">${skillText}</span>`;
            });
            } else {
            reviewHTML += `<p class="text-muted">No skills added</p>`;
            }

            reviewHTML += `
        </div>
    </div>
</div>
`;

reviewContent.innerHTML = reviewHTML;
}
}

// Autofill functionality
function setupAutofill() {
const autofillBtn = document.getElementById('autofillBtn');
if (!autofillBtn) return;

autofillBtn.addEventListener('click', function() {
// Get sample data
const sampleDataElement = document.getElementById('sampleData');
if (!sampleDataElement) return;

try {
const sampleData = JSON.parse(sampleDataElement.dataset.sample);

// Fill Personal Information
if (sampleData.firstName) document.getElementById('firstName').value = sampleData.firstName;
if (sampleData.lastName) document.getElementById('lastName').value = sampleData.lastName;
if (sampleData.jobTitle) document.getElementById('jobTitle').value = sampleData.jobTitle;
if (sampleData.email) document.getElementById('email').value = sampleData.email;
if (sampleData.phone) document.getElementById('phone').value = sampleData.phone;
if (sampleData.address) document.getElementById('address').value = sampleData.address;
if (sampleData.summary) document.getElementById('summary').value = sampleData.summary;

// Fill Education (remove existing and add new ones from sample data)
const educationContainer = document.getElementById('educationContainer');
if (educationContainer && sampleData.education && Array.isArray(sampleData.education)) {
// Clear existing entries except the first one
while (educationContainer.children.length > 1) {
educationContainer.removeChild(educationContainer.lastChild);
}

// Fill the first education entry
if (sampleData.education.length > 0) {
const firstEntry = educationContainer.children[0];
fillEducationEntry(firstEntry, sampleData.education[0]);

// Add additional education entries
for (let i = 1; i < sampleData.education.length; i++) {
// Trigger click on "Add Another Education" button
document.getElementById('addEducation').click();
// Fill the newly added entry
const newEntry = educationContainer.lastChild;
fillEducationEntry(newEntry, sampleData.education[i]);
}
}
}

// Fill Experience (remove existing and add new ones from sample data)
const experienceContainer = document.getElementById('experienceContainer');
if (experienceContainer && sampleData.experience && Array.isArray(sampleData.experience)) {
// Clear existing entries
experienceContainer.innerHTML = '';

// Add experience entries
sampleData.experience.forEach((exp, index) => {
// Create template for the experience entry
const template = `
<div class="entry-container">
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Position / Job Title</label>
            <input type="text" class="form-control" name="experience[${index}][position]" placeholder="e.g. Senior Developer" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Company / Organization</label>
            <input type="text" class="form-control" name="experience[${index}][company]" placeholder="e.g. Tech Solutions Inc." required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="experience[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="experience[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentPosition${index}">
                        <label class="form-check-label" for="currentPosition${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="experience[${index}][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
        </div>
    </div>
</div>
`;

experienceContainer.insertAdjacentHTML('beforeend', template);
const newEntry = experienceContainer.lastChild;

// Fill the experience entry
if (exp.position) newEntry.querySelector('input[name$="[position]"]').value = exp.position;
if (exp.company) newEntry.querySelector('input[name$="[company]"]').value = exp.company;
if (exp.startDate) newEntry.querySelector('input[name$="[startDate]"]').value = exp.startDate;

if (exp.endDate) {
newEntry.querySelector('input[name$="[endDate]"]').value = exp.endDate;
} else {
// Check the "Present" checkbox if endDate is empty
const checkbox = newEntry.querySelector(`#currentPosition${index}`);
if (checkbox) checkbox.checked = true;
}

if (exp.description) newEntry.querySelector('textarea[name$="[description]"]').value = exp.description;
});
}

// Fill Skills
if (sampleData.skills && Array.isArray(sampleData.skills)) {
// Clear existing skills
const skillsDisplay = document.getElementById('skillsDisplay');
if (skillsDisplay) {
skillsDisplay.innerHTML = '';
}

// Add skills
sampleData.skills.forEach(skill => {
addSkill(skill);
});
}

// Fill Additional Information
if (sampleData.languages) document.querySelector('textarea[name="languages"]').value = sampleData.languages;
if (sampleData.interests) document.querySelector('textarea[name="interests"]').value = sampleData.interests;
if (sampleData.certifications) document.querySelector('textarea[name="certifications"]').value = sampleData.certifications;

// Show success message
alert('Form autofilled with sample data!');

} catch (error) {
console.error('Error autofilling form:', error);
alert('Could not autofill the form. Please try again.');
}
});

// Helper function to fill education entry
function fillEducationEntry(entry, educationData) {
if (educationData.degree) entry.querySelector('input[name$="[degree]"]').value = educationData.degree;
if (educationData.institution) entry.querySelector('input[name$="[institution]"]').value = educationData.institution;
if (educationData.startDate) entry.querySelector('input[name$="[startDate]"]').value = educationData.startDate;

if (educationData.endDate) {
entry.querySelector('input[name$="[endDate]"]').value = educationData.endDate;
} else {
// Check the "Present" checkbox if endDate is empty
const checkboxId = entry.querySelector('.form-check-input').id;
document.getElementById(checkboxId).checked = true;
}

if (educationData.description) entry.querySelector('textarea[name$="[description]"]').value = educationData.description;
}
}

// Initialize form navigation
initFormNavigation();

// Initialize autofill functionality
setupAutofill();

// Add Education Entry
document.getElementById('addEducation').addEventListener('click', function() {
const container = document.getElementById('educationContainer');
const index = container.children.length;
const template = `
<div class="entry-container position-relative">
    <button type="button" class="btn-remove" onclick="this.parentElement.remove()">×</button>
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Degree / Certificate</label>
            <input type="text" class="form-control" name="education[${index}][degree]" placeholder="e.g. Bachelor of Science in Computer Science" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Institution</label>
            <input type="text" class="form-control" name="education[${index}][institution]" placeholder="e.g. ESPRIT School of Engineering" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="education[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="education[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentEducation${index}">
                        <label class="form-check-label" for="currentEducation${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="education[${index}][description]" rows="2" placeholder="Include relevant coursework, honors, achievements, etc."></textarea>
        </div>
    </div>
</div>
`;
container.insertAdjacentHTML('beforeend', template);
});

// Add Experience Entry
document.getElementById('addExperience').addEventListener('click', function() {
const container = document.getElementById('experienceContainer');
const index = container.children.length;
const template = `
<div class="entry-container position-relative">
    <button type="button" class="btn-remove" onclick="this.parentElement.remove()">×</button>
    <div class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Position / Job Title</label>
            <input type="text" class="form-control" name="experience[${index}][position]" placeholder="e.g. Senior Developer" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Company / Organization</label>
            <input type="text" class="form-control" name="experience[${index}][company]" placeholder="e.g. Tech Solutions Inc." required>
        </div>
        <div class="col-md-6">
            <label class="form-label">Start Date</label>
            <input type="date" class="form-control" name="experience[${index}][startDate]" required>
        </div>
        <div class="col-md-6">
            <label class="form-label">End Date</label>
            <div class="input-group">
                <input type="date" class="form-control" name="experience[${index}][endDate]">
                <div class="input-group-text">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="currentPosition${index}">
                        <label class="form-check-label" for="currentPosition${index}">Present</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description</label>
            <textarea class="form-control" name="experience[${index}][description]" rows="4" placeholder="Describe your responsibilities, achievements, projects, etc."></textarea>
        </div>
    </div>
</div>
`;
container.insertAdjacentHTML('beforeend', template);
});

// Skills Management
const skillInput = document.getElementById('skillInput');
const addSkillBtn = document.getElementById('addSkillBtn');
const skillsDisplay = document.getElementById('skillsDisplay');
const skillsContainer = document.getElementById('skillsContainer');

function addSkill(skillText) {
if(!skillText) return;

// Create badge
const badge = document.createElement('span');
badge.className = 'skill-badge';
badge.textContent = skillText;

// Remove button
const removeBtn = document.createElement('button');
removeBtn.textContent = '×';
removeBtn.onclick = function() {
badge.remove();
updateHiddenInputs();
};

badge.appendChild(removeBtn);
skillsDisplay.appendChild(badge);

// Update hidden inputs
updateHiddenInputs();

// Clear input
if (skillInput) skillInput.value = '';
}

function updateHiddenInputs() {
// Clear container
skillsContainer.innerHTML = '';

// Get all skills
const badges = skillsDisplay.querySelectorAll('.skill-badge');

// Create hidden inputs
badges.forEach((badge, index) => {
const input = document.createElement('input');
input.type = 'hidden';
input.name = `skills[]`;
input.value = badge.textContent.replace('×', '').trim();

skillsContainer.appendChild(input);
});
}

// Add skill button click
if (addSkillBtn) {
addSkillBtn.addEventListener('click', function() {
addSkill(skillInput.value.trim());
});
}

// Enter key press
if (skillInput) {
skillInput.addEventListener('keypress', function(e) {
if(e.key === 'Enter') {
e.preventDefault();
addSkill(this.value.trim());
}
});
}

// Preview functionality
const previewBtn = document.querySelector('.btn-preview');
const cvPreview = document.getElementById('cvPreview');
const closePreview = document.getElementById('closePreview');
const previewContent = document.getElementById('previewContent');

if(previewBtn && cvPreview && closePreview) {
previewBtn.addEventListener('click', function() {
// Generate preview content
generatePreview();

// Show preview panel
cvPreview.classList.add('show');
});

closePreview.addEventListener('click', function() {
cvPreview.classList.remove('show');
});
}

function generatePreview() {
if (!previewContent) return;

const firstName = document.getElementById('firstName')?.value || 'First Name';
const lastName = document.getElementById('lastName')?.value || 'Last Name';
const jobTitle = document.getElementById('jobTitle')?.value || 'Job Title';
const email = document.getElementById('email')?.value || 'email@example.com';
const phone = document.getElementById('phone')?.value || 'Phone Number';
const address = document.getElementById('address')?.value || 'Address';
const summary = document.getElementById('summary')?.value || 'Professional Summary';

let previewHTML = `
<div class="preview-section">
    <h5>${firstName} ${lastName}</h5>
    <p class="text-muted">${jobTitle}</p>
    <div class="small mb-3">
        <div><i class="fas fa-envelope me-2"></i>${email}</div>
        <div><i class="fas fa-phone me-2"></i>${phone}</div>
        <div><i class="fas fa-map-marker-alt me-2"></i>${address}</div>
    </div>
    <p>${summary}</p>
</div>
`;

// Add education
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-graduation-cap me-2"></i>Education</h6>
    `;

    const educationContainers = document.querySelectorAll('#educationContainer .entry-container');
    educationContainers.forEach(container => {
    const degree = container.querySelector('input[name$="[degree]"]')?.value || 'Degree';
    const institution = container.querySelector('input[name$="[institution]"]')?.value || 'Institution';
    const startDate = container.querySelector('input[name$="[startDate]"]')?.value || '';
    const endDate = container.querySelector('input[name$="[endDate]"]')?.value || 'Present';

    // Check if "Present" checkbox is checked
    const checkboxId = container.querySelector('.form-check-input')?.id;
    const isPresent = checkboxId ? document.getElementById(checkboxId).checked : false;

    const endDateDisplay = isPresent ? 'Present' : (endDate !== 'Present' ? new Date(endDate).getFullYear() : '');

    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">${degree}</div>
        <div>${institution} (${startDate ? new Date(startDate).getFullYear() : ''} - ${endDateDisplay})</div>
    </div>
    `;
    });

    previewHTML += `</div>`;

// Add experience
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-briefcase me-2"></i>Experience</h6>
    `;

    const experienceContainers = document.querySelectorAll('#experienceContainer .entry-container');
    experienceContainers.forEach(container => {
    const position = container.querySelector('input[name$="[position]"]')?.value || 'Position';
    const company = container.querySelector('input[name$="[company]"]')?.value || 'Company';
    const description = container.querySelector('textarea[name$="[description]"]')?.value || '';
    const startDate = container.querySelector('input[name$="[startDate]"]')?.value || '';
    const endDate = container.querySelector('input[name$="[endDate]"]')?.value || '';

    // Check if "Present" checkbox is checked
    const checkboxId = container.querySelector('.form-check-input')?.id;
    const isPresent = checkboxId ? document.getElementById(checkboxId).checked : false;

    const startDateFormatted = startDate ? new Date(startDate).toLocaleDateString() : '';
    const endDateFormatted = isPresent ? 'Present' : (endDate ? new Date(endDate).toLocaleDateString() : '');
    const dateRange = startDateFormatted || endDateFormatted ? `${startDateFormatted} - ${endDateFormatted}` : '';

    previewHTML += `
    <div class="mb-3">
        <div class="fw-bold">${position}</div>
        <div class="d-flex justify-content-between">
            <span>${company}</span>
            <small class="text-muted">${dateRange}</small>
        </div>
        <div class="small mt-1">${description}</div>
    </div>
    `;
    });

    previewHTML += `</div>`;

// Add skills
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-tools me-2"></i>Skills</h6>
    <div class="d-flex flex-wrap">
        `;

        const skills = document.querySelectorAll('.skill-badge');
        skills.forEach(skill => {
        const skillText = skill.textContent.replace('×', '').trim();
        previewHTML += `<span class="badge bg-light text-dark m-1">${skillText}</span>`;
        });

        previewHTML += `
    </div>
</div>
`;

// Add additional information if available
const languages = document.querySelector('textarea[name="languages"]')?.value;
const interests = document.querySelector('textarea[name="interests"]')?.value;
const certifications = document.querySelector('textarea[name="certifications"]')?.value;

if (languages || interests || certifications) {
previewHTML += `
<div class="preview-section mt-3">
    <h6 class="border-bottom pb-2 mb-2"><i class="fas fa-plus-circle me-2"></i>Additional Information</h6>
    `;

    if (languages) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Languages</div>
        <div>${languages}</div>
    </div>
    `;
    }

    if (interests) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Interests & Hobbies</div>
        <div>${interests}</div>
    </div>
    `;
    }

    if (certifications) {
    previewHTML += `
    <div class="mb-2">
        <div class="fw-bold">Publications/Projects/Certifications</div>
        <div>${certifications.replace(/\n/g, '<br>')}</div>
    </div>
    `;
    }

    previewHTML += `</div>`;
}

previewContent.innerHTML = previewHTML;
}
});
==================================================

Fichier: Templates\cv_generator\_languages.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_languages.html.twig
-----
<div class="section-title">
    <i class="fas fa-language"></i>
    <h3>Languages</h3>
</div>

<div class="alert alert-info">
    <i class="fas fa-info-circle me-2"></i>
    Add languages you speak and indicate your proficiency level (e.g., "English (Fluent)", "French (Intermediate)").
</div>

<div id="languagesContainer" class="mb-4">
    <!-- Languages will be added here dynamically -->
</div>

<div class="input-group mb-3">
    <input type="text" class="form-control" id="languageInput" placeholder="Enter a language and proficiency (e.g., English (Native))">
    <button class="btn btn-primary" type="button" id="addLanguageBtn">
        <i class="fas fa-plus me-2"></i>Add
    </button>
</div>
==================================================

Fichier: Templates\cv_generator\_personal_info.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_personal_info.html.twig
-----
<div class="section-title">
    <i class="fas fa-user-circle"></i>
    <h3>Personal Information</h3>
</div>

<div class="upload-container mb-4 text-center">
    <div class="profile-photo-wrapper d-inline-block">
        <img id="photoPreview" src="{{ asset('images/default-profile.png') }}" alt="Profile Photo Preview" class="profile-photo">
    </div>
    <div class="mt-3">
        <label for="photoInput" class="btn btn-outline-secondary">
            <i class="fas fa-camera me-2"></i>Upload Photo
        </label>
        <input type="file" id="photoInput" name="photo" accept="image/*" style="display: none;">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="firstName" class="form-label">First Name</label>
        <input type="text" class="form-control" id="firstName" name="firstName" placeholder="Enter your first name" required>
    </div>
    <div class="col-md-6">
        <label for="lastName" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="lastName" name="lastName" placeholder="Enter your last name" required>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <label for="position" class="form-label">Professional Title</label>
        <input type="text" class="form-control" id="position" name="position" placeholder="e.g. Software Developer, Project Manager, etc.">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="email" class="form-label">Email</label>
        <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required>
    </div>
    <div class="col-md-6">
        <label for="phone" class="form-label">Phone</label>
        <input type="tel" class="form-control" id="phone" name="phone" placeholder="e.g. +216 12 345 678">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <label for="address" class="form-label">Address</label>
        <input type="text" class="form-control" id="address" name="address" placeholder="Street Address">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="city" class="form-label">City</label>
        <input type="text" class="form-control" id="city" name="city" placeholder="City">
    </div>
    <div class="col-md-6">
        <label for="country" class="form-label">Country</label>
        <input type="text" class="form-control" id="country" name="country" placeholder="Country">
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label for="github" class="form-label">GitHub</label>
        <div class="input-group">
            <span class="input-group-text"><i class="fab fa-github"></i></span>
            <input type="text" class="form-control" id="github" name="github" placeholder="github.com/username">
        </div>
    </div>
    <div class="col-md-6">
        <label for="linkedin" class="form-label">LinkedIn</label>
        <div class="input-group">
            <span class="input-group-text"><i class="fab fa-linkedin"></i></span>
            <input type="text" class="form-control" id="linkedin" name="linkedin" placeholder="linkedin.com/in/username">
        </div>
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_preview.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_preview.html.twig
-----
<div class="form-section" id="skillsSection">
    <h4 class="form-section-title">
        <i class="fas fa-tools"></i>
        Skills
        <small class="float-end fs-6 text-muted">
            Last updated: 2025-04-18 21:05:57 by Mohamed-abidi-95
        </small>
    </h4>
    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Add Skills</label>
            <div class="skills-input-group">
                <input type="text" id="skillInput" class="form-control" placeholder="e.g. Programming, Leadership, Project Management">
                <button type="button" id="addSkillBtn" class="btn btn-primary">Add</button>
            </div>
            <small class="text-muted">Press Enter or click Add button to add skills</small>
        </div>
        <div class="col-md-6">
            <label class="form-label">Your Skills</label>
            <div id="skillsDisplay" class="pt-2">
                <!-- Skills badges will appear here -->
            </div>
        </div>
    </div>
    <div id="skillsContainer" class="d-none">
        <!-- Hidden input fields for skills -->
    </div>
</div>
==================================================

Fichier: Templates\cv_generator\_progress.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_progress.html.twig
-----
<div class="steps-container mb-4">
    <div class="step-item {% if currentStep >= 1 %}active{% endif %}">
        <div class="step-number">1</div>
        <div class="step-title">Personal</div>
    </div>
    <div class="step-item {% if currentStep >= 2 %}active{% endif %}">
        <div class="step-number">2</div>
        <div class="step-title">Education</div>
    </div>
    <div class="step-item {% if currentStep >= 3 %}active{% endif %}">
        <div class="step-number">3</div>
        <div class="step-title">Experience</div>
    </div>
    <div class="step-item {% if currentStep >= 4 %}active{% endif %}">
        <div class="step-number">4</div>
        <div class="step-title">Skills</div>
    </div>
    <div class="step-item {% if currentStep >= 5 %}active{% endif %}">
        <div class="step-number">5</div>
        <div class="step-title">Languages</div>
    </div>
    <div class="step-item {% if currentStep >= 6 %}active{% endif %}">
        <div class="step-number">6</div>
        <div class="step-title">Additional</div>
    </div>
    <div class="step-item {% if currentStep >= 7 %}active{% endif %}">
        <div class="step-number">7</div>
        <div class="step-title">Review</div>
    </div>
</div>

<div class="progress-container">
    <div class="progress-bar" style="width: {{ (currentStep / 7) * 100 }}%"></div>
</div>
==================================================

Fichier: Templates\cv_generator\_review.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_review.html.twig
-----
<div class="section-title">
    <i class="fas fa-check-circle"></i>
    <h3>Review Your CV</h3>
</div>

<div class="alert alert-info">
    <i class="fas fa-info-circle"></i>
    Please review your CV information before generating the final document.
</div>

<div id="reviewContent" class="p-3 border rounded bg-light">
    <!-- Review content will be generated here -->
</div>

<div class="mt-4">
    <h4>Choose Template</h4>
    <div class="row">
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-header bg-success text-white">Green Professional Template</div>
                <div class="card-body text-center">
                    <img src="{{ asset('images/template_green.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Green Template Preview">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="template" id="template-green" value="green" checked>
                        <label class="form-check-label" for="template-green">
                            Select Green Template
                        </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">Blue Modern Template</div>
                <div class="card-body text-center">
                    <img src="{{ asset('images/template_blue.jpg') }}" class="img-fluid mb-3" style="max-height: 200px;" alt="Blue Template Preview">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="template" id="template-blue" value="blue">
                        <label class="form-check-label" for="template-blue">
                            Select Blue Template
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" name="photoData" id="photoDataField" value="">

<!-- Section Navigation -->
<div class="form-navigation-buttons">
    <button type="button" class="btn btn-secondary prev-section" data-prev="5">
        <i class="fas fa-arrow-left"></i> Previous
    </button>
    <button type="submit" class="btn btn-primary btn-submit">
        <i class="fas fa-file-download"></i> Generate CV
    </button>
</div>

<script>
    // When the form is submitted, include the photo data if available
    document.addEventListener('DOMContentLoaded', function() {
        const photoDataField = document.getElementById('photoDataField');
        const savedPhotoData = localStorage.getItem('cvProfilePhoto');

        if (photoDataField && savedPhotoData) {
            photoDataField.value = savedPhotoData;
        }
    });
</script>
==================================================

Fichier: Templates\cv_generator\_skills.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\cv_generator\_skills.html.twig
-----
<div class="form-section" id="skillsSection">
    <h4 class="form-section-title">
        <i class="fas fa-tools"></i>
        Skills
    </h4>
    <div class="row mb-4">
        <div class="col-md-6">
            <label class="form-label">Add Skills</label>
            <div class="skills-input-group">
                <input type="text" id="skillInput" class="form-control" placeholder="e.g. Programming, Leadership, Project Management">
                <button type="button" id="addSkillBtn" class="btn btn-primary">Add</button>
            </div>
            <small class="text-muted">Press Enter or click Add button to add skills</small>
        </div>
        <div class="col-md-6">
            <label class="form-label">Your Skills</label>
            <div id="skillsDisplay" class="pt-2">
                <!-- Skills badges will appear here -->
            </div>
        </div>
    </div>
    <div id="skillsContainer" class="d-none">
        <!-- Hidden input fields for skills -->
    </div>
</div>
==================================================

Fichier: Templates\partials\section_editor.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\section_editor.html.twig
-----
<!-- Sélecteur de sections principales -->
<div class="sections-selector">
    <h3 class="sections-selector-title">Sections de votre CV</h3>
    <ul class="sections-list">
        <li class="section-item active" data-section="personal">
            <div class="section-icon">
                <i class="fas fa-user"></i>
            </div>
            <p class="section-name">Informations personnelles</p>
            <span class="section-status">
                <i class="fas fa-check"></i>
            </span>
        </li>
        <li class="section-item" data-section="education">
            <div class="section-icon">
                <i class="fas fa-graduation-cap"></i>
            </div>
            <p class="section-name">Éducation</p>
        </li>
        <li class="section-item" data-section="experience">
            <div class="section-icon">
                <i class="fas fa-briefcase"></i>
            </div>
            <p class="section-name">Expérience pro.</p>
        </li>
        <li class="section-item" data-section="skills">
            <div class="section-icon">
                <i class="fas fa-tools"></i>
            </div>
            <p class="section-name">Compétences</p>
        </li>
        <li class="section-item" data-section="languages">
            <div class="section-icon">
                <i class="fas fa-language"></i>
            </div>
            <p class="section-name">Langues</p>
        </li>
        <li class="section-item" data-section="additional">
            <div class="section-icon">
                <i class="fas fa-plus-circle"></i>
            </div>
            <p class="section-name">Additionnel</p>
        </li>
        <li class="section-item" data-section="review">
            <div class="section-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <p class="section-name">Revue</p>
        </li>
    </ul>
</div>

<!-- Éditeur de section drag-and-drop -->
<div class="section-editor">
    <h3 class="editor-title">
        <i class="fas fa-edit"></i>
        Personnaliser l'ordre des sections
    </h3>
    <ul class="sortable-sections" id="sortableSections">
        <li class="sortable-section-item" data-section="personal">
            <div class="sortable-handle">
                <i class="fas fa-grip-vertical"></i>
            </div>
            <div class="sortable-content">
                <h4 class="sortable-section-name">
                    <i class="fas fa-user"></i>
                    Informations personnelles
                </h4>
                <p class="sortable-description">Nom, contact, photo, résumé professionnel...</p>
            </div>
            <div class="sortable-actions">
                <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                    <i class="fas fa-eye"></i>
                </button>
            </div>
        </li>

        <li class="sortable-section-item" data-section="education">
            <div class="sortable-handle">
                <i class="fas fa-grip-vertical"></i>
            </div>
            <div class="sortable-content">
                <h4 class="sortable-section-name">
                    <i class="fas fa-graduation-cap"></i>
                    Éducation
                </h4>
                <p class="sortable-description">Diplômes, formations, certifications...</p>
            </div>
            <div class="sortable-actions">
                <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                    <i class="fas fa-eye"></i>
                </button>
                <button type="button" class="sortable-btn remove" title="Remove section">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </li>

        <li class="sortable-section-item" data-section="experience">
            <div class="sortable-handle">
                <i class="fas fa-grip-vertical"></i>
            </div>
            <div class="sortable-content">
                <h4 class="sortable-section-name">
                    <i class="fas fa-briefcase"></i>
                    Expérience professionnelle
                </h4>
                <p class="sortable-description">Emplois, stages, projets professionnels...</p>
            </div>
            <div class="sortable-actions">
                <button type="button" class="sortable-btn toggle-visibility visible" title="Toggle visibility">
                    <i class="fas fa-eye"></i>
                </button>
                <button type="button" class="sortable-btn remove" title="Remove section">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </li>

        <li class="sortable-section-item disabled" data-section="skills">
            <div class="sortable-handle">
                <i class="fas fa-grip-vertical"></i>
            </div>
            <div class="sortable-content">
                <h4 class="sortable-section-name">
                    <i class="fas fa-tools"></i>
                    Compétences
                </h4>
                <p class="sortable-description">Compétences techniques, professionnelles...</p>
            </div>
            <div class="sortable-actions">
                <button type="button" class="sortable-btn toggle-visibility hidden" title="Toggle visibility">
                    <i class="fas fa-eye-slash"></i>
                </button>
                <button type="button" class="sortable-btn remove" title="Remove section">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </li>
    </ul>

    <button class="section-add-btn" id="addSectionBtn">
        <i class="fas fa-plus"></i>
        Ajouter une section
    </button>
</div>
==================================================

Fichier: Templates\partials\template_carousel.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\template_carousel.html.twig
-----
<div class="carousel-wrapper" id="template-carousel">
    <!-- Template 1 - Moderne/Professionnel -->
    <div class="carousel-item active" data-carousel-item="0" data-template="template1">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/1.png') }}" alt="Template Tech Expert" class="template-preview">
            <div class="template-details">
                <h3>Tech Expert</h3>
                <p>Un design moderne parfait pour les profils d'ingénierie et tech</p>
                <div class="template-tags">
                    <span class="tag tag-modern">Moderne</span>
                    <span class="tag tag-professional">Professionnel</span>
                    <span class="tag tag-engineering">Ingénierie</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template1">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 2 - Classique/Professionnel -->
    <div class="carousel-item" data-carousel-item="1" data-template="template2">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/2.png') }}" alt="Template Executive" class="template-preview">
            <div class="template-details">
                <h3>Executive</h3>
                <p>Design classique et élégant parfait pour les profils business et management</p>
                <div class="template-tags">
                    <span class="tag tag-classic">Classique</span>
                    <span class="tag tag-professional">Professionnel</span>
                    <span class="tag tag-business">Business</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template2">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 3 - Créatif -->
    <div class="carousel-item" data-carousel-item="2" data-template="template3">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/3.png') }}" alt="Template Innovation" class="template-preview">
            <div class="template-details">
                <h3>Innovation</h3>
                <p>Un design créatif et moderne pour se démarquer</p>
                <div class="template-tags">
                    <span class="tag tag-creative">Créatif</span>
                    <span class="tag tag-modern">Moderne</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template3">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 4 - Académique -->
    <div class="carousel-item" data-carousel-item="3" data-template="template4">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/4.png') }}" alt="Template Académique" class="template-preview">
            <div class="template-details">
                <h3>Academic Plus</h3>
                <p>Idéal pour les profils académiques et recherche</p>
                <div class="template-tags">
                    <span class="tag tag-classic">Classique</span>
                    <span class="tag tag-academic">Académique</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template4">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 5 - Ingénierie Moderne -->
    <div class="carousel-item" data-carousel-item="4" data-template="template5">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/5.png') }}" alt="Template Ingénierie" class="template-preview">
            <div class="template-details">
                <h3>Tech Engineering</h3>
                <p>Spécialement conçu pour les ingénieurs et techniciens</p>
                <div class="template-tags">
                    <span class="tag tag-modern">Moderne</span>
                    <span class="tag tag-engineering">Ingénierie</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template5">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 6 - Business Moderne -->
    <div class="carousel-item" data-carousel-item="5" data-template="template6">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/6.png') }}" alt="Template Business" class="template-preview">
            <div class="template-details">
                <h3>Business Pro</h3>
                <p>Pour les profils professionnels orientés business</p>
                <div class="template-tags">
                    <span class="tag tag-modern">Moderne</span>
                    <span class="tag tag-business">Business</span>
                    <span class="tag tag-professional">Professionnel</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template6">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>

    <!-- Template 7 - Classique Élégant -->
    <div class="carousel-item" data-carousel-item="6" data-template="template7">
        <div class="template-slide">
            <img src="{{ asset('images/cvs/7.png') }}" alt="Template Classique Élégant" class="template-preview">
            <div class="template-details">
                <h3>Classic Elite</h3>
                <p>Élégant et intemporel pour une impression durable</p>
                <div class="template-tags">
                    <span class="tag tag-classic">Classique</span>
                    <span class="tag tag-professional">Professionnel</span>
                </div>
                <button class="btn btn-primary select-template-btn" data-template="template7">
                    Sélectionner ce template
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Carousel controls -->
<button class="carousel-control prev" id="carousel-prev" aria-label="Template précédent">
    <i class="fas fa-chevron-left"></i>
</button>
<button class="carousel-control next" id="carousel-next" aria-label="Template suivant">
    <i class="fas fa-chevron-right"></i>
</button>

<!-- Carousel indicators -->
<div class="carousel-indicators" role="tablist">
    <button class="carousel-indicator active" data-carousel-goto="0" aria-label="Template 1" aria-controls="template-carousel" role="tab" aria-selected="true"></button>
    <button class="carousel-indicator" data-carousel-goto="1" aria-label="Template 2" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
    <button class="carousel-indicator" data-carousel-goto="2" aria-label="Template 3" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
    <button class="carousel-indicator" data-carousel-goto="3" aria-label="Template 4" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
    <button class="carousel-indicator" data-carousel-goto="4" aria-label="Template 5" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
    <button class="carousel-indicator" data-carousel-goto="5" aria-label="Template 6" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
    <button class="carousel-indicator" data-carousel-goto="6" aria-label="Template 7" aria-controls="template-carousel" role="tab" aria-selected="false"></button>
</div>
==================================================

Fichier: Templates\partials\template_selector_sidebar.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\template_selector_sidebar.html.twig
-----
{# template_selector_sidebar.html.twig #}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    :root {
        /* Utilisation des couleurs cohérentes avec votre template principal */
        --primary-color: #ee3124; /* Rouge primaire ESPRIT */
        --primary-light: rgba(238, 49, 36, 0.1);
        --primary-shadow: rgba(238, 49, 36, 0.25);
        --secondary-color: #2d3748; /* Charcoal */
        --accent-color: #718096; /* Slate Gray */
        --light-bg: #faf7f2; /* Light Beige */
        --white-bg: #ffffff; /* White */
        --text-dark: #1a202c; /* Dark Text */
        --text-medium: #2d3748; /* Charcoal pour texte moyen */
        --text-light: #718096; /* Slate Gray */
        --border-color: #e2e8f0;
        --card-shadow: rgba(45, 55, 72, 0.1);
        --font-family-sans-serif: 'Poppins', sans-serif;
    }

    .template-sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 280px;
        background-color: var(--white-bg);
        box-shadow: 2px 0 10px var(--card-shadow);
        z-index: 1000;
        overflow-y: auto;
        transition: transform 0.3s ease-in-out;
        font-family: var(--font-family-sans-serif);
    }

    .template-sidebar.collapsed {
        transform: translateX(-280px);
    }

    .sidebar-header {
        padding: 1.5rem 1rem;
        background-color: var(--secondary-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .sidebar-header h3 {
        font-size: 1.25rem;
        margin: 0;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .sidebar-header .close-sidebar {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        display: none;
    }

    .sidebar-content {
        padding: 1.5rem 1rem;
    }

    .sidebar-section {
        margin-bottom: 2rem;
    }

    .sidebar-section-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--border-color);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .template-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .template-item {
        margin-bottom: 1rem;
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 2px 8px var(--card-shadow);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
        position: relative;
        background-color: var(--light-bg);
    }

    .template-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 12px var(--card-shadow);
    }

    .template-item.selected {
        border: 2px solid var(--primary-color);
    }

    .template-item.selected::after {
        content: '\f00c';
        font-family: 'Font Awesome 6 Free';
        font-weight: 900;
        position: absolute;
        top: 10px;
        right: 10px;
        background-color: var(--primary-color);
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8rem;
    }

    .template-thumbnail {
        width: 100%;
        height: 150px;
        object-fit: cover;
        border-radius: 0.5rem 0.5rem 0 0;
        display: block;
    }

    .template-info {
        padding: 0.75rem 1rem;
        background-color: white;
    }

    .template-name {
        font-weight: 600;
        font-size: 0.95rem;
        margin: 0 0 0.25rem;
        color: var(--text-dark);
    }

    .template-category {
        font-size: 0.8rem;
        color: var(--text-light);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.4rem;
    }

    /* Style pour les tags des différentes catégories */
    .category-tag {
        display: inline-flex;
        align-items: center;
        padding: 0.15rem 0.5rem;
        font-size: 0.7rem;
        border-radius: 20px;
        margin-top: 0.5rem;
        font-weight: 500;
    }

    .tag-modern {
        background-color: rgba(79, 209, 197, 0.15);
        color: #0694a2;
    }

    .tag-classic {
        background-color: rgba(102, 126, 234, 0.15);
        color: #5145cd;
    }

    .tag-creative {
        background-color: rgba(245, 158, 11, 0.15);
        color: #c05621;
    }

    .tag-professional {
        background-color: rgba(16, 185, 129, 0.15);
        color: #057a55;
    }

    .tag-academic {
        background-color: rgba(236, 72, 153, 0.15);
        color: #9d174d;
    }

    .tag-engineering {
        background-color: rgba(37, 99, 235, 0.15);
        color: #1e429f;
    }

    .tag-business {
        background-color: rgba(220, 38, 38, 0.15);
        color: #9b1c1c;
    }

    .filters-section {
        margin-bottom: 1.5rem;
    }

    .filter-group {
        margin-bottom: 1rem;
    }

    .filter-label {
        display: block;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--text-medium);
    }

    .filter-options {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .filter-option {
        padding: 0.35rem 0.75rem;
        font-size: 0.8rem;
        border-radius: 20px;
        background-color: var(--light-bg);
        color: var(--text-medium);
        border: 1px solid var(--border-color);
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .filter-option:hover {
        background-color: var(--primary-light);
        color: var(--primary-color);
    }

    .filter-option.active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    /* Bouton Toggle Sidebar (visible uniquement sur mobile) */
    .sidebar-toggle {
        position: fixed;
        top: 1rem;
        left: 1rem;
        background-color: var(--primary-color);
        color: white;
        border: none;
        width: 45px;
        height: 45px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        cursor: pointer;
        z-index: 1001;
        box-shadow: 0 2px 8px var(--primary-shadow);
        display: none;
    }

    .sidebar-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        display: none;
    }

    /* Contenu principal - décalé par la sidebar */
    .main-content {
        margin-left: 280px;
        padding: 1.5rem;
        transition: margin-left 0.3s ease;
    }

    .main-content.expanded {
        margin-left: 0;
    }

    /* Responsive */
    @media (max-width: 992px) {
        .template-sidebar {
            transform: translateX(-280px);
        }

        .template-sidebar.active {
            transform: translateX(0);
        }

        .sidebar-toggle {
            display: flex;
        }

        .sidebar-overlay.active {
            display: block;
        }

        .sidebar-header .close-sidebar {
            display: block;
        }

        .main-content {
            margin-left: 0;
        }
    }
</style>

<!-- Bouton Toggle Sidebar (visible uniquement sur mobile) -->
<button class="sidebar-toggle" id="sidebarToggle">
    <i class="fas fa-th-large"></i>
</button>

<!-- Overlay pour fermer la sidebar sur mobile -->
<div class="sidebar-overlay" id="sidebarOverlay"></div>

<!-- Sidebar -->
<div class="template-sidebar" id="templateSidebar">
    <!-- Entête de la sidebar -->
    <div class="sidebar-header">
        <h3><i class="fas fa-file-alt"></i> Templates CV</h3>
        <button class="close-sidebar" id="closeSidebar">
            <i class="fas fa-times"></i>
        </button>
    </div>

    <!-- Contenu de la sidebar -->
    <div class="sidebar-content">
        <!-- Section de filtres -->
        <div class="filters-section sidebar-section">
            <div class="sidebar-section-title">
                <i class="fas fa-filter"></i> Filtrer par
            </div>

            <!-- Filtres par style -->
            <div class="filter-group">
                <span class="filter-label">Style</span>
                <div class="filter-options">
                    <button class="filter-option" data-filter="all">Tous</button>
                    <button class="filter-option" data-filter="modern">Moderne</button>
                    <button class="filter-option" data-filter="classic">Classique</button>
                    <button class="filter-option" data-filter="creative">Créatif</button>
                    <button class="filter-option" data-filter="professional">Professionnel</button>
                </div>
            </div>

            <!-- Filtres par domaine -->
            <div class="filter-group">
                <span class="filter-label">Domaine</span>
                <div class="filter-options">
                    <button class="filter-option" data-filter="all">Tous</button>
                    <button class="filter-option" data-filter="engineering">Ingénierie</button>
                    <button class="filter-option" data-filter="business">Business</button>
                    <button class="filter-option" data-filter="academic">Académique</button>
                </div>
            </div>
        </div>

        <!-- Section des templates -->
        <div class="templates-section sidebar-section">
            <div class="sidebar-section-title">
                <i class="fas fa-copy"></i> Templates disponibles
            </div>

            <ul class="template-list" id="templateList">
                <!-- Template 1 - Moderne/Professionnel -->
                <li class="template-item" data-template="template1" data-category="modern professional engineering">
                    <img src="{{ asset('images/cvs/1.png') }}" alt="Template Moderne" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Tech Expert</h4>
                        <div class="template-category">
                            <span class="category-tag tag-modern">Moderne</span>
                            <span class="category-tag tag-professional">Professionnel</span>
                            <span class="category-tag tag-engineering">Ingénierie</span>
                        </div>
                    </div>
                </li>

                <!-- Template 2 - Classique/Professionnel -->
                <li class="template-item" data-template="template2" data-category="classic professional business">
                    <img src="{{ asset('images/cvs/2.png') }}" alt="Template Classique" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Executive</h4>
                        <div class="template-category">
                            <span class="category-tag tag-classic">Classique</span>
                            <span class="category-tag tag-professional">Professionnel</span>
                            <span class="category-tag tag-business">Business</span>
                        </div>
                    </div>
                </li>

                <!-- Template 3 - Créatif -->
                <li class="template-item" data-template="template3" data-category="creative modern">
                    <img src="{{ asset('images/cvs/3.png') }}" alt="Template Créatif" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Innovation</h4>
                        <div class="template-category">
                            <span class="category-tag tag-creative">Créatif</span>
                            <span class="category-tag tag-modern">Moderne</span>
                        </div>
                    </div>
                </li>

                <!-- Template 4 - Académique -->
                <li class="template-item" data-template="template4" data-category="classic academic">
                    <img src="{{ asset('images/cvs/4.png') }}" alt="Template Académique" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Academic Plus</h4>
                        <div class="template-category">
                            <span class="category-tag tag-classic">Classique</span>
                            <span class="category-tag tag-academic">Académique</span>
                        </div>
                    </div>
                </li>

                <!-- Template 5 - Ingénierie Moderne -->
                <li class="template-item" data-template="template5" data-category="modern engineering">
                    <img src="{{ asset('images/cvs/5.png') }}" alt="Template Ingénierie" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Tech Engineering</h4>
                        <div class="template-category">
                            <span class="category-tag tag-modern">Moderne</span>
                            <span class="category-tag tag-engineering">Ingénierie</span>
                        </div>
                    </div>
                </li>

                <!-- Template 6 - Business Moderne -->
                <li class="template-item" data-template="template6" data-category="modern business">
                    <img src="{{ asset('images/cvs/6.png') }}" alt="Template Business" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Business Pro</h4>
                        <div class="template-category">
                            <span class="category-tag tag-modern">Moderne</span>
                            <span class="category-tag tag-business">Business</span>
                            <span class="category-tag tag-professional">Professionnel</span>
                        </div>
                    </div>
                </li>

                <!-- Template 7 - Classique Élégant -->
                <li class="template-item" data-template="template7" data-category="classic professional">
                    <img src="{{ asset('images/cvs/7.png') }}" alt="Template Classique Élégant" class="template-thumbnail">
                    <div class="template-info">
                        <h4 class="template-name">Classic Elite</h4>
                        <div class="template-category">
                            <span class="category-tag tag-classic">Classique</span>
                            <span class="category-tag tag-professional">Professionnel</span>
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>

<!-- Script pour la sidebar -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Récupération des éléments DOM
        const sidebar = document.getElementById('templateSidebar');
        const mainContent = document.querySelector('.main-content') || document.body;
        const sidebarToggle = document.getElementById('sidebarToggle');
        const closeSidebar = document.getElementById('closeSidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');
        const templateItems = document.querySelectorAll('.template-item');
        const filterOptions = document.querySelectorAll('.filter-option');

        // Fonction pour afficher/masquer la sidebar sur mobile
        function toggleSidebar() {
            sidebar.classList.toggle('active');
            sidebarOverlay.classList.toggle('active');
            document.body.classList.toggle('sidebar-open');
        }

        // Écouteurs d'événements pour la sidebar
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', toggleSidebar);
        }

        if (closeSidebar) {
            closeSidebar.addEventListener('click', toggleSidebar);
        }

        if (sidebarOverlay) {
            sidebarOverlay.addEventListener('click', toggleSidebar);
        }

        // Sélection d'un template
        templateItems.forEach(item => {
            item.addEventListener('click', function() {
                // Supprimer la classe selected de tous les templates
                templateItems.forEach(el => {
                    el.classList.remove('selected');
                });

                // Ajouter la classe selected au template cliqué
                this.classList.add('selected');

                // Récupérer l'identifiant du template sélectionné
                const templateId = this.getAttribute('data-template');

                // Stocker la sélection (dans localStorage ou autre)
                localStorage.setItem('selectedTemplate', templateId);

                // Déclencher un événement personnalisé pour informer d'autres scripts de la sélection
                const event = new CustomEvent('templateSelected', { detail: { templateId: templateId } });
                document.dispatchEvent(event);

                // Sur mobile, fermer la sidebar après la sélection
                if (window.innerWidth < 992) {
                    toggleSidebar();
                }
            });
        });

        // Filtrage des templates
        filterOptions.forEach(option => {
            option.addEventListener('click', function() {
                const filterValue = this.getAttribute('data-filter');
                const filterGroup = this.closest('.filter-group');

                // Supprimer la classe active des autres options du même groupe
                if (filterGroup) {
                    const groupOptions = filterGroup.querySelectorAll('.filter-option');
                    groupOptions.forEach(opt => {
                        opt.classList.remove('active');
                    });
                }

                // Ajouter la classe active à l'option cliquée
                this.classList.add('active');

                // Filtrer les templates
                filterTemplates();
            });
        });

        // Fonction pour filtrer les templates en fonction des options sélectionnées
        function filterTemplates() {
            const activeFilters = [];

            // Récupérer tous les filtres actifs
            document.querySelectorAll('.filter-option.active').forEach(option => {
                const filter = option.getAttribute('data-filter');
                if (filter !== 'all') {
                    activeFilters.push(filter);
                }
            });

            // Si aucun filtre actif, ou seulement des "all", afficher tous les templates
            if (activeFilters.length === 0) {
                templateItems.forEach(item => {
                    item.style.display = 'block';
                });
                return;
            }

            // Appliquer les filtres
            templateItems.forEach(item => {
                const categories = item.getAttribute('data-category').split(' ');
                let shouldShow = false;

                // Si un template correspond à au moins un des filtres actifs, l'afficher
                for (let filter of activeFilters) {
                    if (categories.includes(filter)) {
                        shouldShow = true;
                        break;
                    }
                }

                item.style.display = shouldShow ? 'block' : 'none';
            });
        }

        // Vérifier s'il y a un template sélectionné en localStorage
        const savedTemplate = localStorage.getItem('selectedTemplate');
        if (savedTemplate) {
            const template = document.querySelector(`.template-item[data-template="${savedTemplate}"]`);
            if (template) {
                template.classList.add('selected');
            }
        }

        // Initialiser avec tous les templates visibles
        filterOptions[0].classList.add('active'); // Activer le filtre "Tous" par défaut
    });
</script>
==================================================

Fichier: Templates\partials\_header.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\_header.html.twig
-----
<!-- <header class="header-container mb-4">
    <div class="container">
        <div class="logo-container py-2">
            <div class="logo-item">
                <img src="{{ asset('images/logo.png') }}" alt="Logo" class="img-fluid" style="max-height: 60px;">
            </div>
            <div class="logo-item text-center">
                <img src="{{ asset('images/tunisie-removebg-preview.png') }}" alt="Tunisia" class="img-fluid" style="max-height: 80px;">
            </div>
            <div class="logo-item text-end">
                <img src="{{ asset('images/esprim.png') }}" alt="ESPRIM" class="img-fluid" style="max-height: 40px;">
            </div>
        </div>
    </div>
</header> -->
==================================================

Fichier: Templates\partials\_styles.html.twig
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\Templates\partials\_styles.html.twig
-----
<style>
    :root {
        /* Your selected color palette */
        --primary-red: #ee3124;
        --charcoal: #2d3748;
        --light-beige: #faf7f2;
        --slate-gray: #718096;
        --white: #ffffff;
        --dark-text: #1a202c;

        /* Additional utility variables */
        --border-radius: 8px;
        --box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        --transition: all 0.3s ease;
        --card-shadow: 0 4px 6px rgba(45, 55, 72, 0.1), 0 5px 15px rgba(45, 55, 72, 0.05);
    }

    body {
        font-family: 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
        background-color: var(--light-beige);
        color: var(--dark-text);
        line-height: 1.6;
    }

    .header-container {
        background: linear-gradient(to right, var(--white), var(--light-beige));
        box-shadow: var(--box-shadow);
        border-bottom: 1px solid rgba(0,0,0,0.1);
        padding: 1rem 0;
    }

    .logo-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 0;
    }

    .logo-item {
        transition: transform 0.3s;
    }

    .logo-item:hover {
        transform: scale(1.05);
    }

    /* Original sizing for banner images */
    .banner-image {
        width: 100px;
        height: auto;
        transition: transform 0.3s;
    }

    .banner-image:hover {
        transform: scale(1.05);
    }

    .banner-image.center {
        width: 120px;
    }

    /* Enhanced title styling - made 40% smaller */
    .main-title-container {
        text-align: center;
        margin: 2rem auto 2.5rem; /* Reduced margin to match smaller elements */
        position: relative;
        max-width: 600px;
    }

    .main-title {
        color: var(--charcoal);
        font-weight: 800;
        font-size: 1.8rem; /* 40% smaller from 3rem */
        letter-spacing: -0.5px;
        margin: 0;
        position: relative;
        display: inline-block;
        text-transform: uppercase;
    }

    .main-title::after {
        content: '';
        position: absolute;
        bottom: -6px; /* Smaller underline positioning */
        left: 50%;
        transform: translateX(-50%);
        width: 80%;
        height: 3px; /* Smaller underline height */
        background: linear-gradient(to right, var(--primary-red), var(--charcoal));
        border-radius: 2px;
    }

    .main-subtitle {
        color: var(--slate-gray);
        font-size: 1rem; /* Smaller subtitle */
        font-weight: 400;
        margin-top: 1rem; /* Reduced margin */
        font-style: italic;
    }

    .title-accent {
        color: var(--primary-red);
        position: relative;
        display: inline-block;
    }

    .title-accent::before {
        content: '';
        position: absolute;
        top: -3px; /* Smaller positioning */
        left: -6px; /* Smaller positioning */
        width: 15px; /* 40% smaller */
        height: 15px; /* 40% smaller */
        background-color: rgba(238, 49, 36, 0.1);
        border-radius: 50%;
        z-index: -1;
    }

    .title-icon {
        font-size: 1.8rem; /* 40% smaller from 3rem */
        color: var(--primary-red);
        margin-left: 10px; /* Smaller margin */
        vertical-align: middle;
        animation: float 3s ease-in-out infinite;
    }

    @keyframes float {
        0% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-5px); /* Smaller float animation */
        }
        100% {
            transform: translateY(0px);
        }
    }

    /* Adjusted Logo badge styling - 40% smaller */
    .logo-badge {
        background-color: var(--white);
        width: 90px; /* 40% smaller from 150px */
        height: 90px; /* 40% smaller from 150px */
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 1.2rem; /* Smaller margin */
        box-shadow: 0 3px 9px rgba(45, 55, 72, 0.1); /* Smaller shadow */
        border: 3px solid rgba(238, 49, 36, 0.2); /* 40% smaller border */
    }

    .title-logo {
        max-width: 66px; /* 40% smaller from 110px */
        max-height: 66px; /* 40% smaller from 110px */
        object-fit: contain;
    }

    .card {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--card-shadow);
        overflow: hidden;
        margin-bottom: 3rem;
        background-color: var(--white);
    }

    .card-header {
        background-color: var(--primary-red);
        color: var(--white);
        font-weight: 600;
        padding: 1.2rem 1.5rem;
        border-bottom: none;
    }

    .card-body {
        padding: 2rem;
        background-color: var(--white);
    }

    .form-section {
        margin-bottom: 2.5rem;
        position: relative;
    }

    .form-section-title {
        color: var(--charcoal);
        margin-bottom: 1.5rem;
        padding-bottom: 0.7rem;
        border-bottom: 2px solid rgba(113, 128, 150, 0.2);
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    .form-section-title i {
        font-size: 1.8rem;
        margin-right: 1rem;
        color: var(--primary-red);
    }

    .form-control, .form-select {
        padding: 0.75rem 1rem;
        border: 1px solid rgba(113, 128, 150, 0.3);
        border-radius: var(--border-radius);
        transition: var(--transition);
        background-color: var(--white);
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--primary-red);
        box-shadow: 0 0 0 0.25rem rgba(238, 49, 36, 0.25);
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: var(--charcoal);
    }

    .entry-container {
        background-color: var(--light-beige);
        border-radius: var(--border-radius);
        padding: 1.5rem;
        margin-bottom: 1rem;
        border: 1px solid rgba(113, 128, 150, 0.2);
        position: relative;
        transition: var(--transition);
    }

    .entry-container:hover {
        box-shadow: 0 5px 15px rgba(45, 55, 72, 0.05);
    }

    .btn-add {
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
        border: 1px dashed var(--primary-red);
        padding: 0.6rem 1.2rem;
        border-radius: var(--border-radius);
        transition: var(--transition);
        display: flex;
        align-items: center;
        margin-top: 0.5rem;
    }

    .btn-add i {
        margin-right: 0.5rem;
    }

    .btn-add:hover {
        background-color: rgba(238, 49, 36, 0.15);
        color: var(--primary-red);
    }

    .btn-remove {
        position: absolute;
        right: 1rem;
        top: 1rem;
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
        border: none;
        width: 2rem;
        height: 2rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
    }

    .btn-remove:hover {
        background-color: rgba(238, 49, 36, 0.2);
        transform: scale(1.05);
    }

    .skill-badge {
        background-color: rgba(113, 128, 150, 0.1);
        color: var(--charcoal);
        border-radius: 20px;
        padding: 0.5rem 1rem;
        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        display: inline-flex;
        align-items: center;
        transition: var(--transition);
    }

    .skill-badge button {
        background: none;
        border: none;
        color: var(--slate-gray);
        margin-left: 0.5rem;
        cursor: pointer;
        font-size: 0.8rem;
    }

    .skill-badge:hover {
        background-color: rgba(238, 49, 36, 0.1);
        color: var(--primary-red);
    }

    .skills-input-group {
        display: flex;
        margin-bottom: 1rem;
    }

    .skills-input-group input {
        flex-grow: 1;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

    .skills-input-group button {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        background-color: var(--primary-red);
        border-color: var(--primary-red);
    }

    .skills-input-group button:hover {
        background-color: rgba(238, 49, 36, 0.9);
        border-color: rgba(238, 49, 36, 0.9);
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: var(--border-radius);
    }

    .btn-submit {
        background-color: var(--primary-red);
        border-color: var(--primary-red);
        font-weight: 600;
        padding: 0.8rem 2rem;
        border-radius: var(--border-radius);
        transition: var(--transition);
        box-shadow: 0 4px 6px rgba(238, 49, 36, 0.2);
        color: var(--white);
    }

    .btn-submit:hover {
        background-color: rgba(238, 49, 36, 0.9);
        border-color: rgba(238, 49, 36, 0.9);
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(238, 49, 36, 0.25);
    }

    .btn-preview {
        color: var(--charcoal);
        border-color: var(--charcoal);
    }

    .btn-preview:hover {
        background-color: var(--charcoal);
        border-color: var(--charcoal);
        color: var(--white);
    }

    /* Enhanced preview panel styling */
    .cv-preview {
        position: fixed;
        top: 0;
        right: 0;
        height: 100vh;
        width: 400px;
        background-color: var(--white);
        border-left: 1px solid rgba(113, 128, 150, 0.2);
        box-shadow: -4px 0 15px rgba(45, 55, 72, 0.1);
        padding: 2rem;
        overflow-y: auto;
        z-index: 1000;
        transform: translateX(100%);
        transition: transform 0.3s ease-in-out;
    }

    .cv-preview.show {
        transform: translateX(0);
    }

    .preview-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: none;
        border: none;
        font-size: 1.5rem;
        color: var(--slate-gray);
        cursor: pointer;
    }

    .preview-section {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(113, 128, 150, 0.2);
    }

    .preview-section:last-child {
        border-bottom: none;
    }

    .preview-section h5 {
        color: var(--primary-red);
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .preview-section h6 {
        color: var(--charcoal);
        font-weight: 600;
        margin-top: 0.5rem;
    }

    .preview-content {
        padding: 1rem;
        background-color: var(--white);
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
    }

    /* Profile photo display in CV - matching the smaller logo badge size */
    .profile-photo-container {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .profile-photo-wrapper {
        position: relative;
        width: 90px; /* 40% smaller from 150px to match logo badge */
        height: 90px; /* 40% smaller from 150px to match logo badge */
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid rgba(238, 49, 36, 0.2); /* 40% smaller border */
        box-shadow: 0 3px 9px rgba(45, 55, 72, 0.1); /* Smaller shadow */
    }

    .profile-photo {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Preview panel profile photo */
    .preview-profile-photo {
        width: 90px; /* 40% smaller to match other photos */
        height: 90px; /* 40% smaller to match other photos */
        border-radius: 50%;
        object-fit: cover;
        border: 2px solid rgba(238, 49, 36, 0.2); /* Smaller border */
        box-shadow: 0 2px 6px rgba(45, 55, 72, 0.1); /* Smaller shadow */
        margin: 0 auto 1rem;
        display: block;
    }

    /* Progress steps */
    .steps-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 2rem;
    }

    .step-item {
        flex: 1;
        text-align: center;
        position: relative;
    }

    .step-item:not(:last-child)::after {
        content: '';
        position: absolute;
        top: 1.5rem;
        right: -50%;
        width: 100%;
        height: 2px;
        background-color: rgba(113, 128, 150, 0.3);
        z-index: 1;
    }

    .step-number {
        background-color: var(--slate-gray);
        color: var(--white);
        width: 3rem;
        height: 3rem;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 0.5rem;
        font-weight: 600;
        position: relative;
        z-index: 2;
        font-size: 1.2rem;
    }

    .step-title {
        font-size: 0.9rem;
        color: var(--slate-gray);
    }

    .step-item.active .step-number {
        background-color: var(--primary-red);
    }

    .step-item.active .step-title {
        color: var(--primary-red);
        font-weight: 600;
    }

    .step-item.completed .step-number {
        background-color: var(--charcoal);
    }

    .progress-container {
        height: 4px;
        background-color: rgba(113, 128, 150, 0.2);
        border-radius: 2px;
        margin-bottom: 2rem;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background-color: var(--primary-red);
        width: 0;
        transition: width 0.3s ease;
    }

    .input-group-text {
        background-color: var(--charcoal);
        color: var(--white);
        border-color: var(--charcoal);
    }

    .form-section-page {
        display: none;
        opacity: 0;
        transform: translateX(20px);
        transition: none;
    }

    .form-section-page.active {
        display: block;
        opacity: 1;
        transform: translateX(0);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

    .form-navigation-buttons {
        border-top: 1px solid rgba(113, 128, 150, 0.2);
        padding-top: 1.5rem;
        margin-top: 2rem;
    }

    .next-section, .prev-section {
        padding: 0.6rem 1.2rem;
        border-radius: var(--border-radius);
    }

    .next-section i, .prev-section i {
        margin: 0 0.5rem;
    }

    .next-section {
        background-color: var(--charcoal);
        color: var(--white);
        border-color: var(--charcoal);
    }

    .next-section:hover {
        background-color: rgba(45, 55, 72, 0.9);
        border-color: rgba(45, 55, 72, 0.9);
    }

    .prev-section {
        border-color: var(--slate-gray);
        color: var(--slate-gray);
    }

    .prev-section:hover {
        background-color: var(--slate-gray);
        color: var(--white);
    }

    /* Welcome page styling */
    .welcome-container {
        background: linear-gradient(135deg, var(--light-beige), var(--white));
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        position: relative;
        padding: 2rem;
    }

    .welcome-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-template-rows: repeat(7, auto);
        gap: 1rem;
        max-width: 1200px;
        margin-bottom: 4rem;
    }

    .center-column {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 2rem;
    }

    .loading-gear {
        animation: spin 10s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .enter-button {
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        background-color: var(--primary-red);
        color: var(--white);
        padding: 1rem 2rem;
        font-size: 1.2rem;
        font-weight: 600;
        border-radius: var(--border-radius);
        text-decoration: none;
        box-shadow: 0 4px 10px rgba(238, 49, 36, 0.3);
        transition: var(--transition);
        margin-top: 2rem;
        border: none;
    }

    .enter-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 14px rgba(238, 49, 36, 0.4);
        color: var(--white);
    }

    /* Alert styling */
    .alert-info {
        background-color: rgba(45, 55, 72, 0.1);
        color: var(--charcoal);
        border-color: rgba(45, 55, 72, 0.2);
    }

    /* Autofill button styling */
    #autofillBtn {
        background-color: var(--charcoal);
        border-color: var(--charcoal);
        color: var(--white);
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
        transition: var(--transition);
    }

    #autofillBtn:hover {
        background-color: rgba(45, 55, 72, 0.9);
    }

    footer {
        background-color: var(--charcoal) !important;
        color: var(--white) !important;
    }

    footer .text-muted {
        color: rgba(255, 255, 255, 0.7) !important;
    }

    @media (max-width: 768px) {
        .main-title {
            font-size: 1.5rem; /* Smaller on mobile */
        }

        .main-subtitle {
            font-size: 0.9rem; /* Smaller on mobile */
        }

        .card-body {
            padding: 1.5rem;
        }

        .step-number {
            width: 2.5rem;
            height: 2.5rem;
        }

        .step-title {
            font-size: 0.8rem;
        }

        .cv-preview {
            width: 90%;
        }

        /* Adjust banner images for mobile */
        .banner-image {
            width: 80px;
        }

        .banner-image.center {
            width: 100px;
        }

        .profile-photo-wrapper {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }

        .logo-badge {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }

        .title-logo {
            max-width: 55px; /* Smaller on mobile */
            max-height: 55px; /* Smaller on mobile */
        }

        .preview-profile-photo {
            width: 75px; /* Smaller on mobile */
            height: 75px; /* Smaller on mobile */
        }
    }

    /* Icon styling */
    .fas, .far, .fab, .fa {
        margin-right: 0.5rem;
    }
</style>
==================================================

Fichier: src\Controller\CVGeneratorController.php
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\src\Controller\CVGeneratorController.php
-----
<?php
// Last updated: 2025-04-24 19:12:05 (Based on user timestamp)
// Author: Mohamed-abidi-95

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\HeaderUtils;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
// Correct use statement for Annotations
use Symfony\Component\Routing\Annotation\Route;
use Dompdf\Dompdf;
use Dompdf\Options;
use Psr\Log\LoggerInterface; // Added LoggerInterface

class CVGeneratorController extends AbstractController
{
    private LoggerInterface $logger;

    // Inject logger for better debugging if needed
    public function __construct(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    /**
     * @Route("/", name="app_welcome")
     */
    public function welcome(): Response
    {
        // Assuming welcome.html.twig exists in templates/cv_generator/
        return $this->render('cv_generator/welcome.html.twig');
    }

    /**
     * @Route("/cv", name="app_cv_generator")
     */
    public function index(): Response
    {
        // Sample data for autofill testing (remains the same)
        $sampleData = [
            'firstName' => 'John', 'lastName' => 'Doe', 'position' => 'Software Developer',
            'email' => 'john.doe@example.com', 'phone' => '+216 12 345 678',
            'address' => '123 Main Street', 'city' => 'Tunis', 'country' => 'Tunisia',
            'github' => 'github.com/johndoe', 'linkedin' => 'linkedin.com/in/johndoe',
            'education' => [
                ['degree' => 'Bachelor of Science in Computer Science', 'institution' => 'ESPRIT Engineering School', 'location' => 'Tunis, Tunisia', 'startDate' => '09/2018', 'endDate' => '06/2022', 'description' => 'Graduated with honors...'],
                ['degree' => 'High School Diploma', 'institution' => 'International High School', 'location' => 'Tunis, Tunisia', 'startDate' => '09/2015', 'endDate' => '06/2018', 'description' => 'Science track...']
            ],
            'experience' => [
                ['position' => 'Software Engineer', 'company' => 'Tech Solutions Inc.', 'location' => 'Tunis, Tunisia', 'startDate' => '08/2022', 'endDate' => 'Present', 'description' => 'Developing full-stack web apps...'],
                ['position' => 'Web Development Intern', 'company' => 'StartUp Hub', 'location' => 'Tunis, Tunisia', 'startDate' => '06/2021', 'endDate' => '09/2021', 'description' => 'Assisted in development...']
            ],
            'skills' => ['JavaScript', 'React.js', 'Node.js', 'HTML/CSS', 'PHP', 'MySQL', 'Git', 'Agile', 'Problem Solving'],
            'languages' => ['Arabic (Native)', 'French (Fluent)', 'English (Advanced)'],
            'additionalInfo' => 'Passionate about building high-quality software...'
        ];

        // Renders main.html.twig as per user's provided code
        return $this->render('cv_generator/main.html.twig', [
            'currentStep' => 1, // This might need dynamic update if using multi-step logic
            'sampleData' => $sampleData
        ]);
    }

    /**
     * @Route("/cv-generator/generate", name="app_cv_generate", methods={"POST"})
     *                                    ^^^^^^^^^^^^^^^^^ Route name updated
     */
    public function generate(Request $request): Response
    {
        // Set memory limit and execution time (consider moving to php.ini if possible)
        ini_set('memory_limit', '512M');
        ini_set('max_execution_time', 300);

        $this->logger->info('CV Generation request received.'); // Log start

        try {
            // --- Debugging Logic (remains the same) ---
            if ($request->query->has('debug_data')) {
                return new Response('<pre>' . print_r($request->request->all(), true) . '</pre>', 200, ['Content-Type' => 'text/html']);
            }
            if ($request->query->has('debug')) {
                $formData = [/* ... default debug data ... */]; // Add default data
                $templateType = $request->request->get('template', 'green');
                $templateName = ($templateType === 'blue') ? 'cv_template_blue.html.twig' : 'cv_template_green.html.twig';
                $html = $this->renderView('cv_generator/' . $templateName, ['data' => $formData, 'photoData' => '', 'generatedDate' => new \DateTime()]);
                return new Response($html, 200, ['Content-Type' => 'text/html']);
            }

            // --- Simple Test PDF Logic (remains the same) ---
            if ($request->request->get('simpleTest') === 'true') {
                $html = '<!DOCTYPE html><html><head><title>Test CV</title></head><body><h1>Test PDF OK</h1></body></html>'; // Simplified
                $options = new Options();
                $options->set('isHtml5ParserEnabled', true); $options->set('defaultFont', 'DejaVu Sans');
                $dompdf = new Dompdf($options);
                $dompdf->loadHtml($html); $dompdf->setPaper('A4'); $dompdf->render();
                $response = new Response($dompdf->output());
                $disposition = HeaderUtils::makeDisposition(HeaderUtils::DISPOSITION_ATTACHMENT, 'simple-test-cv.pdf');
                $response->headers->set('Content-Type', 'application/pdf'); $response->headers->set('Content-Disposition', $disposition);
                return $response;
            }
            // --- Direct Download Test Logic ---
            if ($request->request->get('directDownload') === 'true') {
                $html = '<!DOCTYPE html><html><head><title>Direct Download Test</title></head><body><h1>Direct Download Test OK</h1></body></html>'; // Simplified
                $options = new Options();
                $options->set('isHtml5ParserEnabled', true); $options->set('defaultFont', 'DejaVu Sans');
                $dompdf = new Dompdf($options);
                $dompdf->loadHtml($html); $dompdf->setPaper('A4'); $dompdf->render();
                $response = new Response($dompdf->output());
                $disposition = HeaderUtils::makeDisposition(HeaderUtils::DISPOSITION_ATTACHMENT, 'direct-download-test.pdf');
                $response->headers->set('Content-Type', 'application/pdf'); $response->headers->set('Content-Disposition', $disposition);
                return $response;
            }


            // --- Main PDF Generation Logic ---

            // Initialize form data structure
            $formData = [
                'firstName' => $request->request->get('firstName', ''),
                'lastName' => $request->request->get('lastName', ''),
                'position' => $request->request->get('position', ''),
                'email' => $request->request->get('email', ''),
                'phone' => $request->request->get('phone', ''),
                'address' => $request->request->get('address', ''),
                'city' => $request->request->get('city', ''),
                'country' => $request->request->get('country', ''),
                'github' => $request->request->get('github', ''),
                'linkedin' => $request->request->get('linkedin', ''),
                'additionalInfo' => $request->request->get('additionalInfo', ''),
                'education' => [],
                'experience' => [],
                'skills' => [],
                'languages' => []
            ];

            // Helper function to process array fields (Handles education[0][degree] style)
            $processIndexedArrayField = function(string $baseName) use ($request, &$formData) {
                $data = $request->request->all($baseName); // Gets e.g., ['education'][0]['degree']
                if (is_array($data)) {
                    foreach ($data as $index => $entryData) {
                        if (is_array($entryData)) {
                            $hasDataInEntry = false;
                            foreach($entryData as $value) {
                                if (!empty($value)) {
                                    $hasDataInEntry = true;
                                    break;
                                }
                            }
                            if ($hasDataInEntry) {
                                $formData[$baseName][] = $entryData;
                            }
                        }
                    }
                }
            };

            // Process dynamic sections using the helper
            $processIndexedArrayField('education');
            $processIndexedArrayField('experience');

            // Process skills (assuming submitted as skills[])
            $skillsInput = $request->request->all('skills'); // Get as array
            if (is_array($skillsInput)) {
                $formData['skills'] = array_values(array_filter($skillsInput)); // Filter empty values and re-index
            }

            // Process languages (assuming submitted as languages[])
            $languagesInput = $request->request->all('languages'); // Get as array
            if (is_array($languagesInput)) {
                $formData['languages'] = array_values(array_filter($languagesInput)); // Filter empty values and re-index
            }


            // --- Get Template and Photo ---
            $templateType = $request->request->get('template', 'green');
            $photoData = $request->request->get('photoData', ''); // Base64 encoded photo data

            $templateName = ($templateType === 'blue') ? 'cv_template_blue.html.twig' : 'cv_template_green.html.twig';

            // Ensure template exists
            if (!$this->get('twig')->getLoader()->exists('cv_generator/' . $templateName)) {
                $this->logger->error("Template not found: cv_generator/{$templateName}");
                throw new \Exception("Selected template '{$templateType}' could not be found.");
            }

            $this->logger->info("Rendering CV with template: {$templateName}");

            // --- Render HTML ---
            $html = $this->renderView('cv_generator/' . $templateName, [
                'data' => $formData,
                'photoData' => $photoData, // Pass photo data to template
                'generatedDate' => new \DateTime()
            ]);

            // --- Configure Dompdf ---
            $options = new Options();
            $options->set('isHtml5ParserEnabled', true);
            $options->set('isRemoteEnabled', true); // Needed for images
            $options->set('defaultFont', 'DejaVu Sans');
            // Set base path relative to the public directory for assets
            // chroot is often needed if assets are loaded via relative paths from templates
            $options->set('chroot', $this->getParameter('kernel.project_dir') . '/public');

            // Create Dompdf instance
            $dompdf = new Dompdf($options);
            $dompdf->loadHtml($html);
            $dompdf->setPaper('A4', 'portrait');
            $this->logger->info("Rendering PDF...");
            $dompdf->render();
            $this->logger->info("PDF Rendering complete.");

            // --- Generate Filename ---
            $filename = sprintf('%s-%s-CV-%s.pdf',
                preg_replace('/[^a-zA-Z0-9]/', '_', $formData['firstName'] ?: 'CV'), // Sanitize names
                preg_replace('/[^a-zA-Z0-9]/', '_', $formData['lastName'] ?: 'User'),
                (new \DateTime())->format('Ymd') // Simpler date format
            );
            $filename = preg_replace('/_+/', '_', $filename); // Remove consecutive underscores

            // --- Create and Return Response ---
            $this->logger->info("Sending PDF response: {$filename}");
            $response = new Response($dompdf->output());
            $disposition = HeaderUtils::makeDisposition(
                HeaderUtils::DISPOSITION_ATTACHMENT, // Force download
                $filename
            );
            $response->headers->set('Content-Type', 'application/pdf');
            $response->headers->set('Content-Disposition', $disposition);

            return $response;

        } catch (\Throwable $e) { // Catch Throwable for broader error catching
            $this->logger->error("Error generating PDF: {$e->getMessage()}", ['exception' => $e]);

            // Detailed error response (consider disabling stack trace in production)
            $errorHtml = '<html><head><title>PDF Error</title><style>body{font-family:sans-serif;padding:20px}h1{color:red}pre{background:#eee;padding:10px;border:1px solid #ccc;overflow:auto}</style></head><body><h1>PDF Generation Error</h1>';
            $errorHtml .= '<p><strong>Message:</strong> ' . htmlspecialchars($e->getMessage()) . '</p>';
            // Only show trace in development environment
            if ($this->getParameter('kernel.environment') === 'dev') {
                $errorHtml .= '<p><strong>File:</strong> ' . htmlspecialchars($e->getFile()) . ' (Line: ' . $e->getLine() . ')</p>';
                $errorHtml .= '<h2>Trace:</h2><pre>' . htmlspecialchars($e->getTraceAsString()) . '</pre>';
                $errorHtml .= '<h2>Request Data:</h2><pre>' . htmlspecialchars(print_r($request->request->all(), true)) . '</pre>';
            } else {
                $errorHtml .= '<p>An internal error occurred. Please try again later or contact support.</p>';
            }
            $errorHtml .= '<a href="' . $this->generateUrl('app_cv_generator') . '">Back to CV Generator</a></body></html>';

            // Optionally add a header to indicate error to the JS fetch call
            $response = new Response($errorHtml, Response::HTTP_INTERNAL_SERVER_ERROR, ['Content-Type' => 'text/html']);
            $response->headers->set('X-Error-Message', $e->getMessage()); // Custom header for JS
            return $response;
        }
    }

    /**
     * @Route("/cv-generator/test-pdf", name="app_cv_test_pdf")
     *                                    ^^^^^^^^^^^^^^^^^^ Route name updated
     */
    public function testPdf(): Response
    {
        // --- Test PDF Logic (remains mostly the same) ---
        try {
            $html = '<!DOCTYPE html><html><head><title>Test PDF</title></head><body><h1>Test PDF OK</h1><p>Generated: '.(new \DateTime())->format('Y-m-d H:i:s').'</p></body></html>';
            $options = new Options();
            $options->set('isHtml5ParserEnabled', true); $options->set('defaultFont', 'DejaVu Sans');
            $dompdf = new Dompdf($options);
            $dompdf->loadHtml($html); $dompdf->setPaper('A4'); $dompdf->render();
            $response = new Response($dompdf->output());
            $disposition = HeaderUtils::makeDisposition(HeaderUtils::DISPOSITION_INLINE, 'test.pdf'); // Inline for testing
            $response->headers->set('Content-Type', 'application/pdf'); $response->headers->set('Content-Disposition', $disposition);
            return $response;
        } catch (\Throwable $e) {
            $this->logger->error("Error in test PDF generation: {$e->getMessage()}", ['exception' => $e]);
            return new Response('<html><body><h1>Test PDF Error</h1><p>'.htmlspecialchars($e->getMessage()).'</p><pre>'.htmlspecialchars($e->getTraceAsString()).'</pre></body></html>', 500, ['Content-Type' => 'text/html']);
        }
    }

    /**
     * @Route("/cv-generator/debug-form", name="app_cv_debug_form", methods={"POST"})
     *                                      ^^^^^^^^^^^^^^^^^^^^ Route name added
     */
    public function debugForm(Request $request): Response
    {
        // --- Debug Form Logic (remains the same) ---
        try {
            return new Response('<html><body><h1>Form Debug</h1><pre>' . print_r($request->request->all(), true) . '</pre></body></html>', 200, ['Content-Type' => 'text/html']);
        } catch (\Throwable $e) {
            return new Response('Error: ' . $e->getMessage(), 500);
        }
    }
}
==================================================

Fichier: config\packages\asset_mapper.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\asset_mapper.yaml
-----
framework:
    asset_mapper:
        # The paths to make available to the asset mapper.
        paths:
            - assets/
        missing_import_mode: strict

when@prod:
    framework:
        asset_mapper:
            missing_import_mode: warn

==================================================

Fichier: config\packages\cache.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\cache.yaml
-----
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

==================================================

Fichier: config\packages\csrf.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\csrf.yaml
-----
# Enable stateless CSRF protection for forms and logins/logouts
framework:
    form:
        csrf_protection:
            token_id: submit

    csrf_protection:
        stateless_token_ids:
            - submit
            - authenticate
            - logout

==================================================

Fichier: config\packages\debug.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\debug.yaml
-----
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

==================================================

Fichier: config\packages\doctrine.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\doctrine.yaml
-----
doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'

        profiling_collect_backtrace: '%kernel.debug%'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        identity_generation_preferences:
            Doctrine\DBAL\Platforms\PostgreSQLPlatform: identity
        auto_mapping: true
        mappings:
            App:
                type: attribute
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App
        controller_resolver:
            auto_mapping: false

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system

==================================================

Fichier: config\packages\doctrine_migrations.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\doctrine_migrations.yaml
-----
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false

==================================================

Fichier: config\packages\framework.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\framework.yaml
-----
# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true
    http_method_override: false
    handle_all_throwables: true

    # Enables session support. Note that the session will ONLY be started if you read or write from it.
    # Remove or comment this section to explicitly disable session support.
    session:
        handler_id: null
        cookie_secure: auto
        cookie_samesite: lax
        storage_factory_id: session.storage.factory.native

    #esi: true
    #fragments: true
    php_errors:
        log: true # You might configure timezone here if needed for logs, e.g., log: E_ALL & ~E_USER_DEPRECATED & ~E_DEPRECATED & ~E_STRICT

    # Timezone and locale settings
    default_locale: 'en'
    # timezone: 'UTC' # <-- REMOVED THIS LINE (set in php.ini)

    # Asset configuration
    assets:
    # Default path strategy is usually sufficient if assets are in public/
    # You might need 'version_strategy' or 'json_manifest_path' depending on your setup (e.g., using Webpack Encore)
    # If you are NOT using Webpack Encore or similar, this minimal config is often fine.
    # Removed the packages section below as it's not needed for assets in public/
    # packages:
    #     images:
    #         base_urls:
    #             - '/images'
    #     css:
    #         base_urls:
    #             - '/css'
    #     js:
    #         base_urls:
    #             - '/js'

    # Router configuration
    router:
        utf8: true
        # If using attributes for routes (recommended), remove route_class if present
        # route_class: Symfony\Component\Routing\Route # Example, might not be needed

    # Validation configuration
    validation:
        enabled: true
        enable_attributes: true
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

    # Cache configuration
    cache:
        app: cache.adapter.filesystem
        system: cache.adapter.system
        directory: '%kernel.cache_dir%/pools'

    # Form configuration
    form:
        enabled: true

    # Mailer configuration (if needed)
    mailer:
        enabled: true
        dsn: '%env(MAILER_DSN)%'

    # Notifier configuration (if needed)
    notifier:
        enabled: true
        chatter_transports: []
        texter_transports: []

    # HTTP Client configuration (if needed)
    http_client:
        default_options:
            max_redirects: 5

    # Error handler configuration
    error_controller: null # Keep this as null unless you have a specific error controller

    # Trusted configuration
    trusted_proxies: null
    trusted_headers: ['x-forwarded-for', 'x-forwarded-host', 'x-forwarded-proto', 'x-forwarded-port', 'x-forwarded-prefix']
    trusted_hosts: null

    # Web link configuration
    web_link:
        enabled: true

# REMOVED framework_extra section - belongs in config/packages/sensio_framework_extra.yaml if used
# REMOVED templating section - belongs in config/packages/twig.yaml
# REMOVED parameters section - belongs in config/services.yaml

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file
        profiler:
            collect: false
        validation:
            not_compromised_password: false

when@dev:
    framework:
        profiler:
            only_exceptions: false
==================================================

Fichier: config\packages\mailer.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\mailer.yaml
-----
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

==================================================

Fichier: config\packages\messenger.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\messenger.yaml
-----
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    use_notify: true
                    check_delayed_interval: 60000
                retry_strategy:
                    max_retries: 3
                    multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        default_bus: messenger.bus.default

        buses:
            messenger.bus.default: []

        routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            Symfony\Component\Notifier\Message\ChatMessage: async
            Symfony\Component\Notifier\Message\SmsMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async

==================================================

Fichier: config\packages\monolog.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\monolog.yaml
-----
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json

==================================================

Fichier: config\packages\notifier.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\notifier.yaml
-----
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }

==================================================

Fichier: config\packages\routing.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\routing.yaml
-----
framework:
    router:
        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null

==================================================

Fichier: config\packages\security.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\security.yaml
-----
security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

==================================================

Fichier: config\packages\translation.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\translation.yaml
-----
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:

==================================================

Fichier: config\packages\twig.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\twig.yaml
-----
# Current Date and Time: 2025-04-20 22:01:45
# User: Mohamed-abidi-95ok

twig:
    default_path: '%kernel.project_dir%/Templates'
    paths:
        '%kernel.project_dir%/Templates': 'templates'
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    exception_controller: null
    form_themes: ['bootstrap_5_layout.html.twig']
==================================================

Fichier: config\packages\validator.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\validator.yaml
-----
framework:
    validation:
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false

==================================================

Fichier: config\packages\web_profiler.yaml
Chemin complet: C:\Users\Sh-Pc\PhpstormProjects\EsprimCareer\config\packages\web_profiler.yaml
-----
when@dev:
    web_profiler:
        toolbar: true

    framework:
        profiler:
            collect_serializer_data: true

when@test:
    framework:
        profiler: { collect: false }

==================================================

