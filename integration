Fichier: assets\styles\app.css
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\assets\styles\app.css
-----
body {
    background-color: skyblue;
}

==================================================

Fichier: src\Kernel.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Kernel.php
-----
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}

==================================================

Fichier: src\Command\CreateAdminCommand.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Command\CreateAdminCommand.php
-----
<?php

namespace App\Command;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

#[AsCommand(
    name: 'app:create-admin',
    description: 'Crée un nouvel utilisateur administrateur',
)]
class CreateAdminCommand extends Command
{
    private EntityManagerInterface $entityManager;
    private UserPasswordHasherInterface $passwordHasher;

    public function __construct(EntityManagerInterface $entityManager, UserPasswordHasherInterface $passwordHasher)
    {
        parent::__construct();
        $this->entityManager = $entityManager;
        $this->passwordHasher = $passwordHasher;
    }

    protected function configure(): void
    {
        $this
            ->addArgument('email', InputArgument::REQUIRED, 'Email de l\'administrateur')
            ->addArgument('username', InputArgument::REQUIRED, 'Nom d\'utilisateur')
            ->addArgument('password', InputArgument::REQUIRED, 'Mot de passe');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $email = $input->getArgument('email');
        $username = $input->getArgument('username');
        $password = $input->getArgument('password');

        $user = new User();
        $user->setEmail($email);
        $user->setUsername($username);
        $user->setRoles(['ROLE_ADMIN']);
        $user->setType('admin');
        $user->setPassword($this->passwordHasher->hashPassword($user, $password));

        $this->entityManager->persist($user);
        $this->entityManager->flush();

        $io->success('Administrateur créé avec succès.');

        return Command::SUCCESS;
    }
}
==================================================

Fichier: src\Command\GenerateEntitiesCommand.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Command\GenerateEntitiesCommand.php
-----
<?php

namespace App\Command;

use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\Column;
use Doctrine\DBAL\Schema\Table;
use Symfony\Component\Console\Attribute\AsCommand;
use Doctrine\DBAL\Schema\AbstractSchemaManager;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;

#[AsCommand(
    name: 'app:generate:entities',
    description: 'Automatically generates entity classes from the database schema',
)]
class GenerateEntitiesCommand extends Command
{
    private Connection $connection;
    // private Filesystem $filesystem;
    private ?AbstractSchemaManager $schemaManager = null;
    private array $generatedRelations = [];

    /**
     * Constructor.
     *
     * @param Connection $connection The database connection instance.
     * @param Filesystem $filesystem The filesystem instance.
     */
    public function __construct(Connection $connection, Filesystem $filesystem)
    {
        parent::__construct();
        $this->connection = $connection;
        // $this->filesystem = $filesystem;
    }

    /**
     * Executes the command to generate entity classes.
     *
     * @param InputInterface $input  Input interface.
     * @param OutputInterface $output Output interface.
     * @return int Command exit status.
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $io->title("Generating Entity Classes from Database...");

        try {
            $schemaManager = $this->getSchemaManager();
            $tables = $schemaManager->listTables();
        } catch (\Exception $e) {
            $io->error("Failed to retrieve database schema: " . $e->getMessage());
            return Command::FAILURE;
        }

        $oneToManyRelations = [];
        $manyToOneRelationsName = [];
        $oneToManyRelationsName = [];

        // Count relations for each table
        $tableRelationsCount = [];
        foreach ($tables as $table) {
            $foreignKeys = $this->getForeignKeys([$table->getName()]);
            $relationCount = count($foreignKeys);
            $tableRelationsCount[$table->getName()] = $relationCount;
        }

        // Sort tables by their relation count in ascending order
        usort($tables, function (Table $a, Table $b) use ($tableRelationsCount) {
            return $tableRelationsCount[$a->getName()] <=> $tableRelationsCount[$b->getName()];
        });

        // Generate entities in sorted order
        foreach ($tables as $table) {
            $this->generateEntity($table, $oneToManyRelations, $manyToOneRelationsName, $oneToManyRelationsName);

            $io->success("Generated: src/Entity/" . ucfirst($table->getName()) . ".php");
        }

        foreach ($tables as $table) {
            $this->generateEntity($table, $oneToManyRelations, $manyToOneRelationsName, $oneToManyRelationsName);
            $io->success("Relations Added: src/Entity/" . ucfirst($table->getName()) . ".php");
        }

        $io->success("Entities successfully generated in src/Entity/");
        return Command::SUCCESS;
    }


    /**
     * Retrieves the schema manager instance, caching it to avoid redundant queries.
     *
     * @return AbstractSchemaManager The schema manager.
     */
    private function getSchemaManager(): AbstractSchemaManager
    {
        if ($this->schemaManager === null) {
            $this->schemaManager = $this->connection->createSchemaManager();
        }
        return $this->schemaManager;
    }

    /**
     * Generates an entity class from a database table.
     *
     * @param Table $table The database table.
     * @param array &$oneToManyRelations Reference to OneToMany relations.
     * @param array &$manyToOneRelationsName Reference to ManyToOne relations.
     */
    private function generateEntity(Table $table, array &$oneToManyRelations, array &$manyToOneRelationsName, array &$oneToManyRelationsName): void
    {
        $className = ucfirst($table->getName());
        $entityCode = "<?php\n\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n";

        $imports = $this->generateImports($manyToOneRelationsName, $oneToManyRelationsName, $className);

        // Add imports
        $entityCode .= $imports . "\n";

        // Add entity annotation
        $entityCode .= "#[ORM\\Entity]\n";
        $entityCode .= "class $className\n{\n";

        // Get primary key(s)
        $primaryKeys = $table->getPrimaryKey()?->getColumns() ?? [];

        // Get foreign key constraints
        $foreignKeys = $this->getForeignKeys([$table->getName()]);

        foreach ($table->getColumns() as $column) {
            $entityCode .= $this->generateProperty($column, $primaryKeys, $foreignKeys, $className, $oneToManyRelations, $manyToOneRelationsName, $oneToManyRelationsName);
        }

        // Generate getters and setters
        foreach ($table->getColumns() as $column) {
            $entityCode .= $this->generateGettersAndSetters($column);
        }

        // Inject stored OneToMany relations into the correct entities
        if (isset($oneToManyRelations[$className])) {
            $processedRelations = []; // Keep track of already added relations

            foreach ($oneToManyRelations[$className] as $relation) {
                if (!in_array($relation, $processedRelations)) {
                    $entityCode .= $relation;
                    $processedRelations[] = $relation; // Mark relation as added

                    $relationArray = $this->parseRelationAnnotation($relation);
                    $relationKey = "$className-{$relationArray['mappedBy']}";

                    if (!isset($this->generatedRelations[$relationKey])) {
                        $entityCode .= $this->generateRelationMethods($className, $relationArray['mappedBy'], $relationArray['targetEntity']);
                        $this->generatedRelations[$relationKey] = true;
                    }
                }
            }
        }


        $entityCode .= "}\n";

        // Save the entity file
        $filePath = __DIR__ . "/../../src/Entity/$className.php";
        file_put_contents($filePath, $entityCode);
    }


    /**
     * Generates necessary import statements based on detected relations.
     *
     * @param array $oneToManyRelations OneToMany relations.
     * @param array $manyToOneRelationsName ManyToOne relations.
     * @param string $className The name of the entity class.
     * @return string Formatted import statements.
     */
    private function generateImports(array $manyToOneRelationsName, array $oneToManyRelationsName, string $className): string
    {
        $imports = [];

        foreach ($manyToOneRelationsName as $key => $value) {
            if ($key === $className) {
                $imports[] = "App\\Entity\\$value";
            }
        }

        foreach ($oneToManyRelationsName as $key => $value) {
            if ($key === $className) {
                $imports[] = "Doctrine\Common\Collections\Collection";
                $imports[] = "App\\Entity\\$value";
            }
        }

        // Remove duplicates and format imports
        $imports = array_unique($imports);

        // Return an empty string if there are no imports needed
        if (count($imports) == 0) {
            return "";
        }
        return "use " . implode(";\nuse ", $imports) . ";\n";
    }

    /**
     * Retrieves foreign key constraints from the database.
     *
     * @param array $tables List of table names.
     * @return array Associative array of foreign keys.
     */
    public function getForeignKeys(array $tables): array
    {
        $foreignKeys = [];

        // Create the schema manager
        $schemaManager = $this->connection->createSchemaManager();

        // List all tables using the schema manager
        $dbTables = $schemaManager->listTables();

        foreach ($tables as $tableName) {
            // Check if the table exists in the list of tables
            if (in_array($tableName, array_map(fn($table) => $table->getName(), $dbTables))) {
                // Run a custom SQL query to retrieve foreign keys from the INFORMATION_SCHEMA (MySQL example)
                $sql = "
                SELECT 
                    COLUMN_NAME, 
                    REFERENCED_TABLE_NAME, 
                    REFERENCED_COLUMN_NAME
                FROM 
                    INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
                WHERE 
                    TABLE_NAME = :tableName AND 
                    REFERENCED_TABLE_NAME IS NOT NULL
            ";

                // Prepare the query
                $stmt = $this->connection->prepare($sql);
                $stmt->bindValue(':tableName', $tableName);

                // Execute the query and fetch the results
                $fks = $stmt->executeQuery()->fetchAllAssociative();

                // Store foreign keys in the array
                foreach ($fks as $fk) {
                    $foreignKeys[$fk['COLUMN_NAME']] = [
                        'referencedTable' => $fk['REFERENCED_TABLE_NAME'],
                        'referencedColumn' => $fk['REFERENCED_COLUMN_NAME']
                    ];
                }
            }
        }

        return $foreignKeys;
    }

    /**
     * Generates relation methods for OneToMany and ManyToOne relations.
     *
     * @param string $currentEntity The current entity name.
     * @param string $propertyName The property name representing the relation.
     * @param string $relatedEntity The related entity name.
     * @return string The generated method code.
     */
    private function generateRelationMethods(string $currentEntity, string $propertyName, string $relatedEntity): string
    {
        $collectionType = "Collection";
        $relatedEntityClass = ucfirst($relatedEntity);
        $currentEntityClass = ucfirst($currentEntity);
        $relatedEntityVariable = lcfirst($relatedEntity); // Ensure lowercase variable name

        return "
        public function get" . $relatedEntityClass . "s(): $collectionType
        {
            return \$this->" . $relatedEntityVariable . "s;
        }
    
        public function add{$relatedEntityClass}({$relatedEntityClass} \${$relatedEntityVariable}): self
        {
            if (!\$this->{$relatedEntityVariable}s->contains(\${$relatedEntityVariable})) {
                \$this->{$relatedEntityVariable}s[] = \${$relatedEntityVariable};
                \${$relatedEntityVariable}->set" . ucfirst($propertyName) . "(\$this);
            }
    
            return \$this;
        }
    
        public function remove{$relatedEntityClass}({$relatedEntityClass} \${$relatedEntityVariable}): self
        {
            if (\$this->{$relatedEntityVariable}s->removeElement(\${$relatedEntityVariable})) {
                // set the owning side to null (unless already changed)
                if (\${$relatedEntityVariable}->get" . ucfirst($propertyName) . "() === \$this) {
                    \${$relatedEntityVariable}->set" . ucfirst($propertyName) . "(null);
                }
            }
    
            return \$this;
        }\n";
    }

    /**
     * Generates entity properties based on database columns.
     *
     * @param Column $column The database column.
     * @param array $primaryKeys List of primary keys.
     * @param array $foreignKeys List of foreign keys.
     * @param string $className The entity class name.
     * @param array &$oneToManyRelations Reference to OneToMany relations.
     * @param array &$manyToOneRelationsName Reference to ManyToOne relations.
     * @return string The generated property code.
     */
    private function generateProperty(Column $column, array $primaryKeys, array $foreignKeys, string $className, array &$oneToManyRelations, array &$manyToOneRelationsName, array &$oneToManyRelationsName): string
    {
        $columnName = $column->getName();
        $typeClass = get_class($column->getType());
        $length = $column->getLength();
        $isPrimaryKey = in_array($columnName, $primaryKeys);
        $isForeignKey = isset($foreignKeys[$columnName]);

        // Map type classes to Doctrine types
        $doctrineType = match ($typeClass) {
            'Doctrine\DBAL\Types\IntegerType' => 'integer',
            'Doctrine\DBAL\Types\BigIntType' => 'bigint',
            'Doctrine\DBAL\Types\SmallIntType' => 'smallint',
            'Doctrine\DBAL\Types\BooleanType' => 'boolean',
            'Doctrine\DBAL\Types\DateTimeType', 'Doctrine\DBAL\Types\TimestampType' => 'datetime',
            'Doctrine\DBAL\Types\DateType' => 'date',
            'Doctrine\DBAL\Types\TextType' => 'text',
            'Doctrine\DBAL\Types\DecimalType', 'Doctrine\DBAL\Types\FloatType', 'Doctrine\DBAL\Types\DoubleType' => 'float',
            'Doctrine\DBAL\Types\StringType', 'Doctrine\DBAL\Types\VarCharType' => 'string',
            default => 'string',
        };

        $lengthAnnotation = ($doctrineType === 'string' && $length) ? ", length: $length" : "";

        $propertyCode = "\n    " . ($isPrimaryKey ? "#[ORM\\Id]\n    " : "");


        if ($isForeignKey) {
            $relatedEntity = $foreignKeys[$columnName]['referencedTable'];
            $relatedClassName = ucfirst($relatedEntity);

            // Get the columns of the referenced table
            $schemaManager = $this->connection->createSchemaManager();
            $columns = $schemaManager->listTableColumns($relatedEntity);

            // Find the primary key columns from the list of columns
            $primaryKeyColumns = $this->getPrimaryKeyColumns($relatedEntity);

            // Assuming the primary key is the first column in the primary key list
            $primaryKeyColumn = $primaryKeyColumns ? $primaryKeyColumns[0] : null;

            // If primary key column is found
            if ($primaryKeyColumn) {
                // Add ManyToOne in the current entity
                $propertyCode .= "    #[ORM\\ManyToOne(targetEntity: $relatedClassName::class, inversedBy: \"" . strtolower($className) . "s\")]\n";

                // Add JoinColumn for foreign key relation
                $propertyCode .= "    #[ORM\\JoinColumn(name: '$columnName', referencedColumnName: '$primaryKeyColumn', onDelete: 'CASCADE')]\n";

                $propertyCode .= "    private $relatedClassName \$$columnName;\n";

                // Store ManyToOne relation in the current entity
                $manyToOneRelationsName[$className] = $relatedClassName;
                // Store OneToMany relation in the current entity
                $oneToManyRelationsName[$relatedClassName] = $className;

                // Store OneToMany relation in the related entity
                $oneToManyRelations[$relatedClassName][] = "\n    #[ORM\\OneToMany(mappedBy: \"$columnName\", targetEntity: $className::class)]\n    private Collection \$" . strtolower($className) . "s;\n";
            }
        } else {
            $propertyCode .= "#[ORM\\Column(type: \"$doctrineType\"$lengthAnnotation)]\n";
            $propertyCode .= "    private " . $this->getPHPTypeFromDoctrine($doctrineType) . " \$$columnName;\n";
        }

        return $propertyCode;
    }

    private function getPHPTypeFromDoctrine(string $doctrineType): string
    {
        $mapping = [
            'integer' => 'int',
            'smallint' => 'int',
            'bigint' => 'string', // BigInt is stored as a string in PHP
            'string' => 'string',
            'text' => 'string',
            'boolean' => 'bool',
            'decimal' => 'string', // Decimal values are stored as strings to avoid precision loss
            'float' => 'float',
            'date' => '\DateTimeInterface',
            'datetime' => '\DateTimeInterface',
            'datetimetz' => '\DateTimeInterface',
            'time' => '\DateTimeInterface',
            'array' => 'array',
            'json' => 'array', // JSON is typically decoded to an array
            'object' => 'object',
            'binary' => 'string',
            'blob' => 'string',
            'guid' => 'string',
        ];

        return $mapping[$doctrineType] ?? 'mixed'; // Default to 'mixed' if type is unknown
    }
    // Helper function to get primary key columns of a table
    private function getPrimaryKeyColumns(string $tableName): array
    {
        $schemaManager = $this->connection->createSchemaManager();
        $indexes = $schemaManager->listTableIndexes($tableName);

        // Find primary key columns from the indexes
        if (isset($indexes['primary'])) {
            return $indexes['primary']->getColumns();
        }

        return [];
    }

    /**
     * Generates getter and setter methods for entity properties.
     *
     * @param Column $column The database column.
     * @return string The generated getter and setter methods.
     */
    private function generateGettersAndSetters(Column $column): string
    {
        $columnName = $column->getName();
        $methodName = ucfirst($columnName);

        return "
    public function get$methodName()
    {
        return \$this->$columnName;
    }

    public function set$methodName(\$value)
    {
        \$this->$columnName = \$value;
    }\n";
    }

    /**
     * Parses a relation annotation string to extract mappedBy and targetEntity values.
     *
     * @param string $relation The relation annotation string.
     * @return array Associative array containing 'mappedBy' and 'targetEntity' values.
     */
    private function parseRelationAnnotation(string $relation): array
    {
        $pattern = '/mappedBy:\s*"([^"]+)",\s*targetEntity:\s*([^\s:]+)::class/';

        if (preg_match($pattern, $relation, $matches)) {
            return [
                'mappedBy' => $matches[1],      // Extracted value for mappedBy
                'targetEntity' => $matches[2]   // Extracted value for targetEntity
            ];
        }

        return ['mappedBy' => null, 'targetEntity' => null]; // Return nulls if not found
    }
}

==================================================

Fichier: src\Controller\AdminController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminController.php
-----
<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Job;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class AdminController extends AbstractController
{
    #[Route('/admin/dashboard', name: 'admin_dashboard')]
    public function dashboard(EntityManagerInterface $entityManager): Response
    {
        // Vérifier que l'utilisateur a le rôle ROLE_ADMIN
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        // Récupérer les statistiques
        $userRepository = $entityManager->getRepository(User::class);
        
        $totalUsers = $userRepository->count([]);
        $candidateCount = $userRepository->count(['type' => 'job_seeker']);
        $companyCount = $userRepository->count(['type' => 'company']);
        
        // Récupérer les derniers candidats
        $lastCandidates = $userRepository->findBy(
            ['type' => 'job_seeker'],
            ['id' => 'DESC'],
            5
        );
        
        // Récupérer les entreprises en attente
        $pendingCompanies = $userRepository->findBy(
            ['type' => 'company', 'isApproved' => false],
            ['id' => 'DESC']
        );
        
        return $this->render('admin/index.html.twig', [
            'totalUsers' => $totalUsers,
            'candidateCount' => $candidateCount,
            'companyCount' => $companyCount,
            'lastCandidates' => $lastCandidates,
            'pendingCompanies' => $pendingCompanies,
        ]);
    }
    
    #[Route('/admin', name: 'admin_home')]
    public function index(): Response
    {
        // Rediriger vers le tableau de bord
        return $this->redirectToRoute('admin_dashboard');
    }

    #[Route('/admin/companies', name: 'admin_companies')]
    public function companies(EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        $userRepository = $entityManager->getRepository(User::class);
        $companies = $userRepository->findBy(['type' => 'company']);
        
        return $this->render('admin/ToutesEntreprises/index.html.twig', [
            'entreprises' => $companies,
        ]);
    }

    #[Route('/admin/job-seekers', name: 'admin_job_seekers')]
    public function jobSeekers(EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        $userRepository = $entityManager->getRepository(User::class);
        $jobSeekers = $userRepository->findBy(['type' => 'job_seeker']);
        
        return $this->render('admin/GestionUtilisateurs/chercheurs.html.twig', [
            'chercheurs' => $jobSeekers,
        ]);
    }

    #[Route('/admin/create-admin', name: 'admin_create_admin')]
    public function createAdmin(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        return $this->render('admin/create_admin.html.twig');
    }

    #[Route('/admin/company/approve/{id}', name: 'admin_approve_company', methods: ['POST'])]
    public function approveCompany(int $id, EntityManagerInterface $entityManager, Request $request): Response
    {
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        $userRepository = $entityManager->getRepository(User::class);
        $company = $userRepository->find($id);
        
        if (!$company) {
            $this->addFlash('error', 'Entreprise non trouvée.');
            return $this->redirectToRoute('admin_dashboard');
        }
        
        if ($company->getType() !== 'company') {
            $this->addFlash('error', 'Cet utilisateur n\'est pas une entreprise.');
            return $this->redirectToRoute('admin_dashboard');
        }
        
        // Approuver l'entreprise
        $company->setIsApproved(true);
        $entityManager->flush();
        
        $this->addFlash('success', 'L\'entreprise a été approuvée avec succès.');
        
        // Rediriger vers la page précédente ou le tableau de bord
        $referer = $request->headers->get('referer');
        return $referer ? $this->redirect($referer) : $this->redirectToRoute('admin_dashboard');
    }

    #[Route('/admin/company/reject/{id}', name: 'admin_reject_company', methods: ['POST'])]
    public function rejectCompany(int $id, EntityManagerInterface $entityManager, Request $request): Response
    {
        $this->denyAccessUnlessGranted('ROLE_ADMIN');
        
        $userRepository = $entityManager->getRepository(User::class);
        $company = $userRepository->find($id);
        
        if (!$company) {
            $this->addFlash('error', 'Entreprise non trouvée.');
            return $this->redirectToRoute('admin_dashboard');
        }
        
        if ($company->getType() !== 'company') {
            $this->addFlash('error', 'Cet utilisateur n\'est pas une entreprise.');
            return $this->redirectToRoute('admin_dashboard');
        }
        
        // Option 1: Rejeter l'entreprise en mettant isApproved à false
        $company->setIsApproved(false);
        $entityManager->flush();
        
        // Option 2: Supprimer l'entreprise (décommentez si vous préférez cette option)
        // $entityManager->remove($company);
        // $entityManager->flush();
        
        $this->addFlash('success', 'L\'entreprise a été rejetée avec succès.');
        
        // Rediriger vers la page précédente ou le tableau de bord
        $referer = $request->headers->get('referer');
        return $referer ? $this->redirect($referer) : $this->redirectToRoute('admin_dashboard');
    }
}

==================================================

Fichier: src\Controller\AdminCreationController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminCreationController.php
-----
<?php

namespace App\Controller;

use App\Entity\Administrateur;
use App\Form\CreateAdministrateurType;
use App\Service\AdministrateurService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

#[IsGranted('ROLE_ADMIN')]
class AdminCreationController extends AbstractController
{
    private $administrateurService;

    public function __construct(AdministrateurService $administrateurService)
    {
        $this->administrateurService = $administrateurService;
    }

    #[Route('/admin/create-admin', name: 'admin_create_admin')]
    public function createAdmin(Request $request, SluggerInterface $slugger): Response
    {
        $administrateur = new Administrateur();
        $form = $this->createForm(CreateAdministrateurType::class, $administrateur);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $username = $form->get('username')->getData();
            $email = $form->get('email')->getData();
            $plainPassword = $form->get('plainPassword')->getData();
            $prenom = $administrateur->getPrenom();
            $nomComplet = $administrateur->getNomComplet();
            
            // Gestion de la photo
            $photoFile = $form->get('photo')->getData();
            $photoFilename = null;
            
            if ($photoFile) {
                $originalFilename = pathinfo($photoFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$photoFile->guessExtension();
                
                try {
                    $photoFile->move(
                        $this->getParameter('photos_directory'),
                        $newFilename
                    );
                    $photoFilename = $newFilename;
                } catch (FileException $e) {
                    $this->addFlash('error', 'Une erreur est survenue lors du téléchargement de la photo');
                }
            }
            
            // Création de l'administrateur
            $admin = $this->administrateurService->creerAdministrateur(
                $username,
                $email,
                $plainPassword,
                $prenom,
                $nomComplet,
                $photoFilename
            );
            
            if ($admin) {
                $this->addFlash('success', 'Administrateur créé avec succès !');
                return $this->redirectToRoute('admin_dashboard');
            } else {
                $this->addFlash('error', 'Une erreur est survenue lors de la création de l\'administrateur');
            }
        }
        
        return $this->render('admin/create_admin.html.twig', [
            'form' => $form->createView(),
        ]);
    }
}
==================================================

Fichier: src\Controller\AdminDemandesController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminDemandesController.php
-----
<?php

namespace App\Controller;

use App\Service\UserService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Http\Attribute\IsGranted;

#[IsGranted('ROLE_ADMIN')]
class AdminDemandesController extends AbstractController
{
    private $userService;

    public function __construct(UserService $userService)
    {
        $this->userService = $userService;
    }

    #[Route('/admin/demandes', name: 'admin_demandes')]
    public function index(): Response
    {
        // Utilisez ROLE_COMPANY car c'est le rôle défini dans votre User entity
        $entreprises = $this->userService->findUsersByRole('ROLE_COMPANY');

        // Filtrer les entreprises non approuvées
        $entreprisesEnAttente = array_filter($entreprises, function($user) {
            return !$user->isApproved();
        });

        return $this->render('admin/demandes/index.html.twig', [
            'entreprises' => $entreprisesEnAttente
        ]);
    }

    #[Route('/admin/demandes/approuver/{email}', name: 'admin_demandes_approuver', methods: ['POST'])]
    public function approuver(Request $request, string $email): Response
    {
        if (!$this->isCsrfTokenValid('approve_company', $request->request->get('_token'))) {
            $this->addFlash('error', 'Token CSRF invalide.');
            return $this->redirectToRoute('admin_demandes');
        }

        $user = $this->userService->findOneByEmail($email);

        if (!$user) {
            $this->addFlash('error', 'Entreprise non trouvée.');
            return $this->redirectToRoute('admin_demandes');
        }

        try {
            $this->userService->validateUser($user);
            $this->addFlash('success', 'Entreprise approuvée avec succès !');
        } catch (\Exception $e) {
            $this->addFlash('error', 'Une erreur est survenue lors de l\'approbation.');
        }

        return $this->redirectToRoute('admin_demandes');
    }

    #[Route('/admin/demandes/rejeter/{email}', name: 'admin_demandes_rejeter', methods: ['POST'])]
    public function rejeter(Request $request, string $email): Response
    {
        if (!$this->isCsrfTokenValid('reject_company', $request->request->get('_token'))) {
            $this->addFlash('error', 'Token CSRF invalide.');
            return $this->redirectToRoute('admin_demandes');
        }

        $user = $this->userService->findOneByEmail($email);

        if (!$user) {
            $this->addFlash('error', 'Entreprise non trouvée.');
            return $this->redirectToRoute('admin_demandes');
        }

        try {
            $this->userService->deleteUser($user);
            $this->addFlash('success', 'Entreprise rejetée avec succès.');
        } catch (\Exception $e) {
            $this->addFlash('error', 'Une erreur est survenue lors du rejet.');
        }

        return $this->redirectToRoute('admin_demandes');
    }
}
==================================================

Fichier: src\Controller\AdminGestionUtilisateursController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminGestionUtilisateursController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

#[IsGranted('ROLE_ADMIN')] // 🔐 Accès réservé aux utilisateurs avec le rôle admin
class AdminGestionUtilisateursController extends AbstractController
{
    #[Route('/admin/gestion-utilisateurs', name: 'admin_gestion_utilisateurs')]
    public function index(): Response
    {
        return $this->render('admin/gestion_utilisateurs/index.html.twig');
    }

    #[Route('/admin/entreprises', name: 'admin_entreprises')]
    public function entreprises(): Response
    {
        // Exemple de données à remplacer par des données réelles (BDD ou service)
        $entreprises = [];

        return $this->render('admin/gestion_utilisateurs/entreprises.html.twig', [
            'entreprises' => $entreprises
        ]);
    }

    #[Route('/admin/chercheurs-emploi', name: 'admin_chercheurs_emploi')]
    public function chercheursEmploi(): Response
    {
        // Exemple de données à remplacer par des données réelles
        $chercheurs = [];

        return $this->render('admin/gestion_utilisateurs/chercheurs.html.twig', [
            'chercheurs' => $chercheurs
        ]);
    }

    #[Route('/admin/home', name: 'admin_home')]
    public function home(): Response
    {
        return $this->render('admin/home/index.html.twig'); // Page d'accueil admin
    }
}
==================================================

Fichier: src\Controller\AdminHomeController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminHomeController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

#[IsGranted('ROLE_ADMIN')] // 🔐 Protège l'accès à toutes les routes du contrôleur
#[Route('/admin')]
class AdminHomeController extends AbstractController
{
    #[Route('/', name: 'admin_home', methods: ['GET'])]
    public function index(): Response
    {
        return $this->render('admin/home/index.html.twig');
    }
}
==================================================

Fichier: src\Controller\AdminToutesEntreprisesController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\AdminToutesEntreprisesController.php
-----
<?php
// src/Controller/AdminToutesEntreprisesController.php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use App\Repository\UserRepository;

#[IsGranted('ROLE_ADMIN')] // 🔐 Accès réservé aux admins
#[Route('/admin')]
class AdminToutesEntreprisesController extends AbstractController
{
    // Commentez ou supprimez cette route si elle est en conflit avec AdminController::companies
    // #[Route('/entreprises', name: 'admin_toutes_entreprises', methods: ['GET'])]
    // public function index(UserRepository $userRepository): Response
    // {
    //     // Récupère toutes les entreprises (type = 'company')
    //     $entreprises = $userRepository->findBy(['type' => 'company']);
    //     
    //     return $this->render('admin/ToutesEntreprises/index.html.twig', [
    //         'entreprises' => $entreprises
    //     ]);
    // }
}

==================================================

Fichier: src\Controller\BaseController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\BaseController.php
-----
<?php

namespace App\Controller;

use App\Repository\ConversationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Mercure\HubInterface;

abstract class BaseController extends AbstractController
{
    protected $conversationRepository;

    public function __construct(ConversationRepository $conversationRepository)
    {
        $this->conversationRepository = $conversationRepository;
    }

    protected function renderWithConversations(string $view, array $parameters = [], HubInterface $hub = null): Response
    {
        $user = $this->getUser();
        
        if ($user) {
            // Ajouter les statistiques pour l'utilisateur connecté
            $unreadCount = $this->conversationRepository->getUnreadCount($user);
            
            $parameters['stats'] = [
                'messages' => $unreadCount
            ];
        }
        
        return $this->render($view, $parameters);
    }
}



==================================================

Fichier: src\Controller\ChatbotController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\ChatbotController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Service\GeminiApiService;
use Psr\Log\LoggerInterface;

class ChatbotController extends AbstractController
{
    #[Route('/chatbot', name: 'chatbot')]
    public function index(): Response
    {
        // Message de bienvenue initial
        $welcomeMessage = "Bonjour ! Je suis Tchala, votre assistant spécialisé dans les questions d'emploi, de stage et d'entretien. Posez-moi vos questions !";
        
        return $this->render('chatbot/index.html.twig', [
            'welcomeMessage' => $welcomeMessage
        ]);
    }

    #[Route('/chatbot/send', name: 'chatbot_send', methods: ['POST'])]
    public function send(Request $request, GeminiApiService $geminiAPI, LoggerInterface $logger): JsonResponse
    {
        try {
            // Log la requête entrante
            $logger->info('Requête chatbot reçue', [
                'content_type' => $request->headers->get('Content-Type'),
                'content_length' => $request->headers->get('Content-Length')
            ]);
            
            // Récupérer et valider les données
            $content = $request->getContent();
            $logger->info('Contenu de la requête', ['content' => $content]);
            
            $data = json_decode($content, true);
            
            if (json_last_error() !== JSON_ERROR_NONE) {
                $logger->error('JSON invalide reçu', [
                    'content' => $content,
                    'error' => json_last_error_msg()
                ]);
                return new JsonResponse(['error' => 'Format de données invalide: ' . json_last_error_msg()], 400);
            }
            
            $userMessage = trim($data['message'] ?? '');
            $logger->info('Message utilisateur', ['message' => $userMessage]);

            if (empty($userMessage)) {
                return new JsonResponse(['error' => 'Veuillez entrer un message.'], 400);
            }

            // Instructions pour le chatbot
            $guidance = <<<PROMPT
Tu es Tchala, un assistant conversationnel spécialisé dans les conseils pour les entretiens d'embauche, 
les offres d'emploi et les stages. Ta mission est d'aider les utilisateurs à préparer leurs entretiens, 
rédiger leurs CV et lettres de motivation, et donner des conseils professionnels.

Règles strictes à suivre :
1. Réponds uniquement aux questions liées au monde professionnel (emploi, stage, entretien)
2. Sois bienveillant, professionnel et encourageant
3. Structure tes réponses avec des paragraphes clairs et des listes à puces quand c'est pertinent
4. Si la question n'est pas dans ton domaine, réponds poliment en expliquant ta spécialité

Question de l'utilisateur : 
PROMPT;

            $fullPrompt = $guidance . $userMessage;
            
            $logger->info('Envoi du prompt à l\'API Gemini');
            $response = $geminiAPI->getChatResponse($fullPrompt);
            $logger->info('Réponse reçue de l\'API Gemini', ['response_length' => strlen($response)]);
            
            $formattedResponse = $this->formatResponse($response);
            
            return new JsonResponse([
                'response' => $formattedResponse
            ]);
        } catch (\Exception $e) {
            $logger->error('Erreur dans ChatbotController::send', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return new JsonResponse([
                'error' => 'Désolé, un problème technique est survenu: ' . $e->getMessage()
            ], 500);
        }
    }

    private function formatResponse(string $response): string
    {
        // Formater les listes pour le HTML
        $response = preg_replace('/\*\*(.*?)\*\*/', '<strong>$1</strong>', $response);
        $response = preg_replace('/\*(.*?)\*/', '<em>$1</em>', $response);
        $response = preg_replace('/- (.*?)(\n|$)/', '• $1<br>', $response);
        
        // Remplacer les sauts de ligne par des balises <br>
        $response = nl2br($response);
        
        return $response;
    }

    #[Route('/chatbot/test', name: 'chatbot_test')]
    public function test(GeminiApiService $geminiAPI, LoggerInterface $logger): Response
    {
        try {
            $testMessage = "Comment préparer un entretien d'embauche?";
            $logger->info('Test de l\'API Gemini', ['message' => $testMessage]);
            
            $response = $geminiAPI->getChatResponse($testMessage);
            $logger->info('Réponse de test reçue', ['response_length' => strlen($response)]);
            
            return new Response(
                '<html><body>
                    <h1>Test de l\'API Gemini</h1>
                    <h2>Message envoyé :</h2>
                    <pre>' . htmlspecialchars($testMessage) . '</pre>
                    <h2>Réponse brute :</h2>
                    <pre>' . htmlspecialchars($response) . '</pre>
                    <h2>Réponse formatée :</h2>
                    <div>' . $this->formatResponse($response) . '</div>
                </body></html>'
            );
        } catch (\Exception $e) {
            $logger->error('Erreur lors du test', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return new Response(
                '<html><body>
                    <h1>Erreur lors du test de l\'API Gemini</h1>
                    <pre>' . htmlspecialchars($e->getMessage()) . '</pre>
                    <h2>Trace :</h2>
                    <pre>' . htmlspecialchars($e->getTraceAsString()) . '</pre>
                </body></html>',
                500
            );
        }
    }
}





==================================================

Fichier: src\Controller\ChatController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\ChatController.php
-----
<?php

// src/Controller/ChatController.php
// src/Controller/ChatController.php
namespace App\Controller;

use App\Entity\Message;
use App\Form\MessageType;
use App\Service\VoiceRecorder;
use App\Service\VoicePlayer;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/chat')]
class ChatController extends AbstractController
{
    private $security;
    private $em;
    private $voiceRecorder;
    private $voicePlayer;

    public function __construct(
        Security $security,
        EntityManagerInterface $em,
        VoiceRecorder $voiceRecorder,
        VoicePlayer $voicePlayer
    ) {
        $this->security = $security;
        $this->em = $em;
        $this->voiceRecorder = $voiceRecorder;
        $this->voicePlayer = $voicePlayer;
    }

    #[Route('/', name: 'chat_index', methods: ['GET'])]
    public function index(): Response
    {
        $messages = $this->em->getRepository(Message::class)->findLatestMessages();
        $form = $this->createForm(MessageType::class);

        return $this->render('chat/index.html.twig', [
            'messages' => $messages,
            'form' => $form->createView(),
            'welcome_message' => 'Bienvenue dans le chat!'
        ]);
    }

    // #[Route('/send', name: 'chat_send', methods: ['POST'])]
    // public function send(Request $request): JsonResponse
    // {
    //     $user = $this->security->getUser();
    //     if (!$user) {
    //         return new JsonResponse(['error' => 'Unauthorized'], 401);
    //     }

    //     $data = json_decode($request->getContent(), true);
    //     $message = new Message();
    //     $message->setSender($user->getUsername());

    //     if (isset($data['audio']) && $data['audio']) {
    //         // Gestion message vocal
    //         $audioData = base64_decode($data['audio']);
    //         $fileName = 'voice_'.uniqid().'.wav';
    //         file_put_contents($this->getParameter('voice_messages_directory').'/'.$fileName, $audioData);

    //         $message->setVoiceFilePath($fileName);
    //         $message->setContent('[Message vocal]');
    //     } elseif (isset($data['text']) && !empty(trim($data['text']))) {
    //         // Gestion message texte
    //         $message->setContent(trim($data['text']));
    //     } else {
    //         return new JsonResponse(['error' => 'Invalid message data'], 400);
    //     }

    //     $this->em->persist($message);
    //     $this->em->flush();

    //     return new JsonResponse([
    //         'status' => 'success',
    //         'message' => $this->formatMessage($message)
    //     ]);
    // }

    // #[Route('/messages', name: 'chat_get_messages', methods: ['GET'])]
    // public function getMessages(): JsonResponse
    // {
    //     $messages = $this->em->getRepository(Message::class)->findLatestMessages();
        
    //     $formattedMessages = array_map([$this, 'formatMessage'], $messages);

    //     return new JsonResponse($formattedMessages);
    // }

    // #[Route('/play/{filename}', name: 'chat_play_voice', methods: ['GET'])]
    // public function playVoiceMessage(string $filename): Response
    // {
    //     return $this->voicePlayer->play($filename);
    // }

    private function formatMessage(Message $message): array
    {
        return [
            'id' => $message->getId(),
            'sender' => $message->getSender(),
            'content' => $message->getContent(),
            'voiceFilePath' => $message->getVoiceFilePath(),
            'isVoice' => $message->isVoiceMessage(),
            // 'timestamp' => $message->getCreatedAt()->format('H:i'),
            // 'date' => $message->getCreatedAt()->format('d/m/Y')
        ];
    }
}
==================================================

Fichier: src\Controller\ConversationController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\ConversationController.php
-----
<?php

namespace App\Controller;

use App\Entity\Conversation;
use App\Entity\Message;
use App\Entity\User;
use App\Form\MessageType;
use App\Repository\ConversationRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;
use Symfony\Component\Mercure\HubInterface;
use Symfony\Component\Mercure\Update;
use Symfony\Component\Mercure\Discovery;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
use Symfony\Bundle\SecurityBundle\Security;
use App\Message\MercureUpdateMessage;
use Symfony\Component\Messenger\MessageBusInterface;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

#[Route('/conversation')]
#[IsGranted('ROLE_USER')]
class ConversationController extends BaseController
{
    public function __construct(
        ConversationRepository $conversationRepository,
        private EntityManagerInterface $entityManager,
        private UserRepository $userRepository,
        private AuthorizationCheckerInterface $authorizationChecker,
        private HubInterface $hub,
        private Security $security,
        private MessageBusInterface $messageBus
    ) {
        parent::__construct($conversationRepository);
    }

    #[Route('/', name: 'conversation_index', methods: ['GET'])]
    public function index(): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        
        $user = $this->getUser();
        $conversations = $this->conversationRepository->findByParticipant($user);
        
        return $this->render('conversation/index.html.twig', [
            'conversations' => $conversations,
            'search_query' => null, // Ajouter cette ligne
        ]);
    }

    protected function renderWithConversations(string $template, array $parameters = [], HubInterface $hub = null): Response
    {
        // Cette méthode n'est plus nécessaire car nous n'utilisons plus Mercure
        return $this->render($template, $parameters);
    }

    #[Route('/unread-count', name: 'conversation_unread_count', methods: ['GET'])]
    public function unreadCount(): JsonResponse
    {
        /** @var User $user */
        $user = $this->getUser();
        $count = $user ? $this->conversationRepository->getUnreadCount($user) : 0;
        
        return $this->json(['count' => $count]);
    }

    #[Route('/new', name: 'conversation_new', methods: ['GET', 'POST'])]
    public function new(Request $request, HubInterface $hub): Response
    {
        /** @var User $user */
        $user = $this->getUser();
        if (!$user instanceof User) {
            throw new AccessDeniedException('Invalid user type');
        }

        if ($request->isMethod('POST')) {
            $title = $request->request->get('title');
            $participantIds = $request->request->all('participants');
            $initialMessageContent = $request->request->get('initial_message');
            
            if (empty($participantIds)) {
                $this->addFlash('error', 'Vous devez sélectionner au moins un participant');
                return $this->redirectToRoute('conversation_new');
            }

            if (empty($initialMessageContent)) {
                $this->addFlash('error', 'Veuillez saisir un message initial');
                return $this->redirectToRoute('conversation_new');
            }

            $participants = $this->userRepository->findBy(['id' => $participantIds]);
            
            // Créer la conversation
            $conversation = new Conversation();
            $conversation->setTitle($title);
            $conversation->addParticipant($user); // Ajouter l'utilisateur courant
            
            foreach ($participants as $participant) {
                $conversation->addParticipant($participant);
            }
            
            $this->entityManager->persist($conversation);
            
            // Créer le message initial
            $message = new Message();
            $message->setContent($initialMessageContent);
            $message->setSender($user);
            $message->setConversation($conversation);
            // La date de création est déjà définie dans le constructeur
            $message->setIsRead(false);

            $this->entityManager->persist($message);
            $this->entityManager->flush();
            
            // Publier une mise à jour via Mercure pour notifier les participants
            $this->publishMessageUpdate($conversation, $message, $user);
            
            $this->addFlash('success', 'Conversation créée avec succès');
            return $this->redirectToRoute('conversation_show', ['id' => $conversation->getId()]);
        }

        // Récupérer tous les chercheurs d'emploi (sauf l'utilisateur courant)
        $users = $this->userRepository->findJobSeekers($user);
        
        return $this->renderWithConversations('conversation/new.html.twig', [
            'users' => $users,
        ], $hub);
    }

    #[Route('/{id}', name: 'conversation_show', methods: ['GET', 'POST'])]
    public function show(Request $request, string $id): Response
    {
        // Convertir l'ID en entier
        $id = (int) $id;
        
        // Rechercher la conversation manuellement au lieu d'utiliser le ParamConverter
        $conversation = $this->conversationRepository->find($id);
        
        // Vérifier si la conversation existe
        if (!$conversation) {
            $this->addFlash('error', 'La conversation demandée n\'existe pas.');
            return $this->redirectToRoute('conversation_index');
        }
        
        // Vérifier que l'utilisateur est un participant de la conversation
        if (!$conversation->getParticipants()->contains($this->getUser())) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à accéder à cette conversation');
        }
        
        // Traitement du formulaire d'envoi de message
        if ($request->isMethod('POST')) {
            $content = $request->request->get('content');
            
            if (!empty($content)) {
                $message = new Message();
                $message->setContent($content);
                $message->setSender($this->getUser());
                $message->setConversation($conversation);
                $message->setCreatedAt(new \DateTime());
                
                $this->entityManager->persist($message);
                $this->entityManager->flush();
                
                // Publier une mise à jour via Mercure
                $this->publishMessageUpdate($conversation, $message, $this->getUser());
                
                return $this->redirectToRoute('conversation_show', ['id' => $conversation->getId()]);
            }
        }
        
        return $this->render('conversation/show.html.twig', [
            'conversation' => $conversation,
        ]);
    }

    #[Route('/{id}/typing', name: 'conversation_typing', methods: ['POST'])]
    public function typing(Conversation $conversation): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $conversation);

        /** @var User $user */
        $user = $this->getUser();
        if (!$user instanceof User) {
            throw new AccessDeniedException('Invalid user type');
        }

        $update = new Update(
            "/conversation/{$conversation->getId()}",
            json_encode([
                'type' => 'typing',
                'user_id' => $user->getId(),
                'username' => $user->getUsername(),
                'timestamp' => time()
            ])
        );

        $this->hub->publish($update);

        return new Response(null, Response::HTTP_NO_CONTENT);
    }

    #[Route('/{id}/add-participant', name: 'conversation_add_participant', methods: ['POST'])]
    public function addParticipant(Request $request, string $id): Response 
    {
        $id = (int) $id;
        $conversation = $this->conversationRepository->find($id);
        
        if (!$conversation) {
            $this->addFlash('error', 'La conversation demandée n\'existe pas.');
            return $this->redirectToRoute('conversation_index');
        }
        
        $this->denyAccessUnlessGranted('EDIT', $conversation);

        $userId = $request->request->get('user_id');
        $user = $this->userRepository->find($userId);

        if (!$user) {
            $this->addFlash('error', 'Utilisateur non trouvé');
            return $this->redirectToRoute('conversation_show', ['id' => $conversation->getId()]);
        }

        if ($conversation->getParticipants()->contains($user)) {
            $this->addFlash('warning', 'Cet utilisateur fait déjà partie de la conversation');
            return $this->redirectToRoute('conversation_show', ['id' => $conversation->getId()]);
        }
        
        $conversation->addParticipant($user);
        $this->entityManager->flush();
        
        $this->addFlash('success', 'Participant ajouté avec succès');
        return $this->redirectToRoute('conversation_show', ['id' => $conversation->getId()]);
    }

    #[Route('/{id}/leave', name: 'conversation_leave', methods: ['POST'])]
    public function leave(string $id): Response
    {
        $id = (int) $id;
        $conversation = $this->conversationRepository->find($id);
        
        if (!$conversation) {
            $this->addFlash('error', 'La conversation demandée n\'existe pas.');
            return $this->redirectToRoute('conversation_index');
        }
        
        $this->denyAccessUnlessGranted('VIEW', $conversation);

        /** @var User $user */
        $user = $this->getUser();
        if (!$user instanceof User) {
            throw new AccessDeniedException('Invalid user type');
        }

        $conversation->removeParticipant($user);
        
        if ($conversation->getParticipants()->count() <= 1) {
            $this->entityManager->remove($conversation);
        }
        
        $this->entityManager->flush();

        return $this->redirectToRoute('conversation_index');
    }

    /**
     * Marque tous les messages non lus d'une conversation comme lus pour un utilisateur donné
     */
    private function markMessagesAsRead(Conversation $conversation, User $user): void
    {
        $unreadMessages = $conversation->getMessages()->filter(
            fn(Message $message) => 
                $message->getSender() !== $user && 
                !$message->getIsRead()
        );
        
        foreach ($unreadMessages as $message) {
            $message->setIsRead(true);
        }
        
        if (count($unreadMessages) > 0) {
            $this->entityManager->flush();
        }
    }

    private function publishMessageUpdate(Conversation $conversation, Message $message, User $sender): void
    {
        $data = json_encode([
            'type' => 'new_message',
            'id' => $message->getId(),
            'content' => $message->getContent(),
            'sender' => [
                'id' => $sender->getId(),
                'username' => $sender->getUsername(),
                'avatar' => $sender->getProfileImagePath() ?? 'default-avatar.png'
            ],
            'conversation_id' => $conversation->getId(),
            'created_at' => $message->getCreatedAt()->format('Y-m-d H:i:s'),
            'unread_count' => $this->conversationRepository->getUnreadCount($sender)
        ]);

        $topics = [
            "/conversation/{$conversation->getId()}",
            "/user/{$sender->getId()}"
        ];

        // Envoyer la mise à jour via le système de messagerie
        $this->messageBus->dispatch(new MercureUpdateMessage($topics, $data, true));
    }

    #[Route('/search', name: 'conversation_search', methods: ['GET'])]
    public function search(Request $request): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        
        $query = $request->query->get('q', '');
        $user = $this->getUser();
        
        if (empty($query)) {
            return $this->redirectToRoute('conversation_index');
        }
        
        // Utiliser directement la méthode du repository pour la recherche
        $conversations = $this->conversationRepository->searchConversations($user, $query);
        
        // Préparer les messages correspondants pour l'affichage
        $matchingMessages = [];
        
        foreach ($conversations as $conversation) {
            $matchingMessages[$conversation->getId()] = [];
            
            foreach ($conversation->getMessages() as $message) {
                if (stripos($message->getContent(), $query) !== false) {
                    $matchingMessages[$conversation->getId()][] = $message;
                }
            }
        }
        
        return $this->render('conversation/index.html.twig', [
            'conversations' => $conversations,
            'search_query' => $query,
            'matching_messages' => $matchingMessages
        ]);
    }

    #[Route('/{id}/archive', name: 'conversation_archive', methods: ['POST'])]
    public function archive(Conversation $conversation): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $conversation);
        
        $conversation->setIsArchived(true);
        $this->entityManager->flush();
        
        $this->addFlash('success', 'Conversation archivée avec succès');
        return $this->redirectToRoute('conversation_index');
    }

    #[Route('/{id}/unarchive', name: 'conversation_unarchive', methods: ['POST'])]
    public function unarchive(Conversation $conversation): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $conversation);
        
        $conversation->setIsArchived(false);
        $this->entityManager->flush();
        
        $this->addFlash('success', 'Conversation désarchivée avec succès');
        return $this->redirectToRoute('conversation_index');
    }

    #[Route('/archived', name: 'conversation_archived', methods: ['GET'])]
    public function archived(HubInterface $hub): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        
        $user = $this->getUser();
        $conversations = $this->conversationRepository->findArchivedByParticipant($user);
        
        return $this->renderWithConversations('conversation/archived.html.twig', [
            'conversations' => $conversations,
        ], $hub);
    }

    /**
     * Génère l'URL de souscription Mercure pour une conversation
     */
    private function generateMercureSubscribeUrl(HubInterface $hub, Conversation $conversation): string
    {
        $user = $this->getUser();
        $topics = [
            "/conversation/{$conversation->getId()}",
            "/user/{$user->getId()}"
        ];
        
        return $hub->getPublicUrl() . '?topic=' . urlencode(implode('&topic=', $topics));
    }

    #[Route('/{id}/check-new-messages', name: 'conversation_check_new_messages', methods: ['GET'])]
    public function checkNewMessages(Request $request, string $id): JsonResponse
    {
        $id = (int) $id;
        $conversation = $this->conversationRepository->find($id);
        
        if (!$conversation) {
            return $this->json(['error' => 'Conversation not found'], 404);
        }
        
        // Vérifier que l'utilisateur est un participant de la conversation
        if (!$conversation->getParticipants()->contains($this->getUser())) {
            return $this->json(['error' => 'Access denied'], 403);
        }
        
        $lastId = $request->query->get('lastId', 0);
        
        // Vérifier s'il y a des messages plus récents que lastId
        $hasNewMessages = $this->entityManager->getRepository(Message::class)
            ->createQueryBuilder('m')
            ->select('COUNT(m.id)')
            ->where('m.conversation = :conversation')
            ->andWhere('m.id > :lastId')
            ->setParameter('conversation', $conversation)
            ->setParameter('lastId', $lastId)
            ->getQuery()
            ->getSingleScalarResult() > 0;
        
        return $this->json(['hasNewMessages' => $hasNewMessages]);
    }

    #[Route('/debug-search', name: 'conversation_debug_search', methods: ['GET'])]
    public function debugSearch(Request $request): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        
        $query = $request->query->get('q', '');
        $user = $this->getUser();
        
        if (empty($query)) {
            return $this->json(['error' => 'Aucun terme de recherche fourni']);
        }
        
        // Rechercher toutes les conversations de l'utilisateur
        $allConversations = $this->conversationRepository->findByParticipant($user);
        
        // Filtrer manuellement les conversations qui contiennent le terme de recherche
        $result = [];
        
        foreach ($allConversations as $conversation) {
            $matchingMessages = [];
            $titleMatches = false;
            
            // Vérifier si le titre correspond
            if (stripos($conversation->getTitle(), $query) !== false) {
                $titleMatches = true;
            }
            
            // Vérifier si un message correspond
            foreach ($conversation->getMessages() as $message) {
                if (stripos($message->getContent(), $query) !== false) {
                    $matchingMessages[] = [
                        'id' => $message->getId(),
                        'content' => $message->getContent(),
                        'sender' => $message->getSender()->getUsername(),
                        'createdAt' => $message->getCreatedAt()->format('Y-m-d H:i:s')
                    ];
                }
            }
            
            if ($titleMatches || count($matchingMessages) > 0) {
                $result[] = [
                    'id' => $conversation->getId(),
                    'title' => $conversation->getTitle(),
                    'titleMatches' => $titleMatches,
                    'matchingMessages' => $matchingMessages,
                    'totalMessages' => count($matchingMessages)
                ];
            }
        }
        
        return $this->json([
            'query' => $query,
            'totalConversations' => count($result),
            'conversations' => $result
        ]);
    }

    #[Route('/debug-job-seeker-search', name: 'conversation_debug_job_seeker_search', methods: ['GET'])]
    public function debugJobSeekerSearch(Request $request): Response
    {
        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
        
        $query = $request->query->get('q', '');
        $user = $this->getUser();
        
        if (empty($query)) {
            return $this->json(['error' => 'Aucun terme de recherche fourni']);
        }
        
        // Rechercher les conversations
        $conversations = $this->conversationRepository->searchConversationsByJobSeekerMessages($user, $query);
        
        $result = [];
        foreach ($conversations as $conversation) {
            $jobSeekerMessages = [];
            $otherMessages = [];
            
            foreach ($conversation->getMessages() as $message) {
                $messageData = [
                    'id' => $message->getId(),
                    'content' => $message->getContent(),
                    'sender' => $message->getSender()->getUsername(),
                    'roles' => $message->getSender()->getRoles(),
                    'createdAt' => $message->getCreatedAt()->format('Y-m-d H:i:s'),
                    'matchesQuery' => (stripos($message->getContent(), $query) !== false)
                ];
                
                if (in_array('ROLE_JOB_SEEKER', $message->getSender()->getRoles())) {
                    $jobSeekerMessages[] = $messageData;
                } else {
                    $otherMessages[] = $messageData;
                }
            }
            
            $result[] = [
                'id' => $conversation->getId(),
                'title' => $conversation->getTitle(),
                'titleMatchesQuery' => (stripos($conversation->getTitle(), $query) !== false),
                'participants' => array_map(function($p) use ($query) {
                    return [
                        'username' => $p->getUsername(),
                        'roles' => $p->getRoles(),
                        'isJobSeeker' => in_array('ROLE_JOB_SEEKER', $p->getRoles()),
                        'matchesQuery' => (
                            stripos($p->getUsername(), $query) !== false || 
                            (method_exists($p, 'getFirstName') && stripos($p->getFirstName(), $query) !== false) ||
                            (method_exists($p, 'getLastName') && stripos($p->getLastName(), $query) !== false)
                        )
                    ];
                }, $conversation->getParticipants()->toArray()),
                'jobSeekerMessages' => $jobSeekerMessages,
                'otherMessages' => $otherMessages
            ];
        }
        
        return $this->json([
            'query' => $query,
            'count' => count($conversations),
            'conversations' => $result
        ]);
    }

    #[Route('/test-search', name: 'conversation_test_search')]
    public function testSearch(Request $request): Response
    {
        $query = $request->query->get('q', 'test');
        $user = $this->getUser();
        
        // Récupérer toutes les conversations
        $conversations = $this->conversationRepository->findByParticipant($user);
        
        $result = [];
        foreach ($conversations as $conversation) {
            $messages = [];
            foreach ($conversation->getMessages() as $message) {
                $messages[] = [
                    'id' => $message->getId(),
                    'content' => $message->getContent(),
                    'sender' => $message->getSender()->getUsername(),
                    'matches' => (stripos($message->getContent(), $query) !== false)
                ];
            }
            
            $result[] = [
                'id' => $conversation->getId(),
                'title' => $conversation->getTitle(),
                'title_matches' => (stripos($conversation->getTitle(), $query) !== false),
                'messages' => $messages,
                'message_count' => count($messages),
                'matching_message_count' => count(array_filter($messages, function($m) { return $m['matches']; }))
            ];
        }
        
        return $this->json([
            'query' => $query,
            'user_id' => $user->getId(),
            'conversation_count' => count($conversations),
            'conversations' => $result
        ]);
    }

    #[Route('/diagnostic-search', name: 'conversation_diagnostic_search')]
    public function diagnosticSearch(Request $request): Response
    {
        $query = $request->query->get('q', '');
        $user = $this->getUser();
        
        // Récupérer toutes les conversations
        $conversations = $this->conversationRepository->findByParticipant($user);
        
        // Informations de diagnostic
        $diagnosticInfo = [
            'query' => $query,
            'user_id' => $user->getId(),
            'total_conversations' => count($conversations),
            'conversations' => []
        ];
        
        foreach ($conversations as $conversation) {
            $matchingMessages = [];
            
            foreach ($conversation->getMessages() as $message) {
                if (stripos($message->getContent(), $query) !== false) {
                    $matchingMessages[] = [
                        'id' => $message->getId(),
                        'content' => $message->getContent(),
                        'sender' => $message->getSender()->getUsername(),
                        'created_at' => $message->getCreatedAt()->format('Y-m-d H:i:s')
                    ];
                }
            }
            
            $diagnosticInfo['conversations'][] = [
                'id' => $conversation->getId(),
                'title' => $conversation->getTitle(),
                'title_matches' => !empty($query) && stripos($conversation->getTitle(), $query) !== false,
                'participant_count' => $conversation->getParticipants()->count(),
                'message_count' => $conversation->getMessages()->count(),
                'matching_messages' => $matchingMessages,
                'matching_message_count' => count($matchingMessages)
            ];
        }
        
        return $this->json($diagnosticInfo);
    }
}































==================================================

Fichier: src\Controller\CreateAdminController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\CreateAdminController.php
-----
<?php
// src/Controller/CreateAdminController.php

namespace App\Controller;

use App\Entity\Administrateur;
use App\Form\AdministrateurType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface; // Modification ici

class CreateAdminController extends AbstractController
{
    #[Route("/admin/create", name: "create_admin")]
    public function create(
        Request $request,
        EntityManagerInterface $entityManager,
        UserPasswordHasherInterface $passwordHasher // Modification ici
    ): Response
    {
        $administrateur = new Administrateur();
        $form = $this->createForm(AdministrateurType::class, $administrateur);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Récupération du mot de passe en clair
            $plainPassword = $administrateur->getMotdepasse();

            // Hachage avec la nouvelle interface
            $hashedPassword = $passwordHasher->hashPassword(
                $administrateur,
                $plainPassword
            );

            $administrateur->setMotdepasse($hashedPassword);

            $entityManager->persist($administrateur);
            $entityManager->flush();

            $this->addFlash('success', 'Administrateur créé avec succès !');
            return $this->redirectToRoute('app_login');
        }

        return $this->render('admin/create.html.twig', [
            'form' => $form->createView(),
        ]);
    }
}
==================================================

Fichier: src\Controller\EntrepriseController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\EntrepriseController.php
-----
<?php

namespace App\Controller;

use App\Entity\BusinessCardHtml;
use App\Entity\User;
use App\Service\GeminiApiService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use App\Form\EntrepriseProfileType;

class EntrepriseController extends AbstractController
{
    #[Route('/entreprise/edit-profile', name: 'entreprise_edit_profile')]
    public function editProfile(Request $request, EntityManagerInterface $entityManager, SluggerInterface $slugger): Response
    {
        /** @var User $user */
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        $form = $this->createForm(EntrepriseProfileType::class, $user);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $logoFile = $form->get('logoFile')->getData();
            
            if ($logoFile) {
                $originalFilename = pathinfo($logoFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$logoFile->guessExtension();
                
                // Vérifier que le répertoire existe, sinon le créer
                $uploadDir = $this->getParameter('company_logos_directory');
                if (!file_exists($uploadDir)) {
                    mkdir($uploadDir, 0777, true);
                }
                
                try {
                    // Déplacer le fichier
                    $logoFile->move($uploadDir, $newFilename);
                    
                    // Supprimer l'ancien logo si nécessaire
                    $oldProfileImage = $user->getProfileImage();
                    if ($oldProfileImage) {
                        $oldImagePath = $this->getParameter('kernel.project_dir').'/public/'.$oldProfileImage;
                        if (file_exists($oldImagePath)) {
                            unlink($oldImagePath);
                        }
                    }
                    
                    // Enregistrer le chemin relatif dans la base de données
                    // Important: le chemin doit être relatif à partir du répertoire public
                    $user->setProfileImage('uploads/company_logos/'.$newFilename);
                    
                    // Enregistrer les modifications
                    $entityManager->persist($user);
                    $entityManager->flush();
                    
                    $this->addFlash('success', 'Logo téléchargé avec succès !');
                    
                } catch (FileException $e) {
                    // Log l'erreur pour le débogage
                    error_log('Erreur lors du téléchargement du logo: ' . $e->getMessage());
                    
                    $this->addFlash('error', 'Une erreur est survenue lors du téléchargement du logo: ' . $e->getMessage());
                }
            } else {
                // Si pas de logo, enregistrer quand même les autres modifications
                $entityManager->persist($user);
                $entityManager->flush();
                $this->addFlash('success', 'Profil mis à jour avec succès.');
            }
            
            return $this->redirectToRoute('entreprise_edit_profile');
        }
        
        return $this->render('entreprise/edit_profile.html.twig', [
            'form' => $form->createView(),
            'user' => $user
        ]);
    }

    // Vérifier que la route est correctement définie
    #[Route('/entreprise', name: 'app_entreprise_home')]
    public function index(): Response
    {
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        return $this->render('entreprise/home.html.twig', [
            'user' => $user,
        ]);
    }

    #[Route('/entreprise/carte-visite', name: 'entreprise_carte_visite')]
    public function carteVisite(): Response
    {
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        return $this->render('entreprise/carte_visite.html.twig', [
            'user' => $user,
        ]);
    }

    #[Route('/entreprise/profile-image-debug', name: 'entreprise_profile_image_debug')]
    public function profileImageDebug(): Response
    {
        /** @var User $user */
        $user = $this->getUser();
        
        if (!$user) {
            return $this->json(['error' => 'Utilisateur non connecté'], 403);
        }
        
        $profileImage = $user->getProfileImage();
        $imagePath = null;
        $imageExists = false;
        
        if ($profileImage) {
            $imagePath = $this->getParameter('kernel.project_dir').'/public/'.$profileImage;
            $imageExists = file_exists($imagePath);
        }
        
        return $this->json([
            'user_id' => $user->getId(),
            'username' => $user->getUsername(),
            'profile_image_path_in_db' => $profileImage,
            'full_image_path' => $imagePath,
            'image_exists' => $imageExists,
            'public_url' => $profileImage ? $this->generateUrl('app_home', [], UrlGeneratorInterface::ABSOLUTE_URL).$profileImage : null
        ]);
    }

    #[Route('/entreprise/carte-visite/generate-ai', name: 'entreprise_generate_ai_card', methods: ['POST'])]
    public function generateAICard(Request $request, GeminiApiService $geminiAPI): JsonResponse
    {
        try {
            $data = json_decode($request->getContent(), true);
            
            if (!isset($data['description']) || !isset($data['companyName'])) {
                return new JsonResponse(['error' => 'Données manquantes'], 400);
            }
            
            // Construire le prompt pour l'IA
            $prompt = "Tu es un expert en design de cartes de visite professionnelles. Crée une carte de visite moderne avec les informations suivantes:\n\n";
            $prompt .= "Nom de l'entreprise: " . $data['companyName'] . "\n";
            $prompt .= "Secteur d'activité: " . ($data['industry'] ?? 'Non spécifié') . "\n";
            $prompt .= "Email: " . ($data['email'] ?? 'Non spécifié') . "\n";
            $prompt .= "Adresse: " . ($data['address'] ?? 'Non spécifié') . "\n\n";
            $prompt .= "Style demandé: " . $data['description'] . "\n\n";
            $prompt .= "Instructions spécifiques:\n";
            $prompt .= "1. Crée uniquement le code HTML et CSS pour une carte de visite moderne et professionnelle\n";
            $prompt .= "2. Utilise des dégradés de couleurs modernes et élégants\n";
            $prompt .= "3. Inclus des effets visuels subtils comme des ombres, des formes géométriques ou des motifs\n";
            $prompt .= "4. Assure-toi que le design est responsive et s'adapte à différentes tailles d'écran\n";
            $prompt .= "5. Utilise des polices modernes et lisibles\n";
            $prompt .= "6. Organise les informations de manière claire et professionnelle\n\n";
            $prompt .= "Réponds uniquement avec le code HTML et CSS de la carte de visite, sans explications. Le code doit être complet et prêt à être utilisé. N'inclus pas de balises <html>, <head> ou <body>, seulement le HTML et CSS nécessaire pour la carte elle-même.";
            
            // Appeler l'API Gemini
            $response = $geminiAPI->getChatResponse($prompt);
            
            // Extraire le code HTML de la réponse
            $htmlCode = $this->extractHtmlFromResponse($response);
            
            return new JsonResponse([
                'cardHtml' => $htmlCode
            ]);
        } catch (\Exception $e) {
            return new JsonResponse(['error' => $e->getMessage()], 500);
        }
    }

    #[Route('/entreprise/carte-visite/save-ai', name: 'entreprise_save_ai_card', methods: ['POST'])]
    public function saveAICard(Request $request, EntityManagerInterface $entityManager): JsonResponse
    {
        try {
            $data = json_decode($request->getContent(), true);
            
            if (!isset($data['cardHtml'])) {
                return new JsonResponse(['error' => 'Données manquantes'], 400);
            }
            
            // Récupérer l'utilisateur connecté
            $user = $this->getUser();
            
            // Vérifier si l'utilisateur a déjà une carte de visite HTML
            $businessCardHtml = $user->getBusinessCardHtml();
            
            if (!$businessCardHtml) {
                // Créer une nouvelle entité BusinessCardHtml
                $businessCardHtml = new BusinessCardHtml();
                $businessCardHtml->setUser($user);
            }
            
            // Mettre à jour le contenu HTML
            $businessCardHtml->setHtmlContent($data['cardHtml']);
            
            // Persister les changements
            $entityManager->persist($businessCardHtml);
            $entityManager->flush();
            
            return new JsonResponse(['success' => true]);
        } catch (\Exception $e) {
            return new JsonResponse(['error' => $e->getMessage()], 500);
        }
    }

    /**
     * Extraire le code HTML de la réponse de l'IA
     */
    private function extractHtmlFromResponse(string $response): string
    {
        // Nettoyer la réponse pour extraire uniquement le code HTML
        // Supprimer les balises de code markdown si présentes
        $response = preg_replace('/```html\s*/', '', $response);
        $response = preg_replace('/```\s*/', '', $response);
        
        // Supprimer les explications textuelles avant ou après le code HTML
        if (strpos($response, '<div') !== false) {
            $startPos = strpos($response, '<div');
            $endPos = strrpos($response, '</div>') + 6;
            if ($startPos !== false && $endPos !== false) {
                $response = substr($response, $startPos, $endPos - $startPos);
            }
        }
        
        return trim($response);
    }
}

==================================================

Fichier: src\Controller\EntrepriseProfileController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\EntrepriseProfileController.php
-----
<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\EntrepriseProfileType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/entreprise/edit-profile', name: 'entreprise_edit_profile')]
class EntrepriseProfileController extends AbstractController
{
    public function editProfile(Request $request, EntityManagerInterface $entityManager): Response
    {
        // Récupérer l'utilisateur connecté
        $user = $this->getUser();
        
        // Vérifier que l'utilisateur est connecté et est une entreprise
        if (!$user instanceof User || $user->getType() !== 'company') {
            return $this->redirectToRoute('app_login');
        }
        
        // Créer le formulaire
        $form = $this->createForm(EntrepriseProfileType::class, $user);
        $form->handleRequest($request);
        
        // Traiter le formulaire soumis
        if ($form->isSubmitted() && $form->isValid()) {
            // Enregistrer les modifications
            $entityManager->flush();
            
            // Ajouter un message flash de succès
            $this->addFlash('success', 'Les modifications ont été enregistrées avec succès.');
            
            // Rediriger vers la page d'accueil de l'entreprise
            return $this->redirectToRoute('entreprise_home');
        }
        
        // Afficher le formulaire
        return $this->render('entreprise/edit_profile.html.twig', [
            'form' => $form->createView(),
            'user' => $user
        ]);
    }
}


==================================================

Fichier: src\Controller\FirstPageController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\FirstPageController.php
-----
<?php
// src/Controller/FirstPageController.php

// src/Controller/FirstPageController.php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class FirstPageController extends AbstractController
{
    #[Route('/', name: 'app_first_page')]
    public function index(): Response
    {
        return $this->render('first_page/index.html.twig', [
            'welcome_message' => 'WELCOME TO ESPRIM CAREER',
            'subtitle' => 'Build your career. Make your mark. Right here in Tunisia',
        ]);
    }

    #[Route('/features', name: 'app_features')]
    public function features(): Response
    {
        return $this->render('first_page/features.html.twig', [
            'page_title' => 'Our Features',
            'features' => [
                [
                    'title' => 'Job Listings',
                    'description' => 'Access thousands of job offers from top companies in Tunisia',
                    'icon' => 'fas fa-briefcase'
                ],
                [
                    'title' => 'Internship Opportunities',
                    'description' => 'Find the perfect internship to kickstart your career',
                    'icon' => 'fas fa-user-graduate'
                ],
                [
                    'title' => 'Company Profiles',
                    'description' => 'Explore company profiles and culture before applying',
                    'icon' => 'fas fa-building'
                ],
                [
                    'title' => 'Application Tracking',
                    'description' => 'Track all your applications in one place',
                    'icon' => 'fas fa-tasks'
                ],
                [
                    'title' => 'Career Advice',
                    'description' => 'Get expert advice to improve your job search',
                    'icon' => 'fas fa-lightbulb'
                ],
                [
                    'title' => 'Custom Alerts',
                    'description' => 'Receive notifications for new jobs matching your profile',
                    'icon' => 'fas fa-bell'
                ]
            ]
        ]);
    }

    #[Route('/about', name: 'app_about')]
    public function about(): Response
    {
        return $this->render('first_page/about.html.twig', [
            'page_title' => 'About Esprim Career',
            'about_sections' => [
                [
                    'title' => 'Our Mission',
                    'content' => 'To connect talented professionals with the best career opportunities in Tunisia and help companies find the perfect candidates for their teams.'
                ],
                [
                    'title' => 'Our Vision',
                    'content' => 'To become the leading career platform in Tunisia, transforming the way people find jobs and companies hire talent.'
                ],
                [
                    'title' => 'Our Story',
                    'content' => 'Founded in 2023, Esprim Career started as a small project to help students find internships. Today, we serve thousands of job seekers and hundreds of companies across various industries.'
                ]
            ],
            'team' => [
                [
                    'name' => 'John Doe',
                    'position' => 'CEO & Founder',
                    'bio' => '10+ years in HR and recruitment',
                    'photo' => 'team1.jpg'
                ],
                [
                    'name' => 'Jane Smith',
                    'position' => 'CTO',
                    'bio' => 'Tech enthusiast and problem solver',
                    'photo' => 'team2.jpg'
                ]
            ]
        ]);
    }

    #[Route('/contact', name: 'app_contact')]
    public function contact(): Response
    {
        return $this->render('first_page/contact.html.twig', [
            'page_title' => 'Contact Us',
            'contact_info' => [
                'address' => '123 Career Street, Tunis, Tunisia',
                'phone' => '+216 12 345 678',
                'email' => 'contact@esprimcareer.tn',
                'working_hours' => 'Monday to Friday, 9:00 AM to 5:00 PM'
            ]
        ]);
    }
}
==================================================

Fichier: src\Controller\HomeController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\HomeController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class HomeController extends AbstractController
{
    #[Route('/home', name: 'app_home')]
    public function index(): Response
    {
        // Rediriger en fonction du rôle de l'utilisateur
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_first_page');
        }
        
        if (in_array('ROLE_JOB_SEEKER', $user->getRoles())) {
            return $this->redirectToRoute('job_seeker_home');
        }
        
        if (in_array('ROLE_COMPANY', $user->getRoles())) {
            return $this->redirectToRoute('app_entreprise_home');
        }
        
        if (in_array('ROLE_ADMIN', $user->getRoles())) {
            return $this->redirectToRoute('admin_dashboard');
        }
        
        return $this->redirectToRoute('app_first_page');
    }
}

==================================================

Fichier: src\Controller\RegistrationController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\RegistrationController.php
-----
<?php

namespace App\Controller;

use App\Entity\User;
use App\Form\AdminRegistrationFormType;
use App\Form\RegistrationFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;

class RegistrationController extends AbstractController
{
    /**
     * Page de choix du type de compte
     */
    #[Route('/register/choice', name: 'app_register_choice')]
    public function choice(): Response
    {
        return $this->render('registration/choice.html.twig');
    }

    /**
     * Inscription administrateur
     */
    #[Route('/register/admin', name: 'app_register_admin')]
    public function registerAdmin(Request $request): Response
    {
        $user = new User();
        $form = $this->createForm(AdminRegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Traitement du formulaire...
        }

        return $this->render('registration/register_admin.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    /**
     * Inscription demandeur d'emploi
     */
    #[Route('/register/job-seeker', name: 'app_register_job_seeker')]
    public function registerJobSeeker(Request $request, UserPasswordHasherInterface $userPasswordHasher, EntityManagerInterface $entityManager): Response
    {
        // Code pour l'inscription des demandeurs d'emploi
        $user = new User();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Encoder le mot de passe
            $user->setPassword(
                $userPasswordHasher->hashPassword(
                    $user,
                    $form->get('plainPassword')->getData()
                )
            );
            
            // Définir le type et les rôles
            $user->setType('job_seeker');
            $user->setRoles(['ROLE_USER']);
            
            // Persister l'utilisateur
            $entityManager->persist($user);
            $entityManager->flush();
            
            $this->addFlash('success', 'Votre compte a été créé avec succès.');
            
            return $this->redirectToRoute('app_login');
        }

        return $this->render('registration/register_job_seeker.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }

    /**
     * Inscription entreprise
     */
    #[Route('/register/company', name: 'app_register_company')]
    public function registerCompany(Request $request, UserPasswordHasherInterface $userPasswordHasher, EntityManagerInterface $entityManager): Response
    {
        $user = new User();
        $form = $this->createForm(RegistrationFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Encoder le mot de passe
            $user->setPassword(
                $userPasswordHasher->hashPassword(
                    $user,
                    $form->get('plainPassword')->getData()
                )
            );
            
            // Définir le type et les rôles
            $user->setType('company');
            $user->setRoles(['ROLE_COMPANY']);
            
            // Récupérer les valeurs des champs personnalisés
            $companyName = $request->request->get('company_name');
            if ($companyName && method_exists($user, 'setCompanyName')) {
                $user->setCompanyName($companyName);
            }
            
            // Gérer le cas spécial de l'industrie
            $industry = $request->request->get('industry');
            $otherIndustry = $request->request->get('otherIndustry');
            
            if ($industry === 'Autre' && $otherIndustry) {
                // Si l'utilisateur a sélectionné "Autre" et a fourni une valeur personnalisée
                $industry = $otherIndustry;
            }
            
            if ($industry && method_exists($user, 'setIndustry')) {
                $user->setIndustry($industry);
            }
            
            // Persister l'entité
            $entityManager->persist($user);
            $entityManager->flush();
            
            $this->addFlash('success', 'Votre compte entreprise a été créé avec succès.');
            
            // Rediriger vers la page de connexion
            return $this->redirectToRoute('app_login');
        }

        return $this->render('registration/register_company.html.twig', [
            'registrationForm' => $form->createView(),
        ]);
    }
}

==================================================

Fichier: src\Controller\ResetPasswordController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\ResetPasswordController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use SymfonyCasts\Bundle\ResetPassword\Controller\ResetPasswordControllerTrait;
use SymfonyCasts\Bundle\ResetPassword\ResetPasswordHelperInterface;
use App\Form\ResetPasswordRequestFormType;
use App\Entity\User;
use App\Service\ResetPasswordEmail;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class ResetPasswordController extends AbstractController
{
    use ResetPasswordControllerTrait;

    private $resetPasswordHelper;
    private $emailSender;
    private $entityManager;

    public function __construct(
        ResetPasswordHelperInterface $resetPasswordHelper, 
        ResetPasswordEmail $emailSender,
        EntityManagerInterface $entityManager
    ) {
        $this->resetPasswordHelper = $resetPasswordHelper;
        $this->emailSender = $emailSender;
        $this->entityManager = $entityManager;
    }

    #[Route('/forgot-password', name: 'app_forgot_password_request')]
    public function request(Request $request): Response
    {
        $form = $this->createForm(ResetPasswordRequestFormType::class);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            // Process the form submission
            $email = $form->get('email')->getData();
            
            // Look for a user with that email
            $user = $this->entityManager->getRepository(User::class)->findOneBy([
                'email' => $email,
            ]);
            
            // Do not reveal whether a user account was found or not
            if ($user) {
                try {
                    $resetToken = $this->resetPasswordHelper->generateResetToken($user);
                    
                    // Ajoutez cette ligne pour déboguer
                    $this->addFlash('debug', 'Token généré avec succès: ' . $resetToken->getToken());
                    
                    try {
                        // Enveloppez l'envoi d'email dans un bloc try/catch séparé
                        $this->emailSender->send(
                            $email,
                            $resetToken->getToken()
                        );
                        $this->addFlash('debug', 'Email envoyé avec succès');
                    } catch (\Exception $emailError) {
                        // Log l'erreur spécifique à l'envoi d'email
                        $this->addFlash('reset_password_error', 'Erreur d\'envoi d\'email: ' . $emailError->getMessage());
                        return $this->redirectToRoute('app_forgot_password_request');
                    }
                    
                    return $this->redirectToRoute('app_check_email');
                } catch (\Exception $e) {
                    // Si une erreur se produit lors de la génération du token
                    $this->addFlash('reset_password_error', 'Erreur: ' . $e->getMessage());
                    
                    return $this->redirectToRoute('app_forgot_password_request');
                }
            }
            
            // Redirect to check-email page even if user does not exist
            return $this->redirectToRoute('app_check_email');
        }

        return $this->render('reset_password/request.html.twig', [
            'requestForm' => $form->createView(),
        ]);
    }

    #[Route('/check-email', name: 'app_check_email')]
    public function checkEmail(): Response
    {
        // Nous ne voulons pas que les utilisateurs puissent visiter cette page directement
        if (null === ($resetToken = $this->getTokenObjectFromSession())) {
            return $this->redirectToRoute('app_forgot_password_request');
        }
        
        return $this->render('reset_password/check_email.html.twig', [
            'tokenLifetime' => $this->resetPasswordHelper->getTokenLifetime(),
        ]);
    }

    #[Route('/reset-password/{token}', name: 'app_reset_password')]
    public function reset(Request $request, string $token = null, UserPasswordHasherInterface $passwordHasher): Response
    {
        if ($token) {
            // Nous stockons le token en session et le supprimons de l'URL pour éviter que l'URL soit
            // chargée dans un navigateur et potentiellement divulguée à des scripts tiers.
            $this->storeTokenInSession($token);

            return $this->redirectToRoute('app_reset_password');
        }

        $token = $this->getTokenFromSession();
        if (null === $token) {
            throw $this->createNotFoundException('No reset password token found in the URL or in the session.');
        }

        try {
            $user = $this->resetPasswordHelper->validateTokenAndFetchUser($token);
        } catch (\Exception $e) {
            $this->addFlash('reset_password_error', sprintf(
                'There was a problem validating your reset request - %s',
                $e->getMessage()
            ));

            return $this->redirectToRoute('app_forgot_password_request');
        }

        // Le token est valide; permettre à l'utilisateur de changer son mot de passe.
        if ($request->isMethod('POST')) {
            $plainPassword = $request->request->get('plainPassword');
            
            // Encode(hash) le mot de passe et le définir pour l'utilisateur
            $encodedPassword = $passwordHasher->hashPassword(
                $user,
                $plainPassword
            );

            $user->setPassword($encodedPassword);
            $this->entityManager->flush();

            // La session est nettoyée après la réinitialisation du mot de passe
            $this->resetPasswordHelper->removeResetRequest($token);

            $this->addFlash('success', 'Your password has been reset successfully. You can now log in with the new password.');

            return $this->redirectToRoute('app_login');
        }

        return $this->render('reset_password/reset.html.twig', [
            'token' => $token,
        ]);
    }
}



==================================================

Fichier: src\Controller\SecurityController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\SecurityController.php
-----
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class SecurityController extends AbstractController
{
    #[Route('/login', name: 'app_login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        // get the login error if there is one
        $error = $authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('security/login.html.twig', [
            'last_username' => $lastUsername,
            'error' => $error,
        ]);
    }

    #[Route('/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
}

==================================================

Fichier: src\Controller\Api\BusinessCardApiController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\Api\BusinessCardApiController.php
-----
<?php

namespace App\Controller\Api;

use App\Service\BusinessCardService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/api/v1')]
class BusinessCardApiController extends AbstractController
{
    private $businessCardService;

    public function __construct(BusinessCardService $businessCardService)
    {
        $this->businessCardService = $businessCardService;
    }

    #[Route('/businesscard/generate', name: 'api_businesscard_generate', methods: ['POST'])]
    public function generateCard(Request $request): JsonResponse
    {
        try {
            // Récupérer et décoder les données JSON
            $content = $request->getContent();
            $payload = json_decode($content, true);

            if (!$payload || !isset($payload['data'])) {
                return $this->json([
                    'success' => false,
                    'error' => 'Invalid JSON payload or missing data field'
                ], 400);
            }

            // Extraire les données
            $data = $payload['data'];
            $templateId = $payload['template_id'] ?? 'classic_blue';
            $outputFormat = $payload['output_format'] ?? 'html';

            // Valider les données requises
            if (!isset($data['name']) || !isset($data['company'])) {
                return $this->json([
                    'success' => false,
                    'error' => 'Missing required fields in data (name, company)'
                ], 400);
            }

            // Vérifier si le format de sortie est supporté
            if ($outputFormat !== 'html') {
                return $this->json([
                    'success' => false,
                    'error' => "Output format '{$outputFormat}' not yet supported"
                ], 400);
            }

            // Générer la carte de visite
            $cardHtml = $this->businessCardService->generateCard($data, $templateId);

            return $this->json([
                'success' => true,
                'card_html' => $cardHtml,
                'template_used' => $templateId
            ]);
        } catch (\Exception $e) {
            return $this->json([
                'success' => false,
                'error' => 'An error occurred: ' . $e->getMessage()
            ], 500);
        }
    }
}

==================================================

Fichier: src\Controller\Entreprise\ApplicationsController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\Entreprise\ApplicationsController.php
-----
<?php

namespace App\Controller\Entreprise;

use App\Entity\Application;
use App\Entity\Publication;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/entreprise/applications', name: 'entreprise_applications_')]
class ApplicationsController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Récupérer toutes les publications de l'entreprise
        $publications = $em->getRepository(Publication::class)
            ->findBy(['user' => $this->getUser()]);
        
        // Récupérer toutes les candidatures pour ces publications
        $applications = $em->getRepository(Application::class)
            ->createQueryBuilder('a')
            ->join('a.publication', 'p')
            ->where('p.user = :company')
            ->setParameter('company', $this->getUser())
            ->orderBy('a.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
        
        return $this->render('entreprise/applications/index.html.twig', [
            'applications' => $applications
        ]);
    }
    
    #[Route('/{id}/view', name: 'view')]
    public function view(Request $request, EntityManagerInterface $em, int $id): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Récupérer la candidature manuellement
        $application = $em->getRepository(Application::class)->find($id);
        
        // Vérifier si la candidature existe
        if (!$application) {
            $this->addFlash('error', 'La candidature demandée n\'existe pas.');
            return $this->redirectToRoute('entreprise_applications_index');
        }
        
        // Vérifier que l'application appartient à une publication de l'entreprise
        if ($application->getPublication()->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'avez pas accès à cette candidature');
        }
        
        return $this->render('entreprise/applications/view.html.twig', [
            'application' => $application
        ]);
    }
    
    #[Route('/{id}/accept', name: 'accept')]
    public function accept(Application $application, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que l'application appartient à une publication de l'entreprise
        if ($application->getPublication()->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'avez pas accès à cette candidature');
        }
        
        $application->setStatus('accepted');
        $application->setProcessedAt(new \DateTimeImmutable());
        $em->flush();
        
        $this->addFlash('success', 'Candidature acceptée avec succès');
        return $this->redirectToRoute('entreprise_applications_view', ['id' => $application->getId()]);
    }
    
    #[Route('/{id}/reject', name: 'reject')]
    public function reject(Request $request, EntityManagerInterface $em, int $id): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Récupérer la candidature manuellement
        $application = $em->getRepository(Application::class)->find($id);
        
        // Vérifier si la candidature existe
        if (!$application) {
            $this->addFlash('error', 'La candidature demandée n\'existe pas.');
            return $this->redirectToRoute('entreprise_applications_index');
        }
        
        // Vérifier que l'application appartient à une publication de l'entreprise
        if ($application->getPublication()->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'avez pas accès à cette candidature');
        }
        
        $application->setStatus('rejected');
        $application->setProcessedAt(new \DateTimeImmutable());
        
        // Récupérer le motif de rejet (optionnel)
        $rejectionReason = $request->request->get('rejection_reason');
        if ($rejectionReason) {
            $application->setFeedback($rejectionReason);
        }
        
        $em->flush();
        
        $this->addFlash('success', 'Candidature rejetée avec succès.');
        
        return $this->redirectToRoute('entreprise_applications_index');
    }
}

==================================================

Fichier: src\Controller\Entreprise\PublicationController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\Entreprise\PublicationController.php
-----
<?php

namespace App\Controller\Entreprise;

use App\Entity\Publication;
use App\Form\PublicationType;
use App\Repository\PublicationRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/entreprise/publication', name: 'entreprise_publication_')]
class PublicationController extends AbstractController
{
    #[Route('/', name: 'index', methods: ['GET'])]
    public function index(PublicationRepository $publicationRepository): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Récupérer les publications de l'entreprise connectée
        $publications = $publicationRepository->findByUser($this->getUser());
        
        return $this->render('entreprise/publications.html.twig', [
            'user' => $this->getUser(),
            'publications' => $publications,
        ]);
    }

    #[Route('/new', name: 'new', methods: ['GET', 'POST'])]
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        $publication = new Publication();
        $publication->setUser($this->getUser());
        $publication->setCreatedAt(new \DateTimeImmutable());
        
        $form = $this->createForm(PublicationType::class, $publication);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($publication);
            $entityManager->flush();
            
            $this->addFlash('success', 'Publication créée avec succès.');
            
            return $this->redirectToRoute('entreprise_publication_index');
        }
        
        return $this->render('entreprise/publication_form.html.twig', [
            'user' => $this->getUser(),
            'form' => $form->createView(),
            'edit_mode' => false,
        ]);
    }

    #[Route('/{id}', name: 'show', methods: ['GET'])]
    public function show(Publication $publication): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que la publication appartient à l'entreprise connectée
        if ($publication->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à voir cette publication.');
        }
        
        return $this->render('entreprise/publication_detail.html.twig', [
            'user' => $this->getUser(),
            'publication' => $publication,
        ]);
    }

    #[Route('/{id}/edit', name: 'edit', methods: ['GET', 'POST'])]
    public function edit(Request $request, Publication $publication, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que la publication appartient à l'entreprise connectée
        if ($publication->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à modifier cette publication.');
        }
        
        $form = $this->createForm(PublicationType::class, $publication);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $publication->setUpdatedAt(new \DateTimeImmutable());
            $entityManager->flush();
            
            $this->addFlash('success', 'Publication mise à jour avec succès.');
            
            return $this->redirectToRoute('entreprise_publication_show', ['id' => $publication->getId()]);
        }
        
        return $this->render('entreprise/publication_form.html.twig', [
            'user' => $this->getUser(),
            'publication' => $publication,
            'form' => $form->createView(),
            'edit_mode' => true,
        ]);
    }

    #[Route('/{id}/delete', name: 'delete', methods: ['GET'])]
    public function delete(Request $request, Publication $publication, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que la publication appartient à l'entreprise connectée
        if ($publication->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à supprimer cette publication.');
        }
        
        $entityManager->remove($publication);
        $entityManager->flush();
        
        $this->addFlash('success', 'Publication supprimée avec succès.');
        
        return $this->redirectToRoute('entreprise_publication_index');
    }

    #[Route('/{id}/publish', name: 'publish', methods: ['GET'])]
    public function publish(Publication $publication, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que la publication appartient à l'entreprise connectée
        if ($publication->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à publier cette publication.');
        }
        
        $publication->setIsPublished(true);
        $publication->setUpdatedAt(new \DateTimeImmutable());
        $entityManager->flush();
        
        $this->addFlash('success', 'Publication publiée avec succès.');
        
        return $this->redirectToRoute('entreprise_publication_show', ['id' => $publication->getId()]);
    }

    #[Route('/{id}/unpublish', name: 'unpublish', methods: ['GET'])]
    public function unpublish(Publication $publication, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        
        // Vérifier que la publication appartient à l'entreprise connectée
        if ($publication->getUser() !== $this->getUser()) {
            throw $this->createAccessDeniedException('Vous n\'êtes pas autorisé à dépublier cette publication.');
        }
        
        $publication->setIsPublished(false);
        $publication->setUpdatedAt(new \DateTimeImmutable());
        $entityManager->flush();
        
        $this->addFlash('success', 'Publication dépubliée avec succès.');
        
        return $this->redirectToRoute('entreprise_publication_show', ['id' => $publication->getId()]);
    }
}



==================================================

Fichier: src\Controller\Entreprise\StatisticsController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\Entreprise\StatisticsController.php
-----
<?php

namespace App\Controller\Entreprise;

use App\Entity\Publication;
use App\Repository\JobApplicationRepository;
use App\Repository\PublicationRepository;
use App\Repository\SavedJobRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/entreprise/statistics', name: 'entreprise_statistics_')]
class StatisticsController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(
        PublicationRepository $publicationRepository,
        JobApplicationRepository $jobApplicationRepository,
        SavedJobRepository $savedJobRepository
    ): Response {
        $this->denyAccessUnlessGranted('ROLE_COMPANY');
        $user = $this->getUser();
        
        // Récupérer les publications de l'entreprise
        $publications = $publicationRepository->findByUser($user);
        
        // Statistiques globales
        $totalPublications = count($publications);
        $publishedPublications = count(array_filter($publications, function(Publication $pub) {
            return $pub->isIsPublished();
        }));
        
        // Récupérer les IDs des publications
        $publicationIds = array_map(function(Publication $pub) {
            return $pub->getId();
        }, $publications);
        
        // Statistiques d'applications
        $totalApplications = $jobApplicationRepository->countByPublications($publicationIds);
        
        // Statistiques de sauvegarde
        $totalSaved = $savedJobRepository->countByPublications($publicationIds);
        
        // Statistiques de vues
        $totalViews = 0;
        foreach ($publications as $publication) {
            $totalViews += $publication->getViewCount() ?? 0;
        }
        
        // Statistiques par publication
        $publicationStats = [];
        foreach ($publications as $publication) {
            $publicationStats[] = [
                'id' => $publication->getId(),
                'title' => $publication->getTitle(),
                'category' => $publication->getCategory(),
                'isPublished' => $publication->isIsPublished(),
                'createdAt' => $publication->getCreatedAt(),
                'views' => $publication->getViewCount() ?? 0,
                'applications' => $jobApplicationRepository->countByPublication($publication->getId()),
                'saved' => $savedJobRepository->countByPublication($publication->getId()),
            ];
        }
        
        return $this->render('entreprise/statistics.html.twig', [
            'user' => $user,
            'globalStats' => [
                'totalPublications' => $totalPublications,
                'publishedPublications' => $publishedPublications,
                'totalApplications' => $totalApplications,
                'totalSaved' => $totalSaved,
                'totalViews' => $totalViews,
            ],
            'publicationStats' => $publicationStats,
        ]);
    }
}
==================================================

Fichier: src\Controller\JobSeeker\ApplicationController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\ApplicationController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\User;
use App\Entity\Application;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/applications', name: 'job_seeker_applications')]
class ApplicationController extends AbstractController
{
    #[Route('/', name: '')]
    public function index(EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        /** @var User $user */
        $user = $this->getUser();
        
        // Récupérer toutes les candidatures de l'utilisateur
        $applications = $entityManager->getRepository(Application::class)
            ->findBy(['user' => $user], ['createdAt' => 'DESC']);
        
        return $this->render('job_seeker/applications.html.twig', [
            'applications' => $applications
        ]);
    }
    
    #[Route('/{id}/withdraw', name: '_withdraw')]
    public function withdraw(int $id, EntityManagerInterface $entityManager): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        /** @var User $user */
        $user = $this->getUser();
        
        // Récupérer la candidature
        $application = $entityManager->getRepository(Application::class)->find($id);
        
        // Vérifier que la candidature existe et appartient à l'utilisateur
        if (!$application || $application->getUser() !== $user) {
            throw $this->createNotFoundException('Candidature non trouvée');
        }
        
        // Vérifier que la candidature est en attente
        if ($application->getStatus() !== 'pending') {
            $this->addFlash('error', 'Vous ne pouvez pas retirer une candidature qui a déjà été traitée');
            return $this->redirectToRoute('job_seeker_applications');
        }
        
        // Supprimer la candidature
        $entityManager->remove($application);
        $entityManager->flush();
        
        $this->addFlash('success', 'Votre candidature a été retirée avec succès');
        return $this->redirectToRoute('job_seeker_applications');
    }
}

==================================================

Fichier: src\Controller\JobSeeker\ApplicationsController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\ApplicationsController.php
-----
<?php

namespace App\Controller\JobSeeker;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Doctrine\ORM\EntityManagerInterface;

#[Route('/job-seeker/applications', name: 'job_seeker_applications_')]
class ApplicationsController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(EntityManagerInterface $entityManager): Response
    {
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Récupérer les candidatures de l'utilisateur
        $applications = $entityManager->getRepository(YourApplicationEntity::class)
            ->findBy(['user' => $user]);
        
        return $this->render('job_seeker/applications.html.twig', [
            'applications' => $applications,
        ]);
    }
}
==================================================

Fichier: src\Controller\JobSeeker\BehavioralQuestionController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\BehavioralQuestionController.php
-----
<?php

namespace App\Controller\JobSeeker;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/interview', name: 'job_seeker_interview_')]
class BehavioralQuestionController extends AbstractController
{
    #[Route('/behavioral-questions', name: 'behavioral_questions')]
    public function index(): Response
    {
        // Create a static array of behavioral questions
        $questions = [
            [
                'id' => 1,
                'text' => 'Tell me about a time when you had to deal with a difficult team member.',
                'category' => 'Conflict Resolution',
                'subCategory' => 'Conflict Resolution',
                'is_saved' => false
            ],
            [
                'id' => 2,
                'text' => 'Describe a situation where you had to make a difficult decision with limited information.',
                'category' => 'Decision Making',
                'subCategory' => 'Decision Making',
                'is_saved' => false
            ],
            [
                'id' => 3,
                'text' => 'Give an example of how you worked successfully as part of a team.',
                'category' => 'Teamwork',
                'subCategory' => 'Teamwork',
                'is_saved' => true
            ],
            [
                'id' => 4,
                'text' => 'Tell me about a time you failed and what you learned from it.',
                'category' => 'Learning & Growth',
                'subCategory' => 'Learning & Growth',
                'is_saved' => false
            ]
        ];
        
        // Render the template with the questions
        return $this->render('job_seeker/interview_behavioral_questions.html.twig', [
            'questions' => $questions
        ]);
    }

    #[Route('/behavioral-questions/{id}/practice', name: 'practice_question')]
    public function practiceQuestion(int $id, Request $request): Response
    {
        // Créer un tableau de questions statiques
        $questions = [
            1 => [
                'id' => 1,
                'text' => 'Tell me about a time when you had to deal with a difficult team member.',
                'category' => 'Conflict Resolution',
                'tips' => 'Focus on how you handled the situation professionally.',
                'example' => 'In my previous role...'
            ],
            2 => [
                'id' => 2,
                'text' => 'Describe a situation where you had to make a difficult decision with limited information.',
                'category' => 'Decision Making',
                'tips' => 'Emphasize your analytical approach.',
                'example' => 'During a product launch...'
            ],
            3 => [
                'id' => 3,
                'text' => 'Give an example of how you worked successfully as part of a team.',
                'category' => 'Teamwork',
                'tips' => 'Highlight your collaboration skills.',
                'example' => 'In a cross-functional project team...'
            ]
        ];
        
        // Vérifier si la question existe
        if (!isset($questions[$id])) {
            throw $this->createNotFoundException('Question not found');
        }
        
        $question = $questions[$id];
        
        // Traiter l'enregistrement de la pratique si c'est une requête POST
        if ($request->isMethod('POST')) {
            // Simuler l'enregistrement
            $this->addFlash('success', 'Practice session recorded successfully!');
            return $this->redirectToRoute('job_seeker_interview_behavioral_questions');
        }
        
        // Convertir le tableau en objet pour la compatibilité avec le template
        $questionObj = new \stdClass();
        foreach ($question as $key => $value) {
            $questionObj->$key = $value;
        }
        
        return $this->render('job_seeker/interview_practice_question.html.twig', [
            'question' => $questionObj
        ]);
    }

    #[Route('/saved-questions', name: 'saved_questions')]
    public function savedQuestions(): Response
    {
        // Get the current user
        $user = $this->getUser();
        
        // In a real implementation, you would fetch the user's saved questions
        // For now, we'll use static data
        $questions = [
            // Example saved questions (can be empty for now)
        ];
        
        return $this->render('job_seeker/interview_saved_questions.html.twig', [
            'questions' => $questions
        ]);
    }
}





==================================================

Fichier: src\Controller\JobSeeker\CommonQuestionController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\CommonQuestionController.php
-----
<?php

namespace App\Controller\JobSeeker;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/interviews', name: 'job_seeker_interviews_')]
class CommonQuestionController extends AbstractController
{
    #[Route('/practice/{id}', name: 'practice_common_question')]
    public function practiceQuestion(string $id, Request $request): Response
    {
        // Convertir l'ID en entier si possible
        $idInt = intval($id);
        
        // Récupérer la question par son ID
        // Dans un environnement réel, vous récupéreriez la question depuis la base de données
        
        // Exemple de question statique pour démonstration
        $question = [
            'id' => $idInt,
            'text' => 'Question exemple #' . $idInt,
            'category' => 'Common',
            'tips' => 'Voici quelques conseils pour répondre à cette question...',
            'exampleAnswer' => 'Voici un exemple de réponse...'
        ];
        
        // Convertir le tableau en objet pour la compatibilité avec le template
        $questionObj = new \stdClass();
        foreach ($question as $key => $value) {
            $questionObj->$key = $value;
        }
        
        return $this->render('job_seeker/interview_practice_question.html.twig', [
            'question' => $questionObj
        ]);
    }
}
==================================================

Fichier: src\Controller\JobSeeker\CVController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\CVController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\CV;
use App\Form\CVType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/cv', name: 'job_seeker_cv_')]
class CVController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $cvs = $em->getRepository(CV::class)->findBy(['user' => $this->getUser()]);
        
        return $this->render('job_seeker/cv_list.html.twig', [
            'cvs' => $cvs
        ]);
    }

    #[Route('/new', name: 'new')]
    public function new(Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $cv = new CV();
        $cv->setUser($this->getUser());
        
        $form = $this->createForm(CVType::class, $cv);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $em->persist($cv);
            $em->flush();
            
            $this->addFlash('success', 'CV created successfully');
            return $this->redirectToRoute('job_seeker_cv_index');
        }
        
        return $this->render('job_seeker/cv_builder.html.twig', [
            'form' => $form->createView(),
            'templates' => [
                'Modern Red', 'Classic', 'Creative'
            ]
        ]);
    }

    #[Route('/{id}/edit', name: 'edit')]
    public function edit(CV $cv, Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        $this->denyAccessUnlessGranted('EDIT', $cv);
        
        $form = $this->createForm(CVType::class, $cv);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $em->flush();
            
            $this->addFlash('success', 'CV updated successfully');
            return $this->redirectToRoute('job_seeker_cv_index');
        }
        
        return $this->render('job_seeker/cv_builder.html.twig', [
            'form' => $form->createView(),
            'cv' => $cv,
            'templates' => [
                'Modern Red', 'Classic', 'Creative'
            ]
        ]);
    }

    #[Route('/{id}/delete', name: 'delete')]
    public function delete(CV $cv, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        $this->denyAccessUnlessGranted('DELETE', $cv);
        
        $em->remove($cv);
        $em->flush();
        
        $this->addFlash('success', 'CV deleted successfully');
        return $this->redirectToRoute('job_seeker_cv_index');
    }
}
==================================================

Fichier: src\Controller\JobSeeker\HomeController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\HomeController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Repository\ConversationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker', name: 'job_seeker_')]
class HomeController extends AbstractController
{
    public function __construct(
        private ConversationRepository $conversationRepository
    ) {
    }

    #[Route('/home', name: 'home')]
    public function index(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $user = $this->getUser();
        if (!$user) {
            throw $this->createAccessDeniedException();
        }

        $unreadCount = $this->conversationRepository->getUnreadCount($user);

        return $this->render('job_seeker/home.html.twig', [
            'stats' => [
                'jobs_applied' => 12,
                'interviews' => 3,
                'messages' => $unreadCount,
                'saved_jobs' => 8
            ],
            'recent_activities' => [
                [
                    'type' => 'application',
                    'title' => 'Applied for Senior Developer at TechCorp',
                    'time' => '2 hours ago'
                ],
                [
                    'type' => 'interview',
                    'title' => 'Interview scheduled with HR Manager',
                    'time' => 'Yesterday, 3:45 PM'
                ]
            ]
        ]);
    }
}
==================================================

Fichier: src\Controller\JobSeeker\ImageUploadController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\ImageUploadController.php
-----
<?php

namespace App\Controller\JobSeeker;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\String\Slugger\SluggerInterface;
use Doctrine\DBAL\Connection;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

#[Route('/job-seeker/image', name: 'job_seeker_image_')]
class ImageUploadController extends AbstractController
{
    #[Route('/upload', name: 'upload', methods: ['POST'])]
    public function upload(Request $request, SluggerInterface $slugger, Connection $connection): Response
    {
        // Vérifier si l'utilisateur est connecté
        $user = $this->getUser();
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Récupérer le fichier uploadé
        $imageFile = $request->files->get('profile_image');
        
        if (!$imageFile) {
            $this->addFlash('error', 'Aucun fichier n\'a été téléchargé.');
            return $this->redirectToRoute('job_seeker_profile_edit');
        }
        
        // Générer un nom de fichier unique
        $originalFilename = pathinfo($imageFile->getClientOriginalName(), PATHINFO_FILENAME);
        $safeFilename = $slugger->slug($originalFilename);
        $newFilename = $safeFilename.'-'.uniqid().'.'.$imageFile->guessExtension();
        
        // Définir le répertoire de destination
        $uploadDir = $this->getParameter('profile_images_directory');
        
        // Créer le répertoire s'il n'existe pas
        if (!file_exists($uploadDir)) {
            mkdir($uploadDir, 0777, true);
        }
        
        try {
            // Déplacer le fichier
            $imageFile->move($uploadDir, $newFilename);
            
            // Chemin relatif pour la base de données
            $imagePath = 'uploads/profile_images/'.$newFilename;
            
            // Mettre à jour la base de données directement avec une requête SQL
            $userId = $user->getId();
            $stmt = $connection->prepare('UPDATE user SET profile_image = ? WHERE id = ?');
            $result = $stmt->executeStatement([$imagePath, $userId]);
            
            if ($result > 0) {
                $this->addFlash('success', 'Image de profil mise à jour avec succès.');
            } else {
                $this->addFlash('error', 'Erreur lors de la mise à jour de l\'image dans la base de données.');
            }
            
        } catch (FileException $e) {
            $this->addFlash('error', 'Une erreur est survenue lors du téléchargement de l\'image: ' . $e->getMessage());
        }
        
        return $this->redirectToRoute('job_seeker_profile_edit');
    }
}
==================================================

Fichier: src\Controller\JobSeeker\InterviewController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\InterviewController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\BehavioralQuestion;
use App\Entity\PreparationProgress;
use App\Repository\BehavioralQuestionRepository;
use App\Repository\PreparationProgressRepository;
use App\Repository\TechnicalChallengeRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/interviews', name: 'job_seeker_interviews_')]
class InterviewController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(PreparationProgressRepository $progressRepo): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $progress = $progressRepo->findOrCreateForUser($this->getUser());
        
        return $this->render('job_seeker/interview_index.html.twig', [
            'progress' => $progress
        ]);
    }
    
    #[Route('/common-questions', name: 'common_questions')]
    public function commonQuestions(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        // Exemple de questions communes
        $questions = [
            [
                'id' => 1,
                'text' => 'Tell me about yourself',
                'tips' => 'Keep it professional and relevant to the job. Focus on your experience, skills, and what makes you a good fit.',
                'exampleAnswer' => 'I\'m a software developer with 5 years of experience specializing in web applications...',
                'difficulty' => 'easy',
                'subCategory' => 'introduction'
            ],
            [
                'id' => 2,
                'text' => 'Why do you want to work for our company?',
                'tips' => 'Research the company beforehand. Mention specific aspects of their culture, products, or mission that appeal to you.',
                'exampleAnswer' => 'I\'ve been following your company\'s innovative approach to sustainable technology...',
                'difficulty' => 'medium',
                'subCategory' => 'motivation'
            ],
            [
                'id' => 3,
                'text' => 'Where do you see yourself in 5 years?',
                'tips' => 'Be honest but strategic. Show ambition while demonstrating commitment to the role and company.',
                'exampleAnswer' => 'In five years, I hope to have grown into a senior position where I can lead projects and mentor junior team members...',
                'difficulty' => 'medium',
                'subCategory' => 'career'
            ],
            [
                'id' => 4,
                'text' => 'What is your greatest weakness?',
                'tips' => 'Choose a genuine weakness, but focus on how you\'re working to improve it.',
                'exampleAnswer' => 'I sometimes struggle with public speaking, but I\'ve been taking courses and volunteering for presentations to improve this skill...',
                'difficulty' => 'hard',
                'subCategory' => 'self-awareness'
            ],
            [
                'id' => 5,
                'text' => 'Why should we hire you?',
                'tips' => 'Highlight your unique combination of skills and experience that make you the best fit for the role.',
                'exampleAnswer' => 'My combination of technical expertise in your required technologies and my experience leading agile teams makes me uniquely qualified...',
                'difficulty' => 'hard',
                'subCategory' => 'value'
            ]
        ];
        
        return $this->render('job_seeker/interview_common_questions.html.twig', [
            'questions' => $questions
        ]);
    }
    
    #[Route('/behavioral-questions', name: 'behavioral_questions')]
    public function behavioralQuestions(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        // For now, we'll use hardcoded questions
        $questions = [
            [
                'id' => 1,
                'text' => 'Tell me about a time when you had to deal with a difficult team member.',
                'subCategory' => 'Conflict Resolution',
                'difficulty' => 'medium',
                'tips' => 'Focus on how you handled the situation professionally.',
                'exampleAnswer' => 'In my previous role...',
                'is_saved' => false
            ],
            [
                'id' => 2,
                'text' => 'Describe a situation where you had to make a difficult decision with limited information.',
                'subCategory' => 'Decision Making',
                'difficulty' => 'medium',
                'tips' => 'Emphasize your analytical approach.',
                'exampleAnswer' => 'During a product launch...',
                'is_saved' => false
            ],
            [
                'id' => 3,
                'text' => 'Give an example of how you worked successfully as part of a team.',
                'subCategory' => 'Teamwork',
                'difficulty' => 'easy',
                'tips' => 'Highlight your collaboration skills.',
                'exampleAnswer' => 'In a cross-functional project team...',
                'is_saved' => true
            ],
            [
                'id' => 4,
                'text' => 'Describe a situation where you had to adapt to a significant change.',
                'subCategory' => 'Adaptability',
                'difficulty' => 'medium',
                'tips' => 'Show your flexibility and positive attitude.',
                'exampleAnswer' => 'When my company suddenly shifted to remote work...',
                'is_saved' => false
            ]
        ];
        
        // Assurez-vous que le template est correctement spécifié
        return $this->render('job_seeker/interview_behavioral_questions.html.twig', [
            'questions' => $questions
        ]);
    }
    
    #[Route('/technical-challenges', name: 'technical_challenges')]
    public function technicalChallenges(TechnicalChallengeRepository $challengeRepo): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $challenges = $challengeRepo->findAll();
        
        return $this->render('job_seeker/interview_technical_challenges.html.twig', [
            'challenges' => $challenges
        ]);
    }
    
    #[Route('/technical-challenges/{id}', name: 'challenge_solve')]
    public function solveChallenge(int $id, TechnicalChallengeRepository $challengeRepo): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $challenge = $challengeRepo->find($id);
        
        if (!$challenge) {
            throw $this->createNotFoundException('Challenge not found');
        }
        
        return $this->render('job_seeker/interview_challenge_solve.html.twig', [
            'challenge' => $challenge
        ]);
    }
    
    #[Route('/mock-interview', name: 'mock_interview')]
public function mockInterview(): Response
{
    $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
    
    return $this->render('job_seeker/interview_mock.html.twig');
}
    
    #[Route('/progress/update', name: 'update_progress', methods: ['POST'])]
    public function updateProgress(Request $request, EntityManagerInterface $em, PreparationProgressRepository $progressRepo): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $progress = $progressRepo->findOrCreateForUser($this->getUser());
        $data = json_decode($request->getContent(), true);
        
        if (isset($data['section']) && isset($data['completed'])) {
            switch ($data['section']) {
                case 'common':
                    $progress->setCommonQuestionsCompleted($data['completed']);
                    break;
                case 'behavioral':
                    $progress->setBehavioralQuestionsCompleted($data['completed']);
                    break;
                case 'technical':
                    $progress->setTechnicalChallengesCompleted($data['completed']);
                    break;
                case 'mock':
                    $progress->setMockInterviewCompleted($data['completed']);
                    break;
            }
            
            $em->persist($progress);
            $em->flush();
            
            return $this->json(['success' => true]);
        }
        
        return $this->json(['success' => false, 'message' => 'Invalid data'], 400);
    }
    #[Route('/company-research', name: 'company_research')]
    public function companyResearch(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        return $this->render('job_seeker/interview_company_research.html.twig');
    }
    #[Route('/salary-negotiation', name: 'salary_negotiation')]
    public function salaryNegotiation(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        return $this->render('job_seeker/interview_salary_negotiation.html.twig');
    }
    #[Route('/ai-interview', name: 'ai_interview')]
    public function aiInterview(Request $request): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        // Récupérer les paramètres de l'URL
        $interviewType = $request->query->get('type', 'general');
        $difficulty = $request->query->get('difficulty', 'medium');
        $duration = $request->query->get('duration', 15);
        
        // Préparer les questions en fonction du type et de la difficulté
        $questions = $this->getAIInterviewQuestions($interviewType, $difficulty, $duration);
        
        return $this->render('job_seeker/interview_ai_session.html.twig', [
            'type' => $interviewType,
            'difficulty' => $difficulty,
            'duration' => $duration,
            'questions' => $questions
        ]);
    }
    #[Route('/self-recording', name: 'self_recording')]
    public function selfRecording(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        return $this->render('job_seeker/interview_self_recording.html.twig');
    }
    
    /**
     * Génère des questions pour l'interview AI en fonction des paramètres
     */
    private function getAIInterviewQuestions(string $type, string $difficulty, int $duration): array
    {
        // Nombre de questions basé sur la durée (environ 3 minutes par question)
        $questionCount = max(3, intval($duration / 3));
        
        // Questions de base par type
        $questionsByType = [
            'general' => [
                'Tell me about yourself.',
                'What are your greatest strengths?',
                'What are your greatest weaknesses?',
                'Why do you want to work for this company?',
                'Where do you see yourself in 5 years?',
                'Why should we hire you?',
                'What is your ideal work environment?',
                'How do you handle stress and pressure?',
                'What are your salary expectations?',
                'Do you have any questions for us?'
            ],
            'behavioral' => [
                'Tell me about a time you faced a conflict with a coworker.',
                'Describe a situation where you had to meet a tight deadline.',
                'Give an example of a goal you reached and how you achieved it.',
                'Tell me about a mistake you made and how you handled it.',
                'Describe a situation where you had to work with a difficult team member.',
                'Tell me about a time you went above and beyond at work.',
                'Give an example of how you set goals and achieve them.',
                'Describe a situation where you had to make a difficult decision.',
                'Tell me about a time you had to adapt to a significant change.',
                'Give an example of how you worked on a team.'
            ],
            'technical' => [
                'Explain your approach to problem-solving.',
                'How do you stay updated with the latest technologies?',
                'Describe a challenging technical problem you solved recently.',
                'How do you ensure code quality in your projects?',
                'Explain your experience with agile methodologies.',
                'How do you handle technical disagreements with team members?',
                'Describe your experience with version control systems.',
                'How do you approach testing and debugging?',
                'Explain a complex technical concept in simple terms.',
                'How do you balance technical debt with delivery deadlines?'
            ]
        ];
        
        // Sélectionner les questions en fonction du type
        $availableQuestions = $questionsByType[$type] ?? $questionsByType['general'];
        
        // Mélanger les questions et en prendre le nombre nécessaire
        shuffle($availableQuestions);
        $selectedQuestions = array_slice($availableQuestions, 0, $questionCount);
        
        // Formater les questions pour le template
        $formattedQuestions = [];
        foreach ($selectedQuestions as $index => $question) {
            $formattedQuestions[] = [
                'id' => $index + 1,
                'text' => $question,
                'difficulty' => $difficulty
            ];
        }
        
        return $formattedQuestions;
    }
}

==================================================

Fichier: src\Controller\JobSeeker\JobController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\JobController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Repository\PublicationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;

#[Route('/job-seeker', name: 'job_seeker_')]
class JobController extends AbstractController
{
    #[Route('/jobs', name: 'jobs_index')]
    public function index(PublicationRepository $publicationRepository): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $publications = $publicationRepository->findPublished();
        
        return $this->render('job_seeker/job_search.html.twig', [
            'publications' => $publications,
        ]);
    }

    #[Route('/job/{id}', name: 'job_details')]
    public function details(Request $request, PublicationRepository $publicationRepository, int $id): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        // Récupérer la publication manuellement
        $publication = $publicationRepository->find($id);
        
        // Vérifier si la publication existe
        if (!$publication) {
            $this->addFlash('error', 'L\'offre d\'emploi demandée n\'existe pas.');
            return $this->redirectToRoute('job_seeker_jobs_index');
        }
        
        // Vérifier que la publication est publiée
        if (!$publication->isIsPublished()) {
            $this->addFlash('error', 'Cette offre d\'emploi n\'est pas disponible.');
            return $this->redirectToRoute('job_seeker_jobs_index');
        }
        
        return $this->render('job_seeker/job_details.html.twig', [
            'publication' => $publication,
        ]);
    }
}








==================================================

Fichier: src\Controller\JobSeeker\JobsController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\JobsController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\Publication;
use App\Entity\SavedJob;
use App\Entity\Application;
use App\Form\JobSearchType;
use App\Form\ApplicationType;
use App\Repository\PublicationRepository;
use App\Repository\ApplicationRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

#[Route('/job-seeker/jobs', name: 'job_seeker_jobs_')]
class JobsController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(Request $request, EntityManagerInterface $em): Response
    {
        // Créer le formulaire de recherche
        $searchCriteria = [
            'keywords' => $request->query->get('search'),
            'category' => $request->query->get('category', 'all'),
            'industry' => $request->query->get('industry'),
            'address' => $request->query->get('address'),
            'dateFrom' => $request->query->get('dateFrom'),
            'dateTo' => $request->query->get('dateTo')
        ];
        
        // Créer le formulaire (vous devez créer ce type de formulaire)
        $form = $this->createForm(JobSearchType::class, null, [
            'method' => 'GET'
        ]);
        $form->handleRequest($request);
        
        // Récupération des publications
        if ($form->isSubmitted() && $form->isValid()) {
            // Utiliser les données du formulaire pour la recherche
            $formData = $form->getData();
            $publications = $em->getRepository(Publication::class)->advancedSearch($formData);
        } else {
            // Recherche simple ou affichage de toutes les publications
            $publications = $em->getRepository(Publication::class)->findBy(['isPublished' => true]);
        }
        
        // Récupération des candidatures pour chaque publication
        $applicationsByPublication = [];
        foreach ($publications as $publication) {
            if ($publication !== null && $publication->getId() !== null) {
                $applicationsByPublication[$publication->getId()] = 
                    $em->getRepository(Application::class)->findByPublication($publication->getId());
            }
        }
        
        return $this->render('job_seeker/job_search.html.twig', [
            'publications' => $publications,
            'applicationsByPublication' => $applicationsByPublication,
            'form' => $form->createView(),
            'searchCriteria' => $searchCriteria
        ]);
    }

    #[Route('/saved', name: 'saved')]
    public function saved(EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $savedJobs = $em->getRepository(SavedJob::class)
            ->findBy(['user' => $this->getUser()]);
        
        return $this->render('job_seeker/saved_jobs.html.twig', [
            'savedJobs' => $savedJobs
        ]);
    }

    #[Route('/apply/{id}', name: 'apply')]
    public function apply(Request $request, PublicationRepository $publicationRepository, EntityManagerInterface $em, int $id): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        // Récupérer la publication manuellement au lieu d'utiliser le ParamConverter
        $publication = $publicationRepository->find($id);
        
        // Vérifier si la publication existe
        if (!$publication) {
            $this->addFlash('error', 'L\'offre d\'emploi demandée n\'existe pas.');
            return $this->redirectToRoute('job_seeker_jobs_index');
        }
        
        // Vérifier que la publication est publiée
        if (!$publication->isIsPublished()) {
            $this->addFlash('error', 'Cette offre d\'emploi n\'est pas disponible.');
            return $this->redirectToRoute('job_seeker_jobs_index');
        }
        
        // Vérifier si l'utilisateur a déjà postulé
        $existingApplication = $em->getRepository(Application::class)->findOneBy([
            'user' => $this->getUser(),
            'publication' => $publication
        ]);
        
        if ($existingApplication) {
            $this->addFlash('warning', 'Vous avez déjà postulé à cette offre');
            return $this->redirectToRoute('job_seeker_job_details', ['id' => $publication->getId()]);
        }
        
        // Créer une nouvelle candidature
        $application = new Application();
        $application->setUser($this->getUser());
        $application->setPublication($publication);
        $application->setStatus('pending');
        $application->setCreatedAt(new \DateTimeImmutable());
        
        $form = $this->createForm(ApplicationType::class, $application);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            // Traitement du CV
            $resumeFile = $form->get('resumeFile')->getData();
            if ($resumeFile) {
                $originalFilename = pathinfo($resumeFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = transliterator_transliterate('Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()', $originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$resumeFile->guessExtension();
                
                try {
                    $resumeFile->move(
                        $this->getParameter('resumes_directory'),
                        $newFilename
                    );
                    $application->setResumeFilename($newFilename);
                } catch (FileException $e) {
                    $this->addFlash('error', 'Une erreur est survenue lors du téléchargement de votre CV');
                }
            }
            
            $em->persist($application);
            $em->flush();
            
            $this->addFlash('success', 'Votre candidature a été envoyée avec succès');
            return $this->redirectToRoute('job_seeker_applications_index');
        }
        
        return $this->render('job_seeker/apply.html.twig', [
            'publication' => $publication,
            'form' => $form->createView()
        ]);
    }

    #[Route('/save/{id}', name: 'save')]
    public function save(Publication $publication, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $savedJob = new SavedJob();
        $savedJob->setUser($this->getUser());
        $savedJob->setPublication($publication);
        $savedJob->setSavedAt(new \DateTimeImmutable());
        
        $em->persist($savedJob);
        $em->flush();
        
        $this->addFlash('success', 'Job saved to your list');
        return $this->redirectToRoute('job_seeker_jobs_index');
    }

    #[Route('/applications', name: 'applications')]
    public function applications(EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $applications = $em->getRepository(Application::class)
            ->findBy(['user' => $this->getUser()]);
        
        return $this->render('job_seeker/applications.html.twig', [
            'applications' => $applications
        ]);
    }
}

==================================================

Fichier: src\Controller\JobSeeker\MessagesController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\MessagesController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\Message;
use App\Entity\Conversation;
use App\Form\MessageType;
use App\Form\NewConversationType;
use App\Repository\ConversationRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

#[Route('/job-seeker/messages', name: 'job_seeker_messages_')]
class MessagesController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(ConversationRepository $conversationRepo): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $conversations = $conversationRepo->findByParticipant($this->getUser());
        
        return $this->render('job_seeker/messages.html.twig', [
            'conversations' => $conversations,
            'active_conversation' => null,
            'unread_counts' => $this->getUnreadCounts($conversations)
        ]);
    }

    #[Route('/conversation/{id}', name: 'conversation')]
    public function conversation(
        Conversation $conversation,
        Request $request,
        EntityManagerInterface $em,
        ConversationRepository $conversationRepo
    ): Response {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        if (!$conversation->getParticipants()->contains($this->getUser())) {
            throw new AccessDeniedException('You are not a participant of this conversation');
        }

        // Marquer les messages comme lus
        $this->markMessagesAsRead($conversation, $em);

        $message = new Message();
        $message->setSender($this->getUser());
        $message->setConversation($conversation);
        
        $form = $this->createForm(MessageType::class, $message);
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $em->persist($message);
            $conversation->setUpdatedAt(new \DateTime());
            $em->flush();
            
            $this->addFlash('success', 'Message sent successfully');
            return $this->redirectToRoute('job_seeker_messages_conversation', ['id' => $conversation->getId()]);
        }
        
        $conversations = $conversationRepo->findByParticipant($this->getUser());
        
        return $this->render('job_seeker/messages.html.twig', [
            'conversations' => $conversations,
            'active_conversation' => $conversation,
            'form' => $form->createView(),
            'unread_counts' => $this->getUnreadCounts($conversations)
        ]);
    }

    #[Route('/new', name: 'new')]
    public function new(
        Request $request,
        EntityManagerInterface $em,
        ConversationRepository $conversationRepo
    ): Response {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $conversation = new Conversation();
        $form = $this->createForm(NewConversationType::class, $conversation, [
            'current_user' => $this->getUser()
        ]);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            // Ajouter automatiquement l'utilisateur courant comme participant
            $conversation->addParticipant($this->getUser());
            
            $em->persist($conversation);
            $em->flush();
            
            $this->addFlash('success', 'Conversation created successfully');
            return $this->redirectToRoute('job_seeker_messages_conversation', ['id' => $conversation->getId()]);
        }
        
        return $this->render('job_seeker/new_conversation.html.twig', [
            'form' => $form->createView()
        ]);
    }

    #[Route('/archive/{id}', name: 'archive')]
    public function archive(Conversation $conversation, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        if (!$conversation->getParticipants()->contains($this->getUser())) {
            throw new AccessDeniedException('You are not a participant of this conversation');
        }

        $conversation->setIsArchived(true);
        $em->flush();

        $this->addFlash('success', 'Conversation archived');
        return $this->redirectToRoute('job_seeker_messages_index');
    }

    private function markMessagesAsRead(Conversation $conversation, EntityManagerInterface $em): void
    {
        foreach ($conversation->getMessages() as $message) {
            if ($message->getSender() !== $this->getUser() && !$message->getIsRead()) {
                $message->setIsRead(true);
            }
        }
        $em->flush();
    }

    private function getUnreadCounts(array $conversations): array
    {
        $unreadCounts = [];
        foreach ($conversations as $conversation) {
            $unreadCounts[$conversation->getId()] = $conversation->getUnreadCount($this->getUser());
        }
        return $unreadCounts;
    }
}

==================================================

Fichier: src\Controller\JobSeeker\ProfileController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\ProfileController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\User;
use App\Form\JobSeekerProfileCustomType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\String\Slugger\SluggerInterface;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Doctrine\DBAL\Connection;

#[Route('/job-seeker/profile', name: 'job_seeker_profile_')]
class ProfileController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        return $this->render('job_seeker/profile.html.twig', [
            'user' => $this->getUser()
        ]);
    }

    #[Route('/edit', name: 'edit')]
    public function editProfile(Request $request, SluggerInterface $slugger, EntityManagerInterface $entityManager): Response
    {
        /** @var User $user */
        $user = $this->getUser();
        
        if (!$user) {
            return $this->redirectToRoute('app_login');
        }
        
        // Récupérer les données actuelles de l'utilisateur
        $userId = $user->getId();
        $connection = $entityManager->getConnection();
        $stmt = $connection->prepare('SELECT * FROM user WHERE id = ?');
        $result = $stmt->executeQuery([$userId]);
        $userData = $result->fetchAssociative();
        
        // Préparer les données pour le formulaire
        $formData = [
            'firstName' => $userData['first_name'],
            'lastName' => $userData['last_name'],
            'email' => $userData['email'],
            'phone' => $userData['phone'],
            'address' => $userData['address'],
            'title' => $userData['title'],
            'about' => $userData['about'],
            'experience' => $userData['experience'],
            'education' => $userData['education'],
            'skills' => $userData['skills'],
        ];
        
        $form = $this->createForm(JobSeekerProfileCustomType::class, null, [
            'user_data' => $formData
        ]);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $formData = $form->getData();
            $profileImageFile = $form->get('profileImageFile')->getData();
            
            // Si un nouveau fichier est uploadé, le traiter
            if ($profileImageFile) {
                $originalFilename = pathinfo($profileImageFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$profileImageFile->guessExtension();
                
                $uploadDir = $this->getParameter('profile_images_directory');
                if (!file_exists($uploadDir)) {
                    mkdir($uploadDir, 0777, true);
                }
                
                try {
                    // Déplacer le fichier
                    $profileImageFile->move($uploadDir, $newFilename);
                    
                    // Supprimer l'ancienne image si nécessaire
                    $oldProfileImage = $userData['profile_image'];
                    if ($oldProfileImage && $oldProfileImage !== 'img/fxchat.png') {
                        $oldImagePath = $this->getParameter('kernel.project_dir').'/public/'.$oldProfileImage;
                        if (file_exists($oldImagePath)) {
                            unlink($oldImagePath);
                        }
                    }
                    
                    // Définir le nouveau chemin d'image
                    $profileImage = 'uploads/profile_images/'.$newFilename;
                    $this->addFlash('success', 'Photo téléchargée avec succès !');
                } catch (FileException $e) {
                    $this->addFlash('error', 'Une erreur est survenue lors du téléchargement de la photo: ' . $e->getMessage());
                    $profileImage = $userData['profile_image'];
                }
            } else {
                $profileImage = $userData['profile_image'];
            }
            
            // Mettre à jour directement dans la base de données
            $stmt = $connection->prepare('
                UPDATE user 
                SET first_name = ?, 
                    last_name = ?, 
                    email = ?, 
                    phone = ?, 
                    address = ?, 
                    title = ?, 
                    about = ?, 
                    experience = ?, 
                    education = ?, 
                    skills = ?,
                    profile_image = ?
                WHERE id = ?
            ');
            
            $stmt->executeStatement([
                $formData['firstName'],
                $formData['lastName'],
                $formData['email'],
                $formData['phone'],
                $formData['address'],
                $formData['title'],
                $formData['about'],
                $formData['experience'],
                $formData['education'],
                $formData['skills'],
                $profileImage,
                $userId
            ]);
            
            // Mettre à jour également l'objet User en mémoire
            $user->setProfileImage($profileImage);
            
            $this->addFlash('success', 'Profil mis à jour avec succès.');
            
            // Rediriger vers la page de profil pour éviter de retraiter le formulaire
            return $this->redirectToRoute('job_seeker_profile_index');
        }
        
        return $this->render('job_seeker/edit_profile.html.twig', [
            'form' => $form->createView(),
            'user' => $user,
            'currentProfileImage' => $userData['profile_image']
        ]);
    }
}

==================================================

Fichier: src\Controller\JobSeeker\SettingsController.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Controller\JobSeeker\SettingsController.php
-----
<?php

namespace App\Controller\JobSeeker;

use App\Entity\User;
use App\Form\ChangePasswordType;
use App\Form\NotificationSettingsType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Annotation\Route;

#[Route('/job-seeker/settings', name: 'job_seeker_settings_')]
class SettingsController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        return $this->render('job_seeker/settings.html.twig');
    }

    #[Route('/account', name: 'account')]
    public function account(Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $user = $this->getUser();
        $form = $this->createForm(AccountSettingsType::class, $user);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $em->flush();
            $this->addFlash('success', 'Account settings updated');
            return $this->redirectToRoute('job_seeker_settings_account');
        }
        
        return $this->render('job_seeker/settings_account.html.twig', [
            'form' => $form->createView()
        ]);
    }

    #[Route('/password', name: 'password')]
    public function password(Request $request, UserPasswordHasherInterface $passwordHasher, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $user = $this->getUser();
        $form = $this->createForm(ChangePasswordType::class);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $data = $form->getData();
            
            if (!$passwordHasher->isPasswordValid($user, $data['current_password'])) {
                $this->addFlash('error', 'Current password is incorrect');
                return $this->redirectToRoute('job_seeker_settings_password');
            }
            
            $user->setPassword(
                $passwordHasher->hashPassword(
                    $user,
                    $data['new_password']
                )
            );
            
            $em->flush();
            $this->addFlash('success', 'Password changed successfully');
            return $this->redirectToRoute('job_seeker_settings_password');
        }
        
        return $this->render('job_seeker/settings_password.html.twig', [
            'form' => $form->createView()
        ]);
    }

    #[Route('/notifications', name: 'notifications')]
    public function notifications(Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        $user = $this->getUser();
        $form = $this->createForm(NotificationSettingsType::class, $user);
        
        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            $em->flush();
            $this->addFlash('success', 'Notification settings updated');
            return $this->redirectToRoute('job_seeker_settings_notifications');
        }
        
        return $this->render('job_seeker/settings_notifications.html.twig', [
            'form' => $form->createView()
        ]);
    }

    #[Route('/delete-account', name: 'delete_account')]
    public function deleteAccount(Request $request, EntityManagerInterface $em): Response
    {
        $this->denyAccessUnlessGranted('ROLE_JOB_SEEKER');
        
        if ($request->isMethod('POST')) {
            $user = $this->getUser();
            
            // In a real app, you would also need to handle:
            // - Deleting related data
            // - Logging out the user
            // - Sending confirmation email
            
            $em->remove($user);
            $em->flush();
            
            $this->addFlash('success', 'Your account has been deleted');
            return $this->redirectToRoute('app_home');
        }
        
        return $this->render('job_seeker/settings_delete_account.html.twig');
    }
}
==================================================

Fichier: src\Entity\Administrateur.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Administrateur.php
-----
<?php

namespace App\Entity;

use App\Repository\AdministrateurRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: AdministrateurRepository::class)]
#[ORM\Table(name: 'administrateurs')]
class Administrateur
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\OneToOne(inversedBy: 'administrateur', cascade: ['persist', 'remove'])]
    #[ORM\JoinColumn(name: 'user_id', referencedColumnName: 'id')]
    private ?User $user = null;

    #[ORM\Column(length: 50)]
    private ?string $prenom = null;

    #[ORM\Column(length: 100)]
    private ?string $nomComplet = null;

    // Getters and Setters
    public function getId(): ?int 
    { 
        return $this->id; 
    }
    
    public function getUser(): ?User 
    { 
        return $this->user; 
    }
    
    public function setUser(?User $user): self
    {
        $this->user = $user;
        if ($user !== null && $user->getAdministrateur() !== $this) {
            $user->setAdministrateur($this);
        }
        return $this;
    }
    
    public function getPrenom(): ?string 
    { 
        return $this->prenom; 
    }
    
    public function setPrenom(string $prenom): self 
    { 
        $this->prenom = $prenom; 
        return $this; 
    }
    
    public function getNomComplet(): ?string 
    { 
        return $this->nomComplet; 
    }
    
    public function setNomComplet(string $nomComplet): self 
    { 
        $this->nomComplet = $nomComplet; 
        return $this; 
    }
}


==================================================

Fichier: src\Entity\Application.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Application.php
-----
<?php

namespace App\Entity;

use App\Repository\ApplicationRepository;
use App\Repository\PublicationRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ApplicationRepository::class)]
class Application
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'applications')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $user = null;

    #[ORM\ManyToOne(inversedBy: 'applications')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Publication $publication = null;

    #[ORM\Column(length: 50)]
    private ?string $status = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $message = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $createdAt = null;

    #[ORM\Column(nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $resumeFilename = null;

    #[ORM\Column(nullable: true)]
    private ?\DateTimeImmutable $processedAt = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $feedback = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getPublication(): ?Publication
    {
        return $this->publication;
    }

    public function setPublication(?Publication $publication): self
    {
        $this->publication = $publication;
        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(?string $message): self
    {
        $this->message = $message;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }

    public function getResumeFilename(): ?string
    {
        return $this->resumeFilename;
    }

    public function setResumeFilename(?string $resumeFilename): self
    {
        $this->resumeFilename = $resumeFilename;
        return $this;
    }

    public function getProcessedAt(): ?\DateTimeImmutable
    {
        return $this->processedAt;
    }

    public function setProcessedAt(?\DateTimeImmutable $processedAt): self
    {
        $this->processedAt = $processedAt;
        return $this;
    }

    public function getFeedback(): ?string
    {
        return $this->feedback;
    }

    public function setFeedback(?string $feedback): self
    {
        $this->feedback = $feedback;
        return $this;
    }
}


==================================================

Fichier: src\Entity\BehavioralQuestion.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\BehavioralQuestion.php
-----
<?php

namespace App\Entity;

use App\Repository\BehavioralQuestionRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: BehavioralQuestionRepository::class)]
class BehavioralQuestion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $text = null;

    #[ORM\Column(length: 255)]
    private ?string $subCategory = null;

    #[ORM\Column(length: 50)]
    private ?string $difficulty = null;

    #[ORM\Column(type: 'text')]
    private ?string $tips = null;

    #[ORM\Column(type: 'text')]
    private ?string $exampleAnswer = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getText(): ?string
    {
        return $this->text;
    }

    public function setText(string $text): self
    {
        $this->text = $text;

        return $this;
    }

    public function getSubCategory(): ?string
    {
        return $this->subCategory;
    }

    public function setSubCategory(string $subCategory): self
    {
        $this->subCategory = $subCategory;

        return $this;
    }

    public function getDifficulty(): ?string
    {
        return $this->difficulty;
    }

    public function setDifficulty(string $difficulty): self
    {
        $this->difficulty = $difficulty;

        return $this;
    }

    public function getTips(): ?string
    {
        return $this->tips;
    }

    public function setTips(string $tips): self
    {
        $this->tips = $tips;

        return $this;
    }

    public function getExampleAnswer(): ?string
    {
        return $this->exampleAnswer;
    }

    public function setExampleAnswer(string $exampleAnswer): self
    {
        $this->exampleAnswer = $exampleAnswer;

        return $this;
    }
}
==================================================

Fichier: src\Entity\BusinessCardHtml.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\BusinessCardHtml.php
-----
<?php

namespace App\Entity;

use App\Repository\BusinessCardHtmlRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: BusinessCardHtmlRepository::class)]
class BusinessCardHtml
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(type: 'text')]
    private ?string $htmlContent = null;

    #[ORM\OneToOne(inversedBy: 'businessCardHtml')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $user = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $createdAt = null;

    #[ORM\Column(nullable: true)]
    private ?\DateTimeImmutable $updatedAt = null;

    public function __construct()
    {
        $this->createdAt = new \DateTimeImmutable();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getHtmlContent(): ?string
    {
        return $this->htmlContent;
    }

    public function setHtmlContent(string $htmlContent): self
    {
        $this->htmlContent = $htmlContent;
        $this->updatedAt = new \DateTimeImmutable();
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }
}
==================================================

Fichier: src\Entity\Conversation.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Conversation.php
-----
<?php

namespace App\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: "App\Repository\ConversationRepository")]
class Conversation
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: "integer")]
    private $id;

    #[ORM\ManyToMany(targetEntity: "App\Entity\User", inversedBy: "conversations")]
    private $participants;

    #[ORM\OneToMany(targetEntity: "App\Entity\Message", mappedBy: "conversation", orphanRemoval: true)]
    private $messages;

    #[ORM\Column(type: "string", length: 255, nullable: true)]
    private $title;

    #[ORM\Column(type: "datetime")]
    private $createdAt;

    #[ORM\Column(type: "datetime")]
    private $updatedAt;

    #[ORM\Column(type: "boolean", options: ["default" => false])]
    private $isArchived = false;

    public function __construct()
    {
        $this->participants = new ArrayCollection();
        $this->messages = new ArrayCollection();
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @return Collection|User[]
     */
    public function getParticipants(): Collection
    {
        return $this->participants;
    }

    public function addParticipant(User $participant): self
    {
        if (!$this->participants->contains($participant)) {
            $this->participants[] = $participant;
            $participant->addConversation($this);
        }

        return $this;
    }

    public function removeParticipant(User $participant): self
    {
        if ($this->participants->contains($participant)) {
            $this->participants->removeElement($participant);
            $participant->removeConversation($this);
        }

        return $this;
    }

    /**
     * @return Collection|Message[]
     */
    public function getMessages(): Collection
    {
        return $this->messages;
    }

    public function addMessage(Message $message): self
    {
        if (!$this->messages->contains($message)) {
            $this->messages[] = $message;
            $message->setConversation($this);
            $this->updatedAt = new \DateTime();
        }

        return $this;
    }

    public function removeMessage(Message $message): self
    {
        if ($this->messages->contains($message)) {
            $this->messages->removeElement($message);
            if ($message->getConversation() === $this) {
                $message->setConversation(null);
            }
        }

        return $this;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(?string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }

    public function getIsArchived(): bool
    {
        return $this->isArchived;
    }

    public function setIsArchived(bool $isArchived): self
    {
        $this->isArchived = $isArchived;
        return $this;
    }

    /**
     * Récupère les autres participants de la conversation (tous sauf l'utilisateur courant)
     */
    public function getOtherParticipants(User $currentUser): array
    {
        $others = $this->participants->filter(
            fn(User $user) => $user !== $currentUser
        );
        
        // Convertir explicitement en tableau pour éviter les problèmes avec Twig
        return $others->toArray();
    }

    public function getLastMessage(): ?Message
    {
        if ($this->messages->isEmpty()) {
            return null;
        }

        return $this->messages->last();
    }

    public function getUnreadCount(User $user): int
    {
        return $this->messages->filter(
            fn(Message $message) => 
                $message->getSender() !== $user && 
                !$message->getIsRead()
        )->count();
    }
}



==================================================

Fichier: src\Entity\Interview.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Interview.php
-----
<?php

namespace App\Entity;

use App\Repository\InterviewRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: InterviewRepository::class)]
class Interview
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\ManyToOne(targetEntity: JobApplication::class, inversedBy: 'interviews')]
    #[ORM\JoinColumn(nullable: false)]
    private $application;

    #[ORM\Column(type: 'datetime')]
    private $scheduledAt;

    #[ORM\Column(type: 'string', length: 50)]
    private $type; // 'phone', 'video', 'onsite', etc.

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private $location;

    #[ORM\Column(type: 'text', nullable: true)]
    private $notes;

    #[ORM\Column(type: 'string', length: 20)]
    private $status = 'scheduled'; // 'scheduled', 'completed', 'canceled'

    #[ORM\Column(type: 'text', nullable: true)]
    private $feedback;

    #[ORM\Column(type: 'datetime')]
    private $createdAt;

    #[ORM\Column(type: 'datetime')]
    private $updatedAt;

    public function __construct()
    {
        $this->createdAt = new \DateTime();
        $this->updatedAt = new \DateTime();
    }

    // Getters and Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getApplication(): ?JobApplication
    {
        return $this->application;
    }

    public function setApplication(?JobApplication $application): self
    {
        $this->application = $application;
        return $this;
    }

    public function getScheduledAt(): ?\DateTimeInterface
    {
        return $this->scheduledAt;
    }

    public function setScheduledAt(\DateTimeInterface $scheduledAt): self
    {
        $this->scheduledAt = $scheduledAt;
        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getNotes(): ?string
    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getFeedback(): ?string
    {
        return $this->feedback;
    }

    public function setFeedback(?string $feedback): self
    {
        $this->feedback = $feedback;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function getUpdatedAt(): ?\DateTimeInterface
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(\DateTimeInterface $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
==================================================

Fichier: src\Entity\InterviewQuestion.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\InterviewQuestion.php
-----
<?php

namespace App\Entity;

use App\Repository\InterviewQuestionRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: InterviewQuestionRepository::class)]
class InterviewQuestion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $text = null;

    #[ORM\Column(length: 100)]
    private ?string $category = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $difficulty = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getText(): ?string
    {
        return $this->text;
    }

    public function setText(string $text): self
    {
        $this->text = $text;

        return $this;
    }

    public function getCategory(): ?string
    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;

        return $this;
    }

    public function getDifficulty(): ?string
    {
        return $this->difficulty;
    }

    public function setDifficulty(?string $difficulty): self
    {
        $this->difficulty = $difficulty;

        return $this;
    }
}

==================================================

Fichier: src\Entity\Job.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Job.php
-----
<?php

namespace App\Entity;

use App\Repository\JobRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: JobRepository::class)]
class Job
{
    const STATUS_ACTIVE = 'active';
    const STATUS_INACTIVE = 'inactive';
    const STATUS_PENDING = 'pending';

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\Column(type: 'string', length: 255)]
    private $title;

    #[ORM\Column(type: 'text')]
    private $description;

    #[ORM\Column(type: 'string', length: 255)]
    private $location;

    #[ORM\Column(type: 'string', length: 50)]
    private $type;

    #[ORM\Column(type: 'string', length: 100)]
    private $salary;

    #[ORM\Column(type: 'string', length: 20)]
    private $status = self::STATUS_ACTIVE;

    #[ORM\Column(type: 'datetime')]
    private $createdAt;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'jobs')]
    #[ORM\JoinColumn(nullable: false)]
    private $company;

    #[ORM\ManyToMany(targetEntity: Skill::class)]
    private $skills;

    #[ORM\OneToMany(targetEntity: JobApplication::class, mappedBy: 'job')]
    private $applications;

    public function __construct()
    {
        $this->skills = new ArrayCollection();
        $this->applications = new ArrayCollection();
        $this->createdAt = new \DateTime();
    }

    // Getters and Setters
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getSalary(): ?string
    {
        return $this->salary;
    }

    public function setSalary(string $salary): self
    {
        $this->salary = $salary;
        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getCompany(): ?User
    {
        return $this->company;
    }

    public function setCompany(?User $company): self
    {
        $this->company = $company;
        return $this;
    }

    /**
     * @return Collection|Skill[]
     */
    public function getSkills(): Collection
    {
        return $this->skills;
    }

    public function addSkill(Skill $skill): self
    {
        if (!$this->skills->contains($skill)) {
            $this->skills[] = $skill;
        }
        return $this;
    }

    public function removeSkill(Skill $skill): self
    {
        $this->skills->removeElement($skill);
        return $this;
    }

    /**
     * @return Collection|JobApplication[]
     */
    public function getApplications(): Collection
    {
        return $this->applications;
    }

    public function hasApplication(User $user): bool
    {
        foreach ($this->applications as $application) {
            if ($application->getUser() === $user) {
                return true;
            }
        }
        return false;
    }
}
==================================================

Fichier: src\Entity\JobApplication.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\JobApplication.php
-----
<?php

namespace App\Entity;

use App\Repository\JobApplicationRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: JobApplicationRepository::class)]
class JobApplication
{
    const STATUS_PENDING = 'pending';
    const STATUS_ACCEPTED = 'accepted';
    const STATUS_REJECTED = 'rejected';

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    private $user;

    #[ORM\ManyToOne(targetEntity: Job::class)]
    #[ORM\JoinColumn(nullable: false)]
    private $job;

    #[ORM\Column(type: 'datetime')]
    private $appliedAt;

    #[ORM\Column(type: 'string', length: 20)]
    private $status = self::STATUS_PENDING;

    public function __construct()
    {
        $this->appliedAt = new \DateTime();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getJob(): ?Job
    {
        return $this->job;
    }

    public function setJob(?Job $job): self
    {
        $this->job = $job;
        return $this;
    }

    public function getAppliedAt(): ?\DateTimeInterface
    {
        return $this->appliedAt;
    }

    public function setAppliedAt(\DateTimeInterface $appliedAt): self
    {
        $this->appliedAt = $appliedAt;
        return $this;
    }

    public function getStatus(): ?string
    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }
}

==================================================

Fichier: src\Entity\Message.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Message.php
-----
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

#[ORM\Entity]
class Message
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\Column(type: 'text')]
    #[Assert\NotBlank]
    private $content;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'messages')]
    #[ORM\JoinColumn(nullable: false)]
    private $sender;

    #[ORM\ManyToOne(targetEntity: Conversation::class, inversedBy: 'messages')]
    #[ORM\JoinColumn(nullable: false)]
    private $conversation;

    #[ORM\Column(type: 'datetime')]
    private $createdAt;

    #[ORM\Column(type: 'boolean')]
    private $isRead = false;

    public function __construct()
    {
        $this->createdAt = new \DateTime();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): self
    {
        $this->content = $content;
        return $this;
    }

    public function getSender(): ?User
    {
        return $this->sender;
    }

    public function setSender(?User $sender): self
    {
        $this->sender = $sender;
        return $this;
    }

    public function getConversation(): ?Conversation
    {
        return $this->conversation;
    }

    public function setConversation(?Conversation $conversation): self
    {
        $this->conversation = $conversation;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeInterface
    {
        return $this->createdAt;
    }

    /**
     * Définit la date de création du message
     */
    public function setCreatedAt(\DateTimeInterface $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getIsRead(): bool
    {
        return $this->isRead;
    }

    public function setIsRead(bool $isRead): self
    {
        $this->isRead = $isRead;
        return $this;
    }
}

==================================================

Fichier: src\Entity\PracticeSession.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\PracticeSession.php
-----
<?php

namespace App\Entity;

use App\Repository\PracticeSessionRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: PracticeSessionRepository::class)]
class PracticeSession
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    private $user;

    #[ORM\Column(type: 'datetime_immutable')]
    private $startedAt;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    private $endedAt;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    private $type; // 'general', 'technical', 'behavioral'

    #[ORM\Column(type: 'integer', nullable: true)]
    private $questionCount;

    #[ORM\Column(type: 'integer', nullable: true)]
    private $score;

    #[ORM\Column(type: 'text', nullable: true)]
    private $feedback;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    private $recordingUrl;

    #[ORM\Column(type: 'datetime_immutable')]
    private $createdAt;

    public function __construct()
    {
        $this->createdAt = new \DateTimeImmutable();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getStartedAt(): ?\DateTimeImmutable
    {
        return $this->startedAt;
    }

    public function setStartedAt(\DateTimeImmutable $startedAt): self
    {
        $this->startedAt = $startedAt;
        return $this;
    }

    public function getEndedAt(): ?\DateTimeImmutable
    {
        return $this->endedAt;
    }

    public function setEndedAt(?\DateTimeImmutable $endedAt): self
    {
        $this->endedAt = $endedAt;
        return $this;
    }

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(?string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getQuestionCount(): ?int
    {
        return $this->questionCount;
    }

    public function setQuestionCount(?int $questionCount): self
    {
        $this->questionCount = $questionCount;
        return $this;
    }

    public function getScore(): ?int
    {
        return $this->score;
    }

    public function setScore(?int $score): self
    {
        $this->score = $score;
        return $this;
    }

    public function getFeedback(): ?string
    {
        return $this->feedback;
    }

    public function setFeedback(?string $feedback): self
    {
        $this->feedback = $feedback;
        return $this;
    }

    public function getRecordingUrl(): ?string
    {
        return $this->recordingUrl;
    }

    public function setRecordingUrl(?string $recordingUrl): self
    {
        $this->recordingUrl = $recordingUrl;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    /**
     * Get the duration of the session in minutes
     */
    public function getDuration(): ?int
    {
        if (!$this->endedAt) {
            return null;
        }

        $diff = $this->endedAt->diff($this->startedAt);
        return ($diff->h * 60) + $diff->i;
    }
}
==================================================

Fichier: src\Entity\PreparationProgress.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\PreparationProgress.php
-----
<?php

namespace App\Entity;

use App\Repository\PreparationProgressRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: PreparationProgressRepository::class)]
class PreparationProgress
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\OneToOne(inversedBy: 'preparationProgress')]
#[ORM\JoinColumn(nullable: false)]
private ?User $user = null;

    #[ORM\Column]
    private ?int $commonQuestionsCompleted = 0;

    #[ORM\Column]
    private ?int $behavioralQuestionsCompleted = 0;

    #[ORM\Column]
    private ?int $technicalChallengesCompleted = 0;

    #[ORM\Column]
    private ?bool $mockInterviewCompleted = false;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;

        return $this;
    }

    public function getCommonQuestionsCompleted(): ?int
    {
        return $this->commonQuestionsCompleted;
    }

    public function setCommonQuestionsCompleted(int $commonQuestionsCompleted): self
    {
        $this->commonQuestionsCompleted = $commonQuestionsCompleted;

        return $this;
    }

    public function getBehavioralQuestionsCompleted(): ?int
    {
        return $this->behavioralQuestionsCompleted;
    }

    public function setBehavioralQuestionsCompleted(int $behavioralQuestionsCompleted): self
    {
        $this->behavioralQuestionsCompleted = $behavioralQuestionsCompleted;

        return $this;
    }

    public function getTechnicalChallengesCompleted(): ?int
    {
        return $this->technicalChallengesCompleted;
    }

    public function setTechnicalChallengesCompleted(int $technicalChallengesCompleted): self
    {
        $this->technicalChallengesCompleted = $technicalChallengesCompleted;

        return $this;
    }

    public function isMockInterviewCompleted(): ?bool
    {
        return $this->mockInterviewCompleted;
    }

    public function setMockInterviewCompleted(bool $mockInterviewCompleted): self
    {
        $this->mockInterviewCompleted = $mockInterviewCompleted;

        return $this;
    }

    public function getTotalProgress(): int
    {
        $total = 0;
        
        // Supposons que chaque section vaut 25% du total
        $total += min(25, ($this->commonQuestionsCompleted / 5) * 25);
        $total += min(25, ($this->behavioralQuestionsCompleted / 6) * 25);
        $total += min(25, ($this->technicalChallengesCompleted / 4) * 25);
        $total += $this->mockInterviewCompleted ? 25 : 0;
        
        return $total;
    }

    public function getCommonQuestionsProgress(): int
    {
        return min(100, ($this->commonQuestionsCompleted / 5) * 100);
    }

    public function getBehavioralQuestionsProgress(): int
    {
        return min(100, ($this->behavioralQuestionsCompleted / 6) * 100);
    }

    public function getTechnicalChallengesProgress(): int
    {
        return min(100, ($this->technicalChallengesCompleted / 4) * 100);
    }

    public function getCompanyResearchProgress(): int
    {
        // À implémenter selon votre logique
        return 0;
    }

    public function getSalaryNegotiationProgress(): int
    {
        // À implémenter selon votre logique
        return 0;
    }
}


==================================================

Fichier: src\Entity\Publication.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Publication.php
-----
<?php
namespace App\Entity;
use App\Repository\PublicationRepository;use Doctrine\ORM\Mapping as ORM;
#[ORM\Entity(repositoryClass: PublicationRepository::class)]
class Publication{
    #[ORM\Id]    #[ORM\GeneratedValue]
    #[ORM\Column]    private ?int $id = null;
    #[ORM\Column(length: 255)]
    private ?string $title = null;
    #[ORM\Column(type: 'text')]    private ?string $content = null;
    #[ORM\Column(length: 100)]
    private ?string $category = null;
    #[ORM\Column]    private ?bool $isPublished = false;
    #[ORM\Column]
    private ?\DateTimeImmutable $createdAt = null;
    #[ORM\Column(nullable: true)]    private ?\DateTimeImmutable $updatedAt = null;
    #[ORM\ManyToOne(inversedBy: 'publications')]
    #[ORM\JoinColumn(nullable: false)]    private ?User $user = null;
    public function getId(): ?int
    {        return $this->id;
    }
    public function getTitle(): ?string    {
        return $this->title;    }
    public function setTitle(string $title): static
    {        $this->title = $title;
        return $this;    }
    public function getContent(): ?string
    {        return $this->content;
    }
    public function setContent(string $content): static    {
        $this->content = $content;        return $this;
    }
    public function getCategory(): ?string    {
        return $this->category;    }
    public function setCategory(string $category): static
    {        $this->category = $category;
        return $this;    }
    public function isIsPublished(): ?bool
    {        return $this->isPublished;
    }
    public function setIsPublished(bool $isPublished): static    {
        $this->isPublished = $isPublished;        return $this;
    }
    public function getCreatedAt(): ?\DateTimeImmutable    {
        return $this->createdAt;    }
    public function setCreatedAt(\DateTimeImmutable $createdAt): static
    {        $this->createdAt = $createdAt;
        return $this;    }
    public function getUpdatedAt(): ?\DateTimeImmutable
    {        return $this->updatedAt;
    }
    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): static    {
        $this->updatedAt = $updatedAt;        return $this;
    }
    public function getUser(): ?User    {
        return $this->user;    }
    public function setUser(?User $user): static
    {        $this->user = $user;
        return $this;
    }
}




























































==================================================

Fichier: src\Entity\ResetPasswordRequest.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\ResetPasswordRequest.php
-----
<?php

namespace App\Entity;

use Doctrine\ORM\Mapping as ORM;
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestInterface;
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestTrait;

#[ORM\Entity(repositoryClass: "App\Repository\ResetPasswordRequestRepository")]
class ResetPasswordRequest implements ResetPasswordRequestInterface
{
    use ResetPasswordRequestTrait;

    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\ManyToOne(targetEntity: "App\Entity\User")]
    #[ORM\JoinColumn(nullable: false)]
    private $user;

    public function __construct(object $user, \DateTimeInterface $expiresAt, string $selector, string $hashedToken)
    {
        $this->user = $user;
        $this->initialize($expiresAt, $selector, $hashedToken);
    }

    public function getUser(): object
    {
        return $this->user;
    }
}


==================================================

Fichier: src\Entity\SavedInterviewQuestion.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\SavedInterviewQuestion.php
-----
<?php

namespace App\Entity;

use App\Repository\SavedInterviewQuestionRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SavedInterviewQuestionRepository::class)]
class SavedInterviewQuestion
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'savedInterviewQuestions')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $user = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?InterviewQuestion $question = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $savedAt = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;

        return $this;
    }

    public function getQuestion(): ?InterviewQuestion
    {
        return $this->question;
    }

    public function setQuestion(?InterviewQuestion $question): self
    {
        $this->question = $question;

        return $this;
    }

    public function getSavedAt(): ?\DateTimeImmutable
    {
        return $this->savedAt;
    }

    public function setSavedAt(\DateTimeImmutable $savedAt): self
    {
        $this->savedAt = $savedAt;

        return $this;
    }
}
==================================================

Fichier: src\Entity\SavedJob.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\SavedJob.php
-----
<?php

namespace App\Entity;

use App\Repository\SavedJobRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SavedJobRepository::class)]
class SavedJob
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'savedJobs')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $user = null;

    #[ORM\ManyToOne]
    #[ORM\JoinColumn(nullable: false)]
    private ?Publication $publication = null;

    #[ORM\Column]
    private ?\DateTimeImmutable $savedAt = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;

        return $this;
    }

    public function getPublication(): ?Publication
    {
        return $this->publication;
    }

    public function setPublication(?Publication $publication): self
    {
        $this->publication = $publication;

        return $this;
    }

    public function getSavedAt(): ?\DateTimeImmutable
    {
        return $this->savedAt;
    }

    public function setSavedAt(\DateTimeImmutable $savedAt): self
    {
        $this->savedAt = $savedAt;

        return $this;
    }
}
==================================================

Fichier: src\Entity\Skill.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\Skill.php
-----
<?php

namespace App\Entity;

use App\Repository\SkillRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: SkillRepository::class)]
class Skill
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column(type: 'integer')]
    private $id;

    #[ORM\Column(type: 'string', length: 100)]
    private $name;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }
}

==================================================

Fichier: src\Entity\TechnicalChallenge.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\TechnicalChallenge.php
-----
<?php

namespace App\Entity;

use App\Repository\TechnicalChallengeRepository;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: TechnicalChallengeRepository::class)]
class TechnicalChallenge
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 255)]
    private ?string $title = null;

    #[ORM\Column(type: 'text')]
    private ?string $description = null;

    #[ORM\Column(length: 50)]
    private ?string $difficulty = null;

    #[ORM\Column(length: 50)]
    private ?string $category = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $sampleSolution = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $hints = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;

        return $this;
    }

    public function getDifficulty(): ?string
    {
        return $this->difficulty;
    }

    public function setDifficulty(string $difficulty): self
    {
        $this->difficulty = $difficulty;

        return $this;
    }

    public function getCategory(): ?string
    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;

        return $this;
    }

    public function getSampleSolution(): ?string
    {
        return $this->sampleSolution;
    }

    public function setSampleSolution(?string $sampleSolution): self
    {
        $this->sampleSolution = $sampleSolution;

        return $this;
    }

    public function getHints(): ?string
    {
        return $this->hints;
    }

    public function setHints(?string $hints): self
    {
        $this->hints = $hints;

        return $this;
    }
}
==================================================

Fichier: src\Entity\User.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Entity\User.php
-----
<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;

#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\Table(name: 'user')]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 180, unique: true)]
    private ?string $email = null;

    #[ORM\Column(type: 'json')]
    private array $roles = [];

    #[ORM\Column]
    private ?string $password = null;

    #[ORM\Column(length: 255)]
    private ?string $username = null;

    #[ORM\Column(length: 20)]
    private ?string $type = null; // 'job_seeker' ou 'company'

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $companyName = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $industry = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $description = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $profileImage = null;

    #[ORM\Column(length: 50, nullable: true)]
    private ?string $firstName = null;

    #[ORM\Column(length: 50, nullable: true)]
    private ?string $lastName = null;

    #[ORM\Column(length: 100, nullable: true)]
    private ?string $title = null;

    #[ORM\Column(type: 'text', nullable: true)]
    private ?string $about = null;

    #[ORM\Column(length: 20, nullable: true)]
    private ?string $phone = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $address = null;

    #[ORM\Column(length: 20, nullable: true)]
    private ?string $experience = null;

    #[ORM\Column(length: 20, nullable: true)]
    private ?string $education = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $skills = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $website = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $location = null;

    #[ORM\OneToMany(targetEntity: Job::class, mappedBy: 'company')]
    private $jobs;

    #[ORM\OneToMany(targetEntity: SavedJob::class, mappedBy: 'user')]
    private $savedJobs;

    #[ORM\OneToMany(targetEntity: JobApplication::class, mappedBy: 'user')]
    private $jobApplications;

    #[ORM\ManyToMany(targetEntity: Conversation::class, mappedBy: "participants")]
    private $conversations;

    #[ORM\OneToMany(targetEntity: Message::class, mappedBy: 'sender')]
    private $messages;

    /**
     * @ORM\OneToOne(targetEntity=BusinessCardHtml::class, mappedBy="user", cascade={"persist", "remove"})
     */
    private $businessCardHtml;

    #[ORM\Column(type: 'boolean', options: ['default' => false])]
    private bool $isApproved = false;

    #[ORM\Column(type: 'datetime_immutable')]
    private ?\DateTimeImmutable $createdAt = null;

    #[ORM\OneToOne(mappedBy: 'user', targetEntity: Administrateur::class, cascade: ['persist', 'remove'])]
    private ?Administrateur $administrateur = null;

    #[ORM\OneToOne(mappedBy: 'user', targetEntity: PreparationProgress::class, cascade: ['persist', 'remove'])]
    private ?PreparationProgress $preparationProgress = null;

    public function __construct()
    {
        $this->jobs = new ArrayCollection();
        $this->savedJobs = new ArrayCollection();
        $this->jobApplications = new ArrayCollection();
        $this->conversations = new ArrayCollection();
        $this->messages = new ArrayCollection();
        $this->createdAt = new \DateTimeImmutable();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }

    public function getUserIdentifier(): string
    {
        return (string) $this->email;
    }

    public function getRoles(): array
    {
        $roles = $this->roles;
        
        if ($this->type === 'job_seeker') {
            $roles[] = 'ROLE_JOB_SEEKER';
        } elseif ($this->type === 'company') {
            $roles[] = 'ROLE_COMPANY';
        }

        $roles[] = 'ROLE_USER';

        return array_unique($roles);
    }

    public function setRoles(array $roles): self
    {
        $this->roles = $roles;
        return $this;
    }

    public function getPassword(): string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;
        return $this;
    }

    public function eraseCredentials(): void
    {
        // Clear any temporary sensitive data
    }

    public function getUsername(): string
    {
        return $this->username;
    }

    public function setUsername(string $username): self
    {
        $this->username = $username;
        return $this;
    }

    /**
     * Retourne le type d'utilisateur ('job_seeker' ou 'company')
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Définit le type d'utilisateur
     */
    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getCompanyName(): ?string
    {
        return $this->companyName;
    }

    public function setCompanyName(?string $companyName): self
    {
        $this->companyName = $companyName;
        return $this;
    }

    public function getIndustry(): ?string
    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getFirstName(): ?string
    {
        return $this->firstName;
    }

    public function setFirstName(?string $firstName): self
    {
        $this->firstName = $firstName;
        return $this;
    }

    public function getLastName(): ?string
    {
        return $this->lastName;
    }

    public function setLastName(?string $lastName): self
    {
        $this->lastName = $lastName;
        return $this;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(?string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getAbout(): ?string
    {
        return $this->about;
    }

    public function setAbout(?string $about): self
    {
        $this->about = $about;
        return $this;
    }

    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    public function getAddress(): ?string
    {
        return $this->address;
    }

    public function setAddress(?string $address): self
    {
        $this->address = $address;
        return $this;
    }

    public function getExperience(): ?string
    {
        return $this->experience;
    }

    public function setExperience(?string $experience): self
    {
        $this->experience = $experience;
        return $this;
    }

    public function getEducation(): ?string
    {
        return $this->education;
    }

    public function setEducation(?string $education): self
    {
        $this->education = $education;
        return $this;
    }

    public function getSkills(): ?string
    {
        return $this->skills;
    }

    public function setSkills(?string $skills): self
    {
        $this->skills = $skills;
        return $this;
    }

    public function getWebsite(): ?string
    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * Set profile image
     * 
     * @param string|null $profileImage
     * @return $this
     */
    public function setProfileImage(?string $profileImage): self
    {
        $this->profileImage = $profileImage;
        return $this;
    }

    /**
     * Get profile image
     * 
     * @return string|null
     */
    public function getProfileImage(): ?string
    {
        // Retourner simplement la valeur stockée, sans valeur par défaut
        return $this->profileImage;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    /**
     * @return Collection|Job[]
     */
    public function getJobs(): Collection
    {
        return $this->jobs;
    }

    public function addJob(Job $job): self
    {
        if (!$this->jobs->contains($job)) {
            $this->jobs[] = $job;
            $job->setCompany($this);
        }
        return $this;
    }

    public function removeJob(Job $job): self
    {
        if ($this->jobs->removeElement($job)) {
            if ($job->getCompany() === $this) {
                $job->setCompany(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection|SavedJob[]
     */
    public function getSavedJobs(): Collection
    {
        return $this->savedJobs;
    }

    public function addSavedJob(SavedJob $savedJob): self
    {
        if (!$this->savedJobs->contains($savedJob)) {
            $this->savedJobs[] = $savedJob;
            $savedJob->setUser($this);
        }
        return $this;
    }

    public function removeSavedJob(SavedJob $savedJob): self
    {
        if ($this->savedJobs->removeElement($savedJob)) {
            if ($savedJob->getUser() === $this) {
                $savedJob->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection|JobApplication[]
     */
    public function getJobApplications(): Collection
    {
        return $this->jobApplications;
    }

    public function addJobApplication(JobApplication $jobApplication): self
    {
        if (!$this->jobApplications->contains($jobApplication)) {
            $this->jobApplications[] = $jobApplication;
            $jobApplication->setUser($this);
        }
        return $this;
    }

    public function removeJobApplication(JobApplication $jobApplication): self
    {
        if ($this->jobApplications->removeElement($jobApplication)) {
            if ($jobApplication->getUser() === $this) {
                $jobApplication->setUser(null);
            }
        }
        return $this;
    }

    /**
     * Helper method to get full name
     */
    public function getFullName(): string
    {
        return trim($this->firstName . ' ' . $this->lastName);
    }

    /**
     * Helper method to get profile image path with default fallback
     * This should only be used for display, not for form handling
     */
    public function getProfileImagePath(): string
    {
        return $this->profileImage ? $this->profileImage : 'img/fxchat.png';
    }

    /**
     * @return Collection|Conversation[]
     */
    public function getConversations(): Collection
    {
        return $this->conversations;
    }

    public function addConversation(Conversation $conversation): self
    {
        if (!$this->conversations->contains($conversation)) {
            $this->conversations[] = $conversation;
            $conversation->addParticipant($this);
        }
        return $this;
    }

    public function removeConversation(Conversation $conversation): self
    {
        if ($this->conversations->removeElement($conversation)) {
            $conversation->removeParticipant($this);
        }
        return $this;
    }

    /**
     * @return Collection|Message[]
     */
    public function getMessages(): Collection
    {
        return $this->messages;
    }

    public function addMessage(Message $message): self
    {
        if (!$this->messages->contains($message)) {
            $this->messages[] = $message;
            $message->setSender($this);
        }
        return $this;
    }

    public function removeMessage(Message $message): self
    {
        if ($this->messages->removeElement($message)) {
            if ($message->getSender() === $this) {
                $message->setSender(null);
            }
        }
        return $this;
    }

    /**
     * @ORM\PreUpdate
     * @ORM\PrePersist
     */
    public function setDefaultProfileImage()
    {
        // Commentez complètement cette méthode pour l'empêcher de s'exécuter
        // Ne définir l'image par défaut que lors de la création initiale
        // if ($this->getId() === null && !$this->profileImage) {
        //     $this->profileImage = 'img/fxchat.png';
        // }
    }

    // Supprimer ou commenter la méthode magique __call si elle existe
    // public function __call($method, $arguments)
    // {
    //     // ...
    // } 

    /**
     * Vérifie si l'utilisateur est approuvé
     */
    public function isApproved(): bool
    {
        return $this->isApproved;
    }

    /**
     * Définit si l'utilisateur est approuvé
     */
    public function setIsApproved(bool $isApproved): self
    {
        $this->isApproved = $isApproved;
        return $this;
    }

    /**
     * Récupère la date de création de l'utilisateur
     */
    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    /**
     * Définit la date de création de l'utilisateur
     */
    public function setCreatedAt(\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    /**
     * Récupère l'administrateur associé à cet utilisateur
     */
    public function getAdministrateur(): ?Administrateur
    {
        return $this->administrateur;
    }

    /**
     * Définit l'administrateur associé à cet utilisateur
     */
    public function setAdministrateur(?Administrateur $administrateur): self
    {
        // Définir le nouvel administrateur
        $this->administrateur = $administrateur;

        // Définir la relation inverse si nécessaire
        if ($administrateur !== null && $administrateur->getUser() !== $this) {
            $administrateur->setUser($this);
        }

        return $this;
    }

    public function getPreparationProgress(): ?PreparationProgress
    {
        return $this->preparationProgress;
    }

    public function setPreparationProgress(?PreparationProgress $preparationProgress): self
    {
        $this->preparationProgress = $preparationProgress;

        // set the owning side of the relation if necessary
        if ($preparationProgress !== null && $preparationProgress->getUser() !== $this) {
            $preparationProgress->setUser($this);
        }

        return $this;
    }
}

==================================================

Fichier: src\EventListener\UnreadMessagesListener.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\EventListener\UnreadMessagesListener.php
-----
<?php

namespace App\EventListener;

use App\Entity\User;
use App\Repository\ConversationRepository;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ControllerEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Bundle\SecurityBundle\Security;
use Twig\Environment;

class UnreadMessagesListener implements EventSubscriberInterface
{
    private $twig;
    private $security;
    private $conversationRepository;

    public function __construct(
        Environment $twig,
        Security $security,
        ConversationRepository $conversationRepository
    ) {
        $this->twig = $twig;
        $this->security = $security;
        $this->conversationRepository = $conversationRepository;
    }

    public function onKernelController(ControllerEvent $event)
    {
        $user = $this->security->getUser();
        
        if ($user instanceof User) {
            $unreadCount = $this->conversationRepository->getUnreadCount($user);
            $this->twig->addGlobal('unread_count', $unreadCount);
        } else {
            $this->twig->addGlobal('unread_count', 0);
        }
    }

    public static function getSubscribedEvents()
    {
        return [
            KernelEvents::CONTROLLER => 'onKernelController',
        ];
    }
}



==================================================

Fichier: src\Form\AdministrateurType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\AdministrateurType.php
-----
<?php
// src/Form/AdministrateurType.php
namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class AdministrateurType extends AbstractType
{
public function buildForm(FormBuilderInterface $builder, array $options): void
{
$builder
->add('username', TextType::class, [
'label' => 'Nom d\'utilisateur',
'required' => true,
])
->add('email', EmailType::class, [
'label' => 'Email',
'required' => true,
])
->add('motdepasse', PasswordType::class, [
'label' => 'Mot de passe',
'required' => true,
])
->add('prenom', TextType::class, [
'label' => 'Prénom',
'required' => true,
])
->add('nomComplet', TextType::class, [
'label' => 'Nom complet',
'required' => true,
]);
}

public function configureOptions(OptionsResolver $resolver): void
{
$resolver->setDefaults([
'data_class' => \App\Entity\Administrateur::class,
]);
}
}
==================================================

Fichier: src\Form\AdminRegistrationFormType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\AdminRegistrationFormType.php
-----
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class AdminRegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email', EmailType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Email']
            ])
            ->add('username', TextType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Username']
            ])
            ->add('plainPassword', RepeatedType::class, [
                'type' => PasswordType::class,
                'mapped' => false,
                'first_options' => [
                    'label' => 'Mot de passe',
                    'attr' => ['class' => 'input-field', 'placeholder' => 'Mot de passe']
                ],
                'second_options' => [
                    'label' => 'Confirmer le mot de passe',
                    'attr' => ['class' => 'input-field', 'placeholder' => 'Confirmer le mot de passe']
                ],
                'invalid_message' => 'Les mots de passe doivent correspondre.',
                'constraints' => [
                    new NotBlank([
                        'message' => 'Veuillez entrer un mot de passe',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Votre mot de passe doit comporter au moins {{ limit }} caractères',
                        'max' => 4096,
                    ]),
                ],
            ])
            ->add('prenom', TextType::class, [
                'mapped' => false,
                'attr' => ['class' => 'input-field', 'placeholder' => 'Prénom']
            ])
            ->add('nomComplet', TextType::class, [
                'mapped' => false,
                'attr' => ['class' => 'input-field', 'placeholder' => 'Nom complet']
            ])
            ->add('adminCode', TextType::class, [
                'mapped' => false,
                'attr' => ['class' => 'input-field', 'placeholder' => 'Code administrateur']
            ])
            ->add('photo', FileType::class, [
                'label' => 'Photo de profil',
                'mapped' => false,
                'required' => false,
                'constraints' => [
                    new File([
                        'maxSize' => '1024k',
                        'mimeTypes' => [
                            'image/jpeg',
                            'image/png',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide (JPEG ou PNG)',
                    ])
                ],
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}




==================================================

Fichier: src\Form\ApplicationType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\ApplicationType.php
-----
<?php

namespace App\Form;

use App\Entity\Application;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\File;

class ApplicationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('message', TextareaType::class, [
                'label' => 'Lettre de motivation',
                'required' => true,
                'attr' => [
                    'rows' => 8,
                    'placeholder' => 'Expliquez pourquoi vous êtes intéressé par cette offre et pourquoi vous êtes le candidat idéal...'
                ]
            ])
            ->add('resumeFile', FileType::class, [
                'label' => 'CV (PDF)',
                'mapped' => false,
                'required' => true,
                'constraints' => [
                    new File([
                        'maxSize' => '2M',
                        'mimeTypes' => [
                            'application/pdf',
                            'application/x-pdf',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger un document PDF valide',
                    ])
                ],
                'attr' => [
                    'accept' => '.pdf'
                ]
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Application::class,
        ]);
    }
}
==================================================

Fichier: src\Form\CompanyRegistrationFormType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\CompanyRegistrationFormType.php
-----
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class CompanyRegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email', EmailType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Email']
            ])
            ->add('username', TextType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Username']
            ])
            ->add('plainPassword', PasswordType::class, [
                'mapped' => false, // Ce champ n'est pas mappé directement à l'entité
                'attr' => ['class' => 'input-field', 'placeholder' => 'Password']
            ])
            ->add('companyName', TextType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Company Name']
            ])
            ->add('industry', ChoiceType::class, [
                'choices' => [
                    'Sélectionnez un secteur' => '',
                    'Informatique / IT' => 'Informatique / IT',
                    'Marketing / Communication' => 'Marketing / Communication',
                    'Finance / Banque' => 'Finance / Banque',
                    'Santé / Médical' => 'Santé / Médical',
                    'Éducation / Formation' => 'Éducation / Formation',
                    'Ingénierie / Technique' => 'Ingénierie / Technique',
                    'Commerce / Vente' => 'Commerce / Vente',
                    'Mécanique / Automobile' => 'Mécanique / Automobile',
                    'Bâtiment / Construction' => 'Bâtiment / Construction',
                    'Hôtellerie / Restauration' => 'Hôtellerie / Restauration',
                    'Transport / Logistique' => 'Transport / Logistique',
                    'Juridique / Droit' => 'Juridique / Droit',
                    'Ressources Humaines' => 'Ressources Humaines',
                    'Autre' => 'Autre'
                ],
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Secteur d\'activité'
                ],
                'placeholder' => 'Sélectionnez un secteur d\'activité',
                'required' => true
            ])
            // Assurez-vous que ce champ est bien défini dans votre entité User
            ->add('address', TextType::class, [
                'attr' => ['class' => 'input-field', 'placeholder' => 'Address'],
                'required' => false, // Rendez-le optionnel pour éviter les erreurs de validation
            ])
            ->add('type', ChoiceType::class, [
                'choices' => [
                    'Company' => 'company',
                    'Job Seeker' => 'job_seeker'
                ],
                'data' => 'company', // Valeur par défaut
                'mapped' => false // Ou mappez-le si vous voulez le gérer dans le contrôleur
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}
==================================================

Fichier: src\Form\CreateAdministrateurType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\CreateAdministrateurType.php
-----
<?php

namespace App\Form;

use App\Entity\Administrateur;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\File;

class CreateAdministrateurType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username', TextType::class, [
                'label' => 'Nom d\'utilisateur',
                'required' => true,
                'mapped' => false,
                'attr' => ['class' => 'form-control'],
                'constraints' => [
                    new NotBlank(['message' => 'Veuillez entrer un nom d\'utilisateur']),
                    new Length(['min' => 3, 'max' => 50])
                ]
            ])
            ->add('email', EmailType::class, [
                'label' => 'Email',
                'required' => true,
                'mapped' => false,
                'attr' => ['class' => 'form-control'],
                'constraints' => [
                    new NotBlank(['message' => 'Veuillez entrer un email'])
                ]
            ])
            ->add('plainPassword', RepeatedType::class, [
                'type' => PasswordType::class,
                'mapped' => false,
                'first_options' => [
                    'label' => 'Mot de passe',
                    'attr' => ['class' => 'form-control']
                ],
                'second_options' => [
                    'label' => 'Confirmer le mot de passe',
                    'attr' => ['class' => 'form-control']
                ],
                'invalid_message' => 'Les mots de passe ne correspondent pas',
                'constraints' => [
                    new NotBlank(['message' => 'Veuillez entrer un mot de passe']),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Le mot de passe doit contenir au moins {{ limit }} caractères'
                    ])
                ]
            ])
            ->add('prenom', TextType::class, [
                'label' => 'Prénom',
                'required' => true,
                'attr' => ['class' => 'form-control'],
                'constraints' => [
                    new NotBlank(['message' => 'Veuillez entrer un prénom'])
                ]
            ])
            ->add('nomComplet', TextType::class, [
                'label' => 'Nom complet',
                'required' => true,
                'attr' => ['class' => 'form-control'],
                'constraints' => [
                    new NotBlank(['message' => 'Veuillez entrer un nom complet'])
                ]
            ])
            ->add('photo', FileType::class, [
                'label' => 'Photo de profil',
                'required' => false,
                'mapped' => false,
                'attr' => ['class' => 'form-control'],
                'constraints' => [
                    new File([
                        'maxSize' => '2M',
                        'mimeTypes' => [
                            'image/jpeg',
                            'image/png',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide (JPEG ou PNG)'
                    ])
                ]
            ])
            ->add('termsAccepted', CheckboxType::class, [
                'label' => 'J\'accepte les conditions d\'utilisation',
                'mapped' => false,
                'constraints' => [
                    new IsTrue(['message' => 'Vous devez accepter les conditions d\'utilisation'])
                ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Administrateur::class,
        ]);
    }
}
==================================================

Fichier: src\Form\EntrepriseProfileType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\EntrepriseProfileType.php
-----
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\UrlType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\Email;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Url;

class EntrepriseProfileType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('username', TextType::class, [
                'label' => 'Nom d\'utilisateur',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Nom d\'utilisateur'
                ],
                'constraints' => [
                    new NotBlank(['message' => 'Le nom d\'utilisateur est obligatoire']),
                    new Length([
                        'min' => 3,
                        'max' => 30,
                        'minMessage' => 'Le nom d\'utilisateur doit contenir au moins {{ limit }} caractères',
                        'maxMessage' => 'Le nom d\'utilisateur ne peut pas dépasser {{ limit }} caractères'
                    ])
                ]
            ])
            ->add('email', EmailType::class, [
                'label' => 'Email',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Email'
                ],
                'constraints' => [
                    new NotBlank(['message' => 'L\'email est obligatoire']),
                    new Email(['message' => 'Veuillez entrer un email valide'])
                ]
            ])
            ->add('companyName', TextType::class, [
                'label' => 'Nom de l\'entreprise',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Nom de l\'entreprise'
                ],
                'constraints' => [
                    new NotBlank(['message' => 'Le nom de l\'entreprise est obligatoire']),
                    new Length([
                        'max' => 100,
                        'maxMessage' => 'Le nom de l\'entreprise ne peut pas dépasser {{ limit }} caractères'
                    ])
                ]
            ])
            ->add('industry', ChoiceType::class, [
                'label' => 'Secteur d\'activité',
                'choices' => [
                    'Informatique / IT' => 'Informatique / IT',
                    'Marketing / Communication' => 'Marketing / Communication',
                    'Finance / Banque' => 'Finance / Banque',
                    'Santé / Médical' => 'Santé / Médical',
                    'Éducation / Formation' => 'Éducation / Formation',
                    'Ingénierie / Technique' => 'Ingénierie / Technique',
                    'Commerce / Vente' => 'Commerce / Vente',
                    'Mécanique / Automobile' => 'Mécanique / Automobile',
                    'Bâtiment / Construction' => 'Bâtiment / Construction',
                    'Hôtellerie / Restauration' => 'Hôtellerie / Restauration',
                    'Transport / Logistique' => 'Transport / Logistique',
                    'Juridique / Droit' => 'Juridique / Droit',
                    'Ressources Humaines' => 'Ressources Humaines',
                    'Autre' => 'Autre'
                ],
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Secteur d\'activité'
                ],
                'required' => false
            ])
            ->add('address', TextType::class, [
                'label' => 'Adresse',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Adresse complète'
                ],
                'required' => false,
                'constraints' => [
                    new Length([
                        'max' => 255,
                        'maxMessage' => 'L\'adresse ne peut pas dépasser {{ limit }} caractères'
                    ])
                ]
            ])
            ->add('website', UrlType::class, [
                'label' => 'Site web',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'https://www.example.com'
                ],
                'required' => false,
                'constraints' => [
                    new Url(['message' => 'Veuillez entrer une URL valide'])
                ]
            ])
            ->add('description', TextareaType::class, [
                'label' => 'Description',
                'attr' => [
                    'class' => 'form-control',
                    'placeholder' => 'Description de votre entreprise',
                    'rows' => 5
                ],
                'required' => false,
                'constraints' => [
                    new Length([
                        'max' => 1000,
                        'maxMessage' => 'La description ne peut pas dépasser {{ limit }} caractères'
                    ])
                ]
            ])
            ->add('logoFile', FileType::class, [
                'label' => 'Logo de l\'entreprise',
                'mapped' => false,
                'required' => false,
                'constraints' => [
                    new File([
                        'maxSize' => '2M',
                        'mimeTypes' => [
                            'image/jpeg',
                            'image/png',
                            'image/gif',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide (JPG, PNG ou GIF)',
                    ])
                ],
                'attr' => [
                    'class' => 'form-control'
                ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}









==================================================

Fichier: src\Form\InterviewPreparationType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\InterviewPreparationType.php
-----
<?php

namespace App\Form;

use App\Entity\JobApplication;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;

class InterviewPreparationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('preparationNotes', TextareaType::class, [
                'label' => 'Preparation Notes',
                'attr' => [
                    'rows' => 5,
                    'placeholder' => 'Write down key points you want to mention, questions to ask, etc.'
                ],
                'required' => false
            ])
            ->add('strengths', TextareaType::class, [
                'label' => 'Your Strengths for This Role',
                'attr' => ['rows' => 3],
                'required' => false
            ])
            ->add('weaknesses', TextareaType::class, [
                'label' => 'Areas to Improve',
                'attr' => ['rows' => 3],
                'required' => false
            ])
            ->add('questionsToAsk', CollectionType::class, [
                'label' => 'Questions to Ask',
                'entry_type' => TextType::class,
                'entry_options' => [
                    'attr' => ['placeholder' => 'Add a question to ask the interviewer'],
                    'label' => false
                ],
                'allow_add' => true,
                'allow_delete' => true,
                'by_reference' => false,
                'required' => false
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => JobApplication::class,
        ]);
    }
}
==================================================

Fichier: src\Form\JobSearchType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\JobSearchType.php
-----
<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class JobSearchType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('keywords', TextType::class, [
                'label' => 'Mots-clés',
                'required' => false,
                'attr' => ['placeholder' => 'Rechercher par titre, contenu...']
            ])
            ->add('address', TextType::class, [
                'label' => 'Adresse',
                'required' => false,
                'attr' => ['placeholder' => 'Ville, région...']
            ])
            ->add('industry', ChoiceType::class, [
                'label' => 'Secteur d\'activité',
                'required' => false,
                'choices' => [
                    'Tous les secteurs' => '',
                    'Informatique' => 'informatique',
                    'Finance' => 'finance',
                    'Santé' => 'sante',
                    'Éducation' => 'education',
                    'Marketing' => 'marketing',
                    // Ajoutez d'autres secteurs selon vos besoins
                ],
                'placeholder' => 'Sélectionnez un secteur'
            ])
            ->add('dateFrom', DateType::class, [
                'label' => 'Date de début',
                'required' => false,
                'widget' => 'single_text',
                'html5' => true
            ])
            ->add('dateTo', DateType::class, [
                'label' => 'Date de fin',
                'required' => false,
                'widget' => 'single_text',
                'html5' => true
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'csrf_protection' => false,
        ]);
    }

    public function getBlockPrefix(): string
    {
        return '';
    }
}



==================================================

Fichier: src\Form\JobSeekerProfileCustomType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\JobSeekerProfileCustomType.php
-----
<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TelType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Validator\Constraints\File;

class JobSeekerProfileCustomType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstName', TextType::class, [
                'label' => 'Prénom',
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['firstName']
            ])
            ->add('lastName', TextType::class, [
                'label' => 'Nom',
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['lastName']
            ])
            ->add('title', TextType::class, [
                'label' => 'Titre professionnel',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['title']
            ])
            ->add('about', TextareaType::class, [
                'label' => 'À propos de moi',
                'required' => false,
                'attr' => ['class' => 'form-control', 'rows' => 5],
                'data' => $options['user_data']['about']
            ])
            ->add('email', EmailType::class, [
                'label' => 'Email',
                'required' => true,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['email']
            ])
            ->add('phone', TelType::class, [
                'label' => 'Téléphone',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['phone']
            ])
            ->add('address', TextType::class, [
                'label' => 'Adresse',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['address']
            ])
            ->add('experience', TextType::class, [
                'label' => 'Niveau d\'expérience',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['experience']
            ])
            ->add('education', TextType::class, [
                'label' => 'Niveau d\'éducation',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'data' => $options['user_data']['education']
            ])
            ->add('skills', TextType::class, [
                'label' => 'Compétences',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'help' => 'Séparez les compétences par des virgules',
                'data' => $options['user_data']['skills']
            ])
            ->add('profileImageFile', FileType::class, [
                'label' => 'Photo de profil',
                'mapped' => false,
                'required' => false,
                'constraints' => [
                    new File([
                        'maxSize' => '2M',
                        'mimeTypes' => [
                            'image/jpeg',
                            'image/png',
                            'image/gif',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide (JPG, PNG ou GIF)',
                    ])
                ],
                'attr' => [
                    'class' => 'form-control'
                ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'user_data' => [],
        ]);
    }
}
==================================================

Fichier: src\Form\JobSeekerProfileType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\JobSeekerProfileType.php
-----
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TelType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Validator\Constraints\File;
use Symfony\Component\Form\FormInterface;

class JobSeekerProfileType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('firstName', TextType::class, [
                'label' => 'Prénom',
                'attr' => ['class' => 'form-control']
            ])
            ->add('lastName', TextType::class, [
                'label' => 'Nom',
                'attr' => ['class' => 'form-control']
            ])
            ->add('title', TextType::class, [
                'label' => 'Titre professionnel',
                'required' => false,
                'attr' => ['class' => 'form-control']
            ])
            ->add('about', TextareaType::class, [
                'label' => 'À propos de moi',
                'required' => false,
                'attr' => ['class' => 'form-control', 'rows' => 5]
            ])
            ->add('email', EmailType::class, [
                'label' => 'Email',
                'required' => true,
                'attr' => ['class' => 'form-control']
            ])
            ->add('phone', TelType::class, [
                'label' => 'Téléphone',
                'required' => false,
                'attr' => ['class' => 'form-control']
            ])
            ->add('address', TextType::class, [
                'label' => 'Adresse',
                'required' => false,
                'attr' => ['class' => 'form-control']
            ])
            ->add('experience', TextType::class, [
                'label' => 'Niveau d\'expérience',
                'required' => false,
                'attr' => ['class' => 'form-control']
            ])
            ->add('education', TextType::class, [
                'label' => 'Niveau d\'éducation',
                'required' => false,
                'attr' => ['class' => 'form-control']
            ])
            ->add('skills', TextType::class, [
                'label' => 'Compétences',
                'required' => false,
                'attr' => ['class' => 'form-control'],
                'help' => 'Séparez les compétences par des virgules'
            ])
            ->add('profileImageFile', FileType::class, [
                'label' => 'Photo de profil',
                'mapped' => false, // Très important : ne pas mapper ce champ à l'entité
                'required' => false,
                'constraints' => [
                    new File([
                        'maxSize' => '2M',
                        'mimeTypes' => [
                            'image/jpeg',
                            'image/png',
                            'image/gif',
                        ],
                        'mimeTypesMessage' => 'Veuillez télécharger une image valide (JPG, PNG ou GIF)',
                    ])
                ],
                'attr' => [
                    'class' => 'form-control'
                ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
            // Ignorer le champ profileImage lors de la validation et de la soumission
            'validation_groups' => function (FormInterface $form) {
                $groups = ['Default'];
                return $groups;
            },
        ]);
    }
}

==================================================

Fichier: src\Form\LoginFormType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\LoginFormType.php
-----
<?php

// src/Form/LoginFormType.php
namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\FormBuilderInterface;

class LoginFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email', EmailType::class)
            ->add('password', PasswordType::class);
    }
}
==================================================

Fichier: src\Form\MessageType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\MessageType.php
-----
<?php

namespace App\Form;

use App\Entity\Message;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;

class MessageType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('content', TextareaType::class, [
                'label' => false,
                'attr' => [
                    'placeholder' => 'Écrivez votre message...',
                    'rows' => 3,
                    'class' => 'form-control'
                ]
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults([
            'data_class' => Message::class,
        ]);
    }
}


==================================================

Fichier: src\Form\NewConversationType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\NewConversationType.php
-----
<?php

namespace App\Form;

use App\Entity\Conversation;
use App\Entity\User;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Validator\Constraints\NotBlank;

class NewConversationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('title', TextType::class, [
                'label' => 'Subject',
                'required' => false,
                'attr' => [
                    'placeholder' => 'Enter conversation subject...'
                ]
            ])
            ->add('participants', EntityType::class, [
                'class' => User::class,
                'choice_label' => 'username',
                'multiple' => true,
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please select at least one participant'
                    ])
                ],
                'label' => 'Select participants',
                'attr' => [
                    'class' => 'select2' // Optionnel pour utiliser Select2
                ]
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Conversation::class,
        ]);
    }
}
==================================================

Fichier: src\Form\PublicationType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\PublicationType.php
-----
<?php

namespace App\Form;

use App\Entity\Publication;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class PublicationType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('title', TextType::class, [
                'label' => 'Titre',
                'attr' => [
                    'placeholder' => 'Titre de votre publication',
                    'class' => 'form-control'
                ]
            ])
            ->add('content', TextareaType::class, [
                'label' => 'Contenu',
                'attr' => [
                    'placeholder' => 'Contenu de votre publication',
                    'class' => 'form-control',
                    'rows' => 10
                ]
            ])
            ->add('category', ChoiceType::class, [
                'label' => 'Catégorie',
                'choices' => [
                    'Offre d\'emploi' => 'job_offer',
                    'Stage' => 'internship',
                    'Actualité' => 'news',
                    'Événement' => 'event'
                ],
                'attr' => [
                    'class' => 'form-control'
                ]
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Publication::class,
        ]);
    }
}


==================================================

Fichier: src\Form\RegistrationFormType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\RegistrationFormType.php
-----
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class RegistrationFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email')
            ->add('username', TextType::class, [
                'label' => 'Username'
            ])
            ->add('plainPassword', PasswordType::class, [
                'mapped' => false,
                'attr' => ['autocomplete' => 'new-password'],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter a password',
                    ]),
                    new Length([
                        'min' => 6,
                        'minMessage' => 'Your password should be at least {{ limit }} characters',
                        'max' => 4096,
                    ]),
                ],
            ])
            ->add('companyName', TextType::class, [
                'label' => 'Company Name',
                'required' => false,
            ])
            ->add('industry', TextType::class, [
                'label' => 'Industry',
                'required' => false,
            ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => User::class,
        ]);
    }
}
==================================================

Fichier: src\Form\ResetPasswordRequestFormType.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Form\ResetPasswordRequestFormType.php
-----
<?php

namespace App\Form;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\NotBlank;

class ResetPasswordRequestFormType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('email', EmailType::class, [
                'attr' => [
                    'autocomplete' => 'email',
                    'class' => 'form-control'
                ],
                'constraints' => [
                    new NotBlank([
                        'message' => 'Please enter your email',
                    ]),
                ],
            ])
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([]);
    }
}
==================================================

Fichier: src\Mailer\ResetPasswordEmail.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Mailer\ResetPasswordEmail.php
-----
<?php
namespace App\Mailer;

use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;

class ResetPasswordEmail
{
    private $mailer;

    public function __construct(MailerInterface $mailer)
    {
        $this->mailer = $mailer;
    }

    public function send(string $toEmail, string $resetToken): void
    {
        $email = (new TemplatedEmail())
            ->from(new Address('no-reply@yourdomain.com', 'Password Reset'))
            ->to($toEmail)
            ->subject('Your password reset request')
            ->htmlTemplate('reset_password/email.html.twig')
            ->context([
                'resetToken' => $resetToken,
            ]);

        $this->mailer->send($email);
    }
}
==================================================

Fichier: src\Message\MercureUpdateMessage.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Message\MercureUpdateMessage.php
-----
<?php

namespace App\Message;

class MercureUpdateMessage
{
    private array $topics;
    private string $data;
    private bool $private;

    public function __construct(array $topics, string $data, bool $private = false)
    {
        $this->topics = $topics;
        $this->data = $data;
        $this->private = $private;
    }

    public function getTopics(): array
    {
        return $this->topics;
    }

    public function getData(): string
    {
        return $this->data;
    }

    public function isPrivate(): bool
    {
        return $this->private;
    }
}
==================================================

Fichier: src\MessageHandler\MercureUpdateMessageHandler.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\MessageHandler\MercureUpdateMessageHandler.php
-----
<?php

namespace App\MessageHandler;

use App\Message\MercureUpdateMessage;
use Symfony\Component\Messenger\Attribute\AsMessageHandler;
use Symfony\Component\Mercure\HubInterface;
use Symfony\Component\Mercure\Update;
use Psr\Log\LoggerInterface;

#[AsMessageHandler]
class MercureUpdateMessageHandler
{
    private HubInterface $hub;
    private LoggerInterface $logger;

    public function __construct(HubInterface $hub, LoggerInterface $logger)
    {
        $this->hub = $hub;
        $this->logger = $logger;
    }

    public function __invoke(MercureUpdateMessage $message)
    {
        try {
            $update = new Update(
                $message->getTopics(),
                $message->getData(),
                $message->isPrivate()
            );

            $this->hub->publish($update);
            $this->logger->info('Mercure update published successfully');
        } catch (\Exception $e) {
            $this->logger->error('Failed to publish Mercure update: ' . $e->getMessage());
        }
    }
}
==================================================

Fichier: src\Repository\AdministrateurRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\AdministrateurRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Administrateur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Administrateur>
 *
 * @method Administrateur|null find($id, $lockMode = null, $lockVersion = null)
 * @method Administrateur|null findOneBy(array $criteria, array $orderBy = null)
 * @method Administrateur[]    findAll()
 * @method Administrateur[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class AdministrateurRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Administrateur::class);
    }

    public function save(Administrateur $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Administrateur $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}
==================================================

Fichier: src\Repository\ApplicationRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\ApplicationRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Application;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Application>
 */
class ApplicationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Application::class);
    }

    /**
     * Trouve toutes les candidatures d'un utilisateur
     */
    public function findByUser(User $user)
    {
        return $this->createQueryBuilder('a')
            ->andWhere('a.user = :user')
            ->setParameter('user', $user)
            ->orderBy('a.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve toutes les candidatures pour une publication
     */
    public function findByPublication($publicationId)
    {
        return $this->createQueryBuilder('a')
            ->andWhere('a.publication = :publicationId')
            ->setParameter('publicationId', $publicationId)
            ->orderBy('a.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }
}





==================================================

Fichier: src\Repository\BehavioralQuestionRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\BehavioralQuestionRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\BehavioralQuestion;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<BehavioralQuestion>
 */
class BehavioralQuestionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, BehavioralQuestion::class);
    }

    public function save(BehavioralQuestion $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(BehavioralQuestion $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function findByCategory(string $category): array
    {
        return $this->createQueryBuilder('q')
            ->andWhere('q.subCategory = :category')
            ->setParameter('category', $category)
            ->orderBy('q.difficulty', 'ASC')
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\BusinessCardHtmlRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\BusinessCardHtmlRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\BusinessCardHtml;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<BusinessCardHtml>
 */
class BusinessCardHtmlRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, BusinessCardHtml::class);
    }

    public function save(BusinessCardHtml $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(BusinessCardHtml $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}
==================================================

Fichier: src\Repository\ConversationRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\ConversationRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Conversation;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;


class ConversationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Conversation::class);
    }

    public function findByParticipant(User $user): array
    {
        return $this->createQueryBuilder('c')
            ->innerJoin('c.participants', 'p')
            ->where('p.id = :userId')
            ->andWhere('c.isArchived = false')
            ->setParameter('userId', $user->getId())
            ->orderBy('c.updatedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findArchivedByParticipant(User $user): array
    {
        return $this->createQueryBuilder('c')
            ->innerJoin('c.participants', 'p')
            ->where('p.id = :userId')
            ->andWhere('c.isArchived = true')
            ->setParameter('userId', $user->getId())
            ->orderBy('c.updatedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findConversationBetweenUsers(User $user1, User $user2): ?Conversation
    {
        return $this->createQueryBuilder('c')
            ->innerJoin('c.participants', 'p1')
            ->innerJoin('c.participants', 'p2')
            ->where('p1.id = :user1Id')
            ->andWhere('p2.id = :user2Id')
            ->andWhere('SIZE(c.participants) = 2')
            ->setParameter('user1Id', $user1->getId())
            ->setParameter('user2Id', $user2->getId())
            ->getQuery()
            ->getOneOrNullResult();
    }
    /**
     * Compte le nombre de messages non lus pour un utilisateur
     */
    public function getUnreadCount(User $user): int
    {
        $qb = $this->createQueryBuilder('c')
            ->select('COUNT(m.id)')
            ->join('c.messages', 'm')
            ->join('c.participants', 'p')
            ->where('p = :user')
            ->andWhere('m.isRead = :isRead')
            ->andWhere('m.sender != :user')
            ->setParameter('user', $user)
            ->setParameter('isRead', false);
        
        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Trouve une conversation existante entre un utilisateur et un ensemble de participants
     */
    public function findExistingConversation(User $user, array $participants): ?Conversation
    {
        // Si nous n'avons qu'un seul autre participant, cherchons une conversation privée
        if (count($participants) === 1) {
            return $this->findConversationBetweenUsers($user, $participants[0]);
        }
        
        // Pour plus de participants, la logique est plus complexe et peut nécessiter une approche différente
        // Cette implémentation simple ne gère que les conversations à deux participants
        return null;
    }

    /**
     * Recherche des conversations par mot-clé
     */
    public function searchConversations(User $user, string $query): array
    {
        return $this->createQueryBuilder('c')
            ->innerJoin('c.participants', 'p')
            ->leftJoin('c.messages', 'm')
            ->leftJoin('m.sender', 's')
            ->where('p.id = :userId')
            ->andWhere('c.isArchived = false')
            ->andWhere('(
                c.title LIKE :query OR 
                m.content LIKE :query OR 
                s.username LIKE :query OR
                s.firstName LIKE :query OR
                s.lastName LIKE :query OR
                EXISTS (
                    SELECT p2 FROM App\Entity\User p2 
                    WHERE p2 MEMBER OF c.participants AND 
                    (p2.username LIKE :query OR p2.firstName LIKE :query OR p2.lastName LIKE :query)
                )
            )')
            ->setParameter('userId', $user->getId())
            ->setParameter('query', '%' . $query . '%')
            ->orderBy('c.updatedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Recherche des conversations par mot-clé avec focus sur les messages des chercheurs d'emploi
     */
    public function searchConversationsByJobSeekerMessages(User $user, string $query): array
    {
        return $this->createQueryBuilder('c')
            ->select('c', 'm', 's')  // Sélectionner explicitement les entités associées
            ->innerJoin('c.participants', 'p')
            ->leftJoin('c.messages', 'm')
            ->leftJoin('m.sender', 's')
            ->where('p.id = :userId')
            ->andWhere('c.isArchived = false')
            ->andWhere('(
                c.title LIKE :query OR 
                (m.content LIKE :query AND :jobSeekerRole MEMBER OF s.roles) OR
                (s.username LIKE :query AND :jobSeekerRole MEMBER OF s.roles) OR
                (s.firstName LIKE :query AND :jobSeekerRole MEMBER OF s.roles) OR
                (s.lastName LIKE :query AND :jobSeekerRole MEMBER OF s.roles) OR
                EXISTS (
                    SELECT p2 FROM App\Entity\User p2 
                    WHERE p2 MEMBER OF c.participants AND 
                    (p2.username LIKE :query OR p2.firstName LIKE :query OR p2.lastName LIKE :query) AND
                    :jobSeekerRole MEMBER OF p2.roles
                )
            )')
            ->setParameter('userId', $user->getId())
            ->setParameter('query', '%' . $query . '%')
            ->setParameter('jobSeekerRole', 'ROLE_JOB_SEEKER')
            ->orderBy('c.updatedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Recherche des conversations et leurs messages par mot-clé
     */
    public function searchConversationsWithMessages(User $user, string $query): array
    {
        $qb = $this->createQueryBuilder('c')
            ->select('c', 'm', 's')
            ->innerJoin('c.participants', 'p')
            ->leftJoin('c.messages', 'm')
            ->leftJoin('m.sender', 's')
            ->where('p.id = :userId')
            ->andWhere('c.isArchived = false')
            ->andWhere('(
                c.title LIKE :query OR 
                m.content LIKE :query OR 
                s.username LIKE :query OR
                s.firstName LIKE :query OR
                s.lastName LIKE :query
            )')
            ->setParameter('userId', $user->getId())
            ->setParameter('query', '%' . $query . '%')
            ->orderBy('c.updatedAt', 'DESC')
            ->addOrderBy('m.createdAt', 'ASC');
        
        return $qb->getQuery()->getResult();
    }
}











==================================================

Fichier: src\Repository\InterviewQuestionRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\InterviewQuestionRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\InterviewQuestion;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<InterviewQuestion>
 */
class InterviewQuestionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, InterviewQuestion::class);
    }

    /**
     * Trouve toutes les questions avec un indicateur si elles sont sauvegardées par l'utilisateur
     */
    public function findAllWithSavedStatus(User $user)
    {
        $conn = $this->getEntityManager()->getConnection();
        
        $sql = '
            SELECT q.*, 
                   CASE WHEN s.id IS NOT NULL THEN 1 ELSE 0 END as is_saved
            FROM interview_question q
            LEFT JOIN saved_interview_question s ON q.id = s.question_id AND s.user_id = :userId
            ORDER BY q.category, q.id
        ';
        
        $stmt = $conn->prepare($sql);
        $resultSet = $stmt->executeQuery(['userId' => $user->getId()]);
        
        return $resultSet->fetchAllAssociative();
    }

    /**
     * Trouve toutes les questions sauvegardées par l'utilisateur
     */
    public function findSavedByUser(User $user)
    {
        return $this->createQueryBuilder('q')
            ->join('App\Entity\SavedInterviewQuestion', 's', 'WITH', 's.question = q.id')
            ->where('s.user = :user')
            ->setParameter('user', $user)
            ->orderBy('q.category', 'ASC')
            ->addOrderBy('q.id', 'ASC')
            ->getQuery()
            ->getResult();
    }
}

==================================================

Fichier: src\Repository\InterviewRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\InterviewRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Interview;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Interview>
 */
class InterviewRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Interview::class);
    }

    public function findUpcomingForUser(User $user): array
    {
        return $this->createQueryBuilder('i')
            ->join('i.application', 'a')
            ->andWhere('a.user = :user')
            ->andWhere('i.status = :status')
            ->andWhere('i.scheduledAt > :now')
            ->setParameter('user', $user)
            ->setParameter('status', 'scheduled')
            ->setParameter('now', new \DateTime())
            ->orderBy('i.scheduledAt', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function save(Interview $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Interview $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}


==================================================

Fichier: src\Repository\JobApplicationRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\JobApplicationRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Job;
use App\Entity\JobApplication;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<JobApplication>
 */
class JobApplicationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, JobApplication::class);
    }

    public function save(JobApplication $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(JobApplication $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function findApplication(User $user, Job $job): ?JobApplication
    {
        return $this->createQueryBuilder('ja')
            ->andWhere('ja.user = :user')
            ->andWhere('ja.job = :job')
            ->setParameter('user', $user)
            ->setParameter('job', $job)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findUserApplications(User $user): array
    {
        return $this->createQueryBuilder('ja')
            ->leftJoin('ja.job', 'j')
            ->addSelect('j')
            ->andWhere('ja.user = :user')
            ->setParameter('user', $user)
            ->orderBy('ja.appliedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findJobApplications(Job $job): array
    {
        return $this->createQueryBuilder('ja')
            ->leftJoin('ja.user', 'u')
            ->addSelect('u')
            ->andWhere('ja.job = :job')
            ->setParameter('job', $job)
            ->orderBy('ja.appliedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\JobRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\JobRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Job;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Job>
 */
class JobRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Job::class);
    }

    public function save(Job $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Job $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function findActiveJobs(): array
    {
        return $this->createQueryBuilder('j')
            ->andWhere('j.status = :status')
            ->setParameter('status', Job::STATUS_ACTIVE)
            ->orderBy('j.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findCompanyJobs(User $company): array
    {
        return $this->createQueryBuilder('j')
            ->andWhere('j.company = :company')
            ->setParameter('company', $company)
            ->orderBy('j.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function searchJobs(?string $keywords, ?string $location): array
    {
        $query = $this->createQueryBuilder('j')
            ->andWhere('j.status = :status')
            ->setParameter('status', Job::STATUS_ACTIVE);

        if ($keywords) {
            $query->andWhere('j.title LIKE :keywords OR j.description LIKE :keywords')
                ->setParameter('keywords', '%'.$keywords.'%');
        }

        if ($location) {
            $query->andWhere('j.location LIKE :location')
                ->setParameter('location', '%'.$location.'%');
        }

        return $query->orderBy('j.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findRecentJobs(int $limit = 10): array
    {
        return $this->createQueryBuilder('j')
            ->andWhere('j.status = :status')
            ->setParameter('status', Job::STATUS_ACTIVE)
            ->orderBy('j.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\MessageRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\MessageRepository.php
-----
<?php

// src/Repository/MessageRepository.php
namespace App\Repository;

use App\Entity\Message;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class MessageRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Message::class);
    }

    public function save(Message $message): void
    {
        $this->getEntityManager()->persist($message);
        $this->getEntityManager()->flush();
    }

    public function findAllOrderedByTimestamp(): array
    {
        return $this->createQueryBuilder('m')
            ->orderBy('m.timestamp', 'ASC')
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\PracticeSessionRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\PracticeSessionRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\PracticeSession;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<PracticeSession>
 */
class PracticeSessionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, PracticeSession::class);
    }

    /**
     * Find recent sessions for a user
     */
    public function findRecentForUser(User $user, int $limit = 10): array
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.user = :user')
            ->setParameter('user', $user)
            ->orderBy('s.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /**
     * Find sessions by type for a user
     */
    public function findByTypeForUser(User $user, string $type): array
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.user = :user')
            ->andWhere('s.type = :type')
            ->setParameter('user', $user)
            ->setParameter('type', $type)
            ->orderBy('s.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\PreparationProgressRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\PreparationProgressRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\PreparationProgress;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class PreparationProgressRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, PreparationProgress::class);
    }

    public function findOrCreateForUser(User $user): PreparationProgress
    {
        $progress = $this->findOneBy(['user' => $user]);
        
        if (!$progress) {
            $progress = new PreparationProgress();
            $progress->setUser($user);
            // Initialiser les valeurs par défaut si nécessaire
            $progress->setCommonQuestionsCompleted(0);
            $progress->setBehavioralQuestionsCompleted(0);
            $progress->setTechnicalChallengesCompleted(0);
            $progress->setMockInterviewCompleted(false);
        }
        
        return $progress;
    }
}

==================================================

Fichier: src\Repository\PublicationRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\PublicationRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Publication;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Publication>
 */
class PublicationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Publication::class);
    }

    public function findPublished(): array
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.isPublished = :val')
            ->setParameter('val', true)
            ->orderBy('p.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findByUser($user): array
    {
        return $this->createQueryBuilder('p')
            ->andWhere('p.user = :user')
            ->setParameter('user', $user)
            ->orderBy('p.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function advancedSearch(array $criteria): array
    {
        $qb = $this->createQueryBuilder('p')
            ->andWhere('p.isPublished = :published')
            ->setParameter('published', true);
        
        if (!empty($criteria['keywords'])) {
            $qb->andWhere('p.title LIKE :keywords OR p.description LIKE :keywords')
               ->setParameter('keywords', '%' . $criteria['keywords'] . '%');
        }
        
        if (!empty($criteria['category']) && $criteria['category'] !== 'all') {
            $qb->andWhere('p.category = :category')
               ->setParameter('category', $criteria['category']);
        }
        
        if (!empty($criteria['industry'])) {
            $qb->andWhere('p.industry = :industry')
               ->setParameter('industry', $criteria['industry']);
        }
        
        if (!empty($criteria['address'])) {
            $qb->andWhere('p.location LIKE :address')
               ->setParameter('address', '%' . $criteria['address'] . '%');
        }
        
        if (!empty($criteria['dateFrom'])) {
            $qb->andWhere('p.createdAt >= :dateFrom')
               ->setParameter('dateFrom', new \DateTime($criteria['dateFrom']));
        }
        
        if (!empty($criteria['dateTo'])) {
            $qb->andWhere('p.createdAt <= :dateTo')
               ->setParameter('dateTo', new \DateTime($criteria['dateTo']));
        }
        
        return $qb->orderBy('p.createdAt', 'DESC')
                 ->getQuery()
                 ->getResult();
    }
}

==================================================

Fichier: src\Repository\ResetPasswordRequestRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\ResetPasswordRequestRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\ResetPasswordRequest;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use SymfonyCasts\Bundle\ResetPassword\Model\ResetPasswordRequestInterface;
use SymfonyCasts\Bundle\ResetPassword\Persistence\Repository\ResetPasswordRequestRepositoryTrait;
use SymfonyCasts\Bundle\ResetPassword\Persistence\ResetPasswordRequestRepositoryInterface;

class ResetPasswordRequestRepository extends ServiceEntityRepository implements ResetPasswordRequestRepositoryInterface
{
    use ResetPasswordRequestRepositoryTrait;

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ResetPasswordRequest::class);
    }

    public function createResetPasswordRequest(
        object $user,
        \DateTimeInterface $expiresAt,
        string $selector,
        string $hashedToken
    ): ResetPasswordRequestInterface {
        return new ResetPasswordRequest($user, $expiresAt, $selector, $hashedToken);
    }
}
==================================================

Fichier: src\Repository\SavedInterviewQuestionRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\SavedInterviewQuestionRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\SavedInterviewQuestion;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<SavedInterviewQuestion>
 */
class SavedInterviewQuestionRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, SavedInterviewQuestion::class);
    }

    public function save(SavedInterviewQuestion $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(SavedInterviewQuestion $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }
}
==================================================

Fichier: src\Repository\SavedJobRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\SavedJobRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\SavedJob;
use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<SavedJob>
 */
class SavedJobRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, SavedJob::class);
    }

    /**
     * Trouve toutes les offres sauvegardées d'un utilisateur
     */
    public function findByUser(User $user)
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.user = :user')
            ->setParameter('user', $user)
            ->orderBy('s.savedAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Vérifie si une offre est sauvegardée par un utilisateur
     */
    public function isSavedByUser(int $publicationId, User $user): bool
    {
        $result = $this->createQueryBuilder('s')
            ->andWhere('s.publication = :publicationId')
            ->andWhere('s.user = :user')
            ->setParameter('publicationId', $publicationId)
            ->setParameter('user', $user)
            ->getQuery()
            ->getOneOrNullResult();

        return $result !== null;
    }
}
==================================================

Fichier: src\Repository\SkillRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\SkillRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\Skill;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Skill>
 */
class SkillRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Skill::class);
    }

    public function save(Skill $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(Skill $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function findByName(string $name): ?Skill
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.name = :name')
            ->setParameter('name', $name)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function searchByName(string $term): array
    {
        return $this->createQueryBuilder('s')
            ->andWhere('s.name LIKE :term')
            ->setParameter('term', '%'.$term.'%')
            ->getQuery()
            ->getResult();
    }
}

==================================================

Fichier: src\Repository\TechnicalChallengeRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\TechnicalChallengeRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\TechnicalChallenge;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<TechnicalChallenge>
 */
class TechnicalChallengeRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, TechnicalChallenge::class);
    }

    public function save(TechnicalChallenge $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function remove(TechnicalChallenge $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    public function findByCategory(string $category): array
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.category = :category')
            ->setParameter('category', $category)
            ->orderBy('c.difficulty', 'ASC')
            ->getQuery()
            ->getResult();
    }
}
==================================================

Fichier: src\Repository\UserRepository.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Repository\UserRepository.php
-----
<?php

namespace App\Repository;

use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

/**
 * @extends ServiceEntityRepository<User>
 */
class UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, User::class);
    }

    /**
     * Used to upgrade (rehash) the user's password automatically over time.
     */
    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user::class));
        }

        $user->setPassword($newHashedPassword);
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush();
    }

    /**
     * Trouve un utilisateur par son email
     */
    public function findOneByEmail(string $email): ?User
    {
        return $this->findOneBy(['email' => $email]);
    }

    /**
     * Trouve les utilisateurs par type
     */
    public function findByType(string $type): array
    {
        return $this->findBy(['type' => $type]);
    }

    /**
     * Recherche des utilisateurs par nom ou email
     */
    public function searchUsers(string $term): array
    {
        return $this->createQueryBuilder('u')
            ->where('u.username LIKE :term')
            ->orWhere('u.email LIKE :term')
            ->orWhere('u.firstName LIKE :term')
            ->orWhere('u.lastName LIKE :term')
            ->setParameter('term', '%'.$term.'%')
            ->orderBy('u.username', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve les utilisateurs récemment inscrits
     */
    public function findRecentUsers(int $limit = 10): array
    {
        return $this->createQueryBuilder('u')
            ->orderBy('u.id', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve les utilisateurs par rôle (méthode alternative)
     */
    public function findUsersByRole(string $role): array
    {
        return $this->createQueryBuilder('u')
            ->where(':role MEMBER OF u.roles')
            ->setParameter('role', $role)
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve tous les utilisateurs ayant un rôle spécifique
     */
    public function findByRole(string $role)
    {
        $qb = $this->createQueryBuilder('u');
        
        return $qb
            ->where('u.roles LIKE :role')
            ->setParameter('role', '%"'.$role.'"%')
            ->orderBy('u.createdAt', 'DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve tous les utilisateurs sauf celui spécifié, avec filtrage optionnel par rôle
     */
    public function findAllExcept(User $user, ?string $role = null): array
    {
        $qb = $this->createQueryBuilder('u')
            ->where('u.id != :userId')
            ->setParameter('userId', $user->getId());
        
        if ($role) {
            $qb->andWhere('JSON_CONTAINS(u.roles, :role) = 1')
               ->setParameter('role', json_encode($role));
        }
        
        return $qb->orderBy('u.username', 'ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * Trouve tous les chercheurs d'emploi sauf l'utilisateur spécifié
     */
    public function findJobSeekers(User $currentUser): array
    {
        // Récupérer tous les utilisateurs sauf l'utilisateur courant
        $users = $this->createQueryBuilder('u')
            ->where('u.id != :currentUserId')
            ->setParameter('currentUserId', $currentUser->getId())
            ->orderBy('u.username', 'ASC')
            ->getQuery()
            ->getResult();
        
        // Filtrer manuellement pour ne garder que les chercheurs d'emploi
        return array_filter($users, function(User $user) {
            return in_array('ROLE_JOB_SEEKER', $user->getRoles());
        });
    }
}












==================================================

Fichier: src\Security\LoginFormAuthenticator.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Security\LoginFormAuthenticator.php
-----
<?php

namespace App\Security;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Http\SecurityRequestAttributes;

use Symfony\Component\Security\Http\Authenticator\AbstractAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Util\TargetPathTrait;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;

class LoginFormAuthenticator extends AbstractAuthenticator
{
    use TargetPathTrait;

    public function __construct(private UrlGeneratorInterface $urlGenerator) {}

    public function supports(Request $request): ?bool
    {
        return $request->attributes->get('_route') === 'app_login' 
            && $request->isMethod('POST');
    }

    public function authenticate(Request $request): Passport
    {
        $credentials = [
            'email' => $request->request->get('email'),
            'password' => $request->request->get('password'),
            'csrf_token' => $request->request->get('_csrf_token'),
        ];

        $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $credentials['email']);


        return new Passport(
            new UserBadge($credentials['email']),
            new PasswordCredentials($credentials['password']),
            [
                new CsrfTokenBadge('authenticate', $credentials['csrf_token']),
            ]
        );
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
            return new RedirectResponse($targetPath);
        }

        $user = $token->getUser();
        
        if (in_array('ROLE_ADMIN', $user->getRoles())) {
            return new RedirectResponse($this->urlGenerator->generate('admin_dashboard'));
        }
        
        if (in_array('ROLE_JOB_SEEKER', $user->getRoles())) {
            return new RedirectResponse($this->urlGenerator->generate('job_seeker_home'));
        }
        
        if (in_array('ROLE_COMPANY', $user->getRoles())) {
            return new RedirectResponse($this->urlGenerator->generate('app_entreprise_home'));
        }

        // Par défaut, rediriger vers la page d'accueil
        return new RedirectResponse($this->urlGenerator->generate('app_home'));
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response
    {
        // Définit l'erreur avec la nouvelle constante
        $request->getSession()->set(SecurityRequestAttributes::AUTHENTICATION_ERROR, $exception);
        return new RedirectResponse($this->urlGenerator->generate('app_login'));
    }
}

==================================================

Fichier: src\Service\AdministrateurService.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\AdministrateurService.php
-----
<?php
// src/Service/AdministrateurService.php
namespace App\Service;

use App\Entity\Administrateur;
use App\Entity\User;
use App\Repository\AdministrateurRepository;
use App\Service\UserService;
use Doctrine\ORM\EntityManagerInterface;

class AdministrateurService
{
    public function __construct(
        private EntityManagerInterface $entityManager,
        private UserService $userService,
        private AdministrateurRepository $administrateurRepository
    ) {
    }

    public function creerAdministrateur(
        string $username,
        string $email,
        string $plainPassword,
        string $prenom,
        string $nomComplet,
        ?string $photo = null
    ): ?Administrateur {
        // Créer l'utilisateur de base
        $user = $this->userService->createUser(
            $username,
            $email,
            $plainPassword,
            'administrateur',
            $photo,
            true, // est_valide
            true  // est_actif
        );

        if (!$user) {
            return null;
        }

        // Créer l'administrateur
        $administrateur = new Administrateur();
        $administrateur->setPrenom($prenom);
        $administrateur->setNomComplet($nomComplet);
        $administrateur->setUser($user);

        $this->entityManager->persist($administrateur);
        $this->entityManager->flush();

        return $administrateur;
    }

    public function getAdministrateurById(int $id): ?Administrateur
    {
        return $this->administrateurRepository->find($id);
    }

    public function getAdministrateurByUserId(int $userId): ?Administrateur
    {
        return $this->administrateurRepository->findOneByUserId($userId);
    }

    public function updateAdministrateur(Administrateur $administrateur): bool
    {
        try {
            $this->entityManager->flush();
            return true;
        } catch (\Exception $e) {
            return false;
        }
    }
}
==================================================

Fichier: src\Service\BusinessCardService.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\BusinessCardService.php
-----
<?php

namespace App\Service;

use Twig\Environment;

class BusinessCardService
{
    private $twig;
    private $geminiApiService;
    private $templates = [
        'classic_blue' => 'business_card/classic_blue.html.twig',
        'modern_minimalist' => 'business_card/modern_minimalist.html.twig',
        'creative_dark' => 'business_card/creative_dark.html.twig',
        'ai_generated' => null // Ce template sera généré par l'IA
    ];

    public function __construct(Environment $twig, GeminiApiService $geminiApiService)
    {
        $this->twig = $twig;
        $this->geminiApiService = $geminiApiService;
    }

    public function generateCard(array $data, string $templateId): string
    {
        // Si c'est un template AI-generated
        if ($templateId === 'ai_generated') {
            return $this->generateAICard($data);
        }

        // Vérifier si le template existe
        if (!isset($this->templates[$templateId])) {
            throw new \InvalidArgumentException("Template ID '{$templateId}' not found");
        }

        // Rendre le template avec les données
        return $this->twig->render($this->templates[$templateId], [
            'data' => $data
        ]);
    }

    private function generateAICard(array $data): string
    {
        // Construire le prompt pour l'IA
        $prompt = "Génère une carte de visite HTML/CSS moderne et professionnelle avec les informations suivantes:\n\n";
        $prompt .= "Nom: " . ($data['name'] ?? 'Non spécifié') . "\n";
        $prompt .= "Titre: " . ($data['title'] ?? 'Non spécifié') . "\n";
        $prompt .= "Entreprise: " . ($data['company'] ?? 'Non spécifié') . "\n";
        $prompt .= "Téléphone: " . ($data['phone'] ?? 'Non spécifié') . "\n";
        $prompt .= "Email: " . ($data['email'] ?? 'Non spécifié') . "\n";
        $prompt .= "Site web: " . ($data['website'] ?? 'Non spécifié') . "\n";
        $prompt .= "Adresse: " . ($data['address'] ?? 'Non spécifié') . "\n\n";
        
        if (isset($data['social_media'])) {
            $prompt .= "Réseaux sociaux:\n";
            foreach ($data['social_media'] as $platform => $url) {
                $prompt .= "- {$platform}: {$url}\n";
            }
            $prompt .= "\n";
        }
        
        $prompt .= "Instructions spécifiques:\n";
        $prompt .= "1. Crée uniquement le code HTML et CSS pour une carte de visite moderne et professionnelle\n";
        $prompt .= "2. Utilise des dégradés de couleurs modernes et élégants\n";
        $prompt .= "3. Inclus des effets visuels subtils comme des ombres, des formes géométriques ou des motifs\n";
        $prompt .= "4. Assure-toi que le design est responsive et s'adapte à différentes tailles d'écran\n";
        $prompt .= "5. Utilise des polices modernes et lisibles\n";
        $prompt .= "6. Organise les informations de manière claire et professionnelle\n\n";
        $prompt .= "Réponds uniquement avec le code HTML et CSS de la carte de visite, sans explications. Le code doit être complet et prêt à être utilisé.";
        
        // Appeler l'API Gemini
        $response = $this->geminiApiService->getChatResponse($prompt);
        
        // Extraire le code HTML de la réponse
        return $this->extractHtmlFromResponse($response);
    }

    private function extractHtmlFromResponse(string $response): string
    {
        // Nettoyer la réponse pour extraire uniquement le code HTML
        // Supprimer les balises de code markdown si présentes
        $response = preg_replace('/```html\s*/', '', $response);
        $response = preg_replace('/```\s*/', '', $response);
        
        // Supprimer les explications textuelles avant ou après le code HTML
        if (strpos($response, '<!DOCTYPE html>') !== false) {
            $startPos = strpos($response, '<!DOCTYPE html>');
            $endPos = strrpos($response, '</html>') + 7;
            if ($startPos !== false && $endPos !== false) {
                $response = substr($response, $startPos, $endPos - $startPos);
            }
        }
        
        return trim($response);
    }
}


==================================================

Fichier: src\Service\GeminiApiService.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\GeminiApiService.php
-----
<?php

namespace App\Service;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Psr\Log\LoggerInterface;

class GeminiApiService
{
    private $client;
    private $apiKey;
    private $logger;

    public function __construct(
        HttpClientInterface $client, 
        string $apiKey,
        LoggerInterface $logger = null
    ) {
        $this->client = $client;
        $this->apiKey = $apiKey;
        $this->logger = $logger;
    }

    public function getChatResponse(string $message): string
    {
        try {
            $url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" . $this->apiKey;

            // Log la requête (sans la clé API)
            if ($this->logger) {
                $this->logger->info('Envoi de requête à Gemini API', [
                    'message_length' => strlen($message)
                ]);
            }

            $response = $this->client->request('POST', $url, [
                'json' => [
                    'contents' => [[
                        'parts' => [[ 'text' => $message ]]
                    ]],
                    'generationConfig' => [
                        'temperature' => 0.7,
                        'topK' => 40,
                        'topP' => 0.95,
                        'maxOutputTokens' => 2048,
                    ]
                ]
            ]);

            $data = $response->toArray(false);

            // Vérifier si la réponse contient les données attendues
            if (!isset($data['candidates'][0]['content']['parts'][0]['text'])) {
                if ($this->logger) {
                    $this->logger->error('Réponse Gemini API invalide', [
                        'response' => json_encode($data)
                    ]);
                }
                return 'Désolé, je n\'ai pas pu générer une réponse. Veuillez réessayer.';
            }

            return $data['candidates'][0]['content']['parts'][0]['text'];
        } catch (\Exception $e) {
            if ($this->logger) {
                $this->logger->error('Erreur lors de l\'appel à Gemini API', [
                    'error' => $e->getMessage()
                ]);
            }
            return 'Une erreur est survenue lors de la communication avec l\'API. Détail: ' . $e->getMessage();
        }
    }
}

==================================================

Fichier: src\Service\ResetPasswordEmail.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\ResetPasswordEmail.php
-----
<?php
namespace App\Service;

use Symfony\Bridge\Twig\Mime\TemplatedEmail;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Address;

class ResetPasswordEmail
{
    private $mailer;
    private $tokenLifetime;

    public function __construct(MailerInterface $mailer)
    {
        $this->mailer = $mailer;
        // Récupérer la durée de vie du token depuis la configuration
        $this->tokenLifetime = 3600; // 1 heure par défaut
    }

    public function send(string $toEmail, string $resetToken): void
    {
        $email = (new TemplatedEmail())
            ->from(new Address('no-reply@yourdomain.com', 'Password Reset'))
            ->to($toEmail)
            ->subject('Your password reset request')
            ->htmlTemplate('reset_password/email.html.twig')
            ->context([
                'resetToken' => $resetToken,
                'tokenLifetime' => new \DateTime('+' . $this->tokenLifetime . ' seconds'),
            ]);

        $this->mailer->send($email);
    }
}

==================================================

Fichier: src\Service\UserService.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\UserService.php
-----
<?php
// src/Service/UserService.php

namespace App\Service;

use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserService
{
    public function __construct(
        private EntityManagerInterface $entityManager,
        private UserRepository $userRepository,
        private UserPasswordHasherInterface $passwordHasher
    ) {
    }

    /**
     * Trouve tous les utilisateurs d'un certain rôle (ex: 'ROLE_COMPANY')
     */
    public function findUsersByRole(string $role): array
    {
        return $this->entityManager
            ->getRepository(User::class)
            ->createQueryBuilder('u')
            ->where(':role MEMBER OF u.roles')
            ->setParameter('role', $role)
            ->getQuery()
            ->getResult();
    }

    /**
     * Cherche un utilisateur par email
     */
    public function findOneByEmail(string $email): ?User
    {
        return $this->userRepository->findOneByEmail($email);
    }

    /**
     * Valide/approuve un utilisateur
     */
    public function validateUser(User $user): void
    {
        if ($user->getType() === 'company') {
            $user->setIsApproved(true);
            $this->entityManager->flush();
        }
    }

    /**
     * Supprime un utilisateur
     */
    public function deleteUser(User $user): void
    {
        $this->entityManager->remove($user);
        $this->entityManager->flush();
    }

    /**
     * Crée un nouvel utilisateur
     *
     * @param string $username Nom d'utilisateur
     * @param string $email Email
     * @param string $plainPassword Mot de passe en clair
     * @param string $type Type d'utilisateur (job_seeker, company, administrateur)
     * @param string|null $profileImage Chemin de l'image de profil
     * @param bool $isApproved Si l'utilisateur est approuvé
     * @param bool $isActive Si l'utilisateur est actif
     * @return User|null L'utilisateur créé ou null en cas d'erreur
     */
    public function createUser(
        string $username,
        string $email,
        string $plainPassword,
        string $type,
        ?string $profileImage = null,
        bool $isApproved = false,
        bool $isActive = true
    ): ?User {
        try {
            $user = new User();
            $user->setUsername($username);
            $user->setEmail($email);
            
            // Hasher le mot de passe
            $hashedPassword = $this->passwordHasher->hashPassword($user, $plainPassword);
            $user->setPassword($hashedPassword);
            
            // Définir le type et les rôles
            $user->setType($type);
            
            // Définir les rôles en fonction du type
            switch ($type) {
                case 'administrateur':
                    $user->setRoles(['ROLE_ADMIN']);
                    break;
                case 'company':
                    $user->setRoles(['ROLE_COMPANY']);
                    break;
                case 'job_seeker':
                    $user->setRoles(['ROLE_USER']);
                    break;
                default:
                    $user->setRoles(['ROLE_USER']);
            }
            
            // Définir l'image de profil si fournie
            if ($profileImage) {
                $user->setProfileImage($profileImage);
            }
            
            // Définir si l'utilisateur est approuvé et actif
            if (method_exists($user, 'setIsApproved')) {
                $user->setIsApproved($isApproved);
            }
            
            if (method_exists($user, 'setIsActive')) {
                $user->setIsActive($isActive);
            }
            
            // Persister l'utilisateur
            $this->entityManager->persist($user);
            $this->entityManager->flush();
            
            return $user;
        } catch (\Exception $e) {
            // Gérer l'erreur (log, etc.)
            return null;
        }
    }
}

==================================================

Fichier: src\Service\VoicePlayer.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\VoicePlayer.php
-----
<?php

// src/Service/VoicePlayer.php
namespace App\Service;

class VoicePlayer
{
    public function play(string $filePath): void
    {
        // La lecture sera gérée côté client via l'API Web Audio
    }
}
==================================================

Fichier: src\Service\VoiceRecorder.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Service\VoiceRecorder.php
-----
<?php

// src/Service/VoiceRecorder.php
namespace App\Service;

class VoiceRecorder
{
    public function startRecording(): void
    {
        // Implémentation de l'enregistrement côté client (JavaScript)
    }

    public function stopRecording(): void
    {
        // Implémentation de l'arrêt d'enregistrement côté client
    }
}
==================================================

Fichier: src\Twig\AppExtension.php
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\src\Twig\AppExtension.php
-----
<?php

namespace App\Twig;

use App\Repository\ConversationRepository;
use Symfony\Bundle\SecurityBundle\Security;
use Twig\Extension\AbstractExtension;
use Twig\TwigFunction;

class AppExtension extends AbstractExtension
{
    private $security;
    private $conversationRepository;

    public function __construct(Security $security, ConversationRepository $conversationRepository)
    {
        $this->security = $security;
        $this->conversationRepository = $conversationRepository;
    }

    public function getFunctions(): array
    {
        return [
            new TwigFunction('unread_messages_count', [$this, 'getUnreadMessagesCount']),
        ];
    }

    public function getUnreadMessagesCount(): int
    {
        $user = $this->security->getUser();
        if (!$user) {
            return 0;
        }

        return $this->conversationRepository->getUnreadCount($user);
    }
}





==================================================

Fichier: templates\base.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\base.html.twig
-----
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta content="width=device-width, initial-scale=1.0" name="viewport">

  <title>{% block title %}Esprit Template - Index{% endblock %}</title>
  <meta content="" name="description">
  <meta content="" name="keywords">

  <!-- Favicons -->
  <link href="img/favicon.png" rel="icon">
  <link href="img/apple-touch-icon.png" rel="apple-touch-icon">

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600&display=swap" rel="stylesheet">

  <!-- Libraries CSS Files -->
  {% block css%}
  <link href="libraries/bootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="libraries/icofont/icofont.min.css" rel="stylesheet">
  <link href="libraries/owl.carousel/assets/owl.carousel.min.css" rel="stylesheet">
  <link href="libraries/boxicons/css/boxicons.min.css" rel="stylesheet">
  <link href="libraries/venobox/venobox.css" rel="stylesheet">
  <link href="libraries/aos/aos.css" rel="stylesheet">
  
  <!-- Template Main CSS File -->
  <link href="css/style.css" rel="stylesheet">
  
{% endblock %}

</head>

<body>

 

  <!-- ======= Hero Section ======= -->
  <section id="hero" class="d-flex align-items-center" style="background: linear-gradient(135deg, var(--primary-color) 0%, var(--accent-color) 100%);">
    {% block body %}
    <div class="container d-flex flex-column align-items-center" data-aos="zoom-in" data-aos-delay="100">
      <h1 style="color: var(--light-color); font-size: 3.5rem; margin-bottom: 20px;">Esprit</h1>
      <h2 style="color: var(--light-color); font-weight: 300; margin-bottom: 30px;">Creative Solutions for Modern Needs</h2>
      <a href="about.html" class="btn-about" style="background-color: var(--accent-color); border-color: var(--accent-color); padding: 12px 30px; font-weight: 600; letter-spacing: 1px;">About Me</a>
    </div>
    {% endblock %}
  </section><!-- End Hero -->

  <!-- ======= Footer ======= -->
  <footer id="footer" style="background-color: var(--dark-color); color: var(--light-color); padding: 30px 0;">
    <div class="container">
      <div class="row">
        <div class="col-md-6 text-center text-md-left">
          <div class="copyright">
            &copy; Copyright <strong><span>Esprit</span></strong>. All Rights Reserved
          </div>
        </div>
        <div class="col-md-6 text-center text-md-right">
          <div class="credits">
            Designed by <a href="https://bootstrapmade.com/" style="color: var(--accent-color);">BootstrapMade</a>
          </div>
        </div>
      </div>
    </div>
  </footer><!-- End Footer -->

  <div id="preloader"></div>
  <a href="#" class="back-to-top"><i class="bx bx-up-arrow-alt"></i></a>

  <!-- Libraries JS Files -->
  {% block js %}
  <script src="libraries/jquery/jquery.min.js"></script>
  <script src="libraries/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="libraries/jquery.easing/jquery.easing.min.js"></script>
  <script src="libraries/php-email-form/validate.js"></script>
  <script src="libraries/waypoints/jquery.waypoints.min.js"></script>
  <script src="libraries/counterup/counterup.min.js"></script>
  <script src="libraries/owl.carousel/owl.carousel.min.js"></script>
  <script src="libraries/isotope-layout/isotope.pkgd.min.js"></script>
  <script src="libraries/venobox/venobox.min.js"></script>
  <script src="libraries/aos/aos.js"></script>

  <!-- Template Main JS File -->
  <script src="js/main.js"></script>
  {% endblock %}

</body>

</html>
==================================================

Fichier: templates\admin\base-admin.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\base-admin.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Admin Panel{% endblock %}</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫</text></svg>">

    {# Bootstrap CSS #}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    {% block stylesheets %}
        <style>
            /* === Barre latérale animée en rouge et gris === */
            .sidebar {
                min-height: 100vh;
                background-color: dimgray;
                color: var(--admin-text-dark);
                padding-top: 20px;
                box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1); /* Ombre subtile */
                transition: all 0.3s ease-in-out;
            }

            /* Titre/logo dans la sidebar */
            .sidebar .sidebar-header {
                padding: 20px;
                text-align: center;
                border-bottom: 1px solid #e9ecef;
                font-weight: bold;
                font-size: 1.2rem;
                color: var(--admin-primary-red); /* Rouge principal */
                letter-spacing: 1px;
            }

            /* Liens du menu */
            .sidebar a {
                display: block;
                color: var(--admin-text-dark);
                text-decoration: none;
                padding: 12px 20px;
                position: relative;
                transition: background-color 0.3s ease, color 0.3s ease, padding-left 0.2s ease;
            }

            .sidebar a:hover {
                background-color: var(--admin-primary-red);
                color: var(--admin-text-light);
                padding-left: 25px;
            }

            .sidebar i {
                margin-right: 10px;
                font-size: 1.1rem;
                transition: transform 0.3s ease;
            }

            .sidebar a:hover i {
                transform: scale(1.1) rotate(5deg);
            }

            /* Icônes actives ou courantes */
            .sidebar a.active {
                background-color: var(--admin-primary-red);
                color: red;
                border-radius: 5px;
                font-weight: bold;
            }

            /* Sous-menu déroulant (optionnel) */
            .sidebar .submenu {
                margin-left: 15px;
                padding-left: 10px;
                border-left: 2px solid var(--admin-primary-red);
            }

            /* Zone principale */
            .main-content {
                padding: 20px;
                background-color:whitesmoke;
                min-height: 100vh;
            }

            /* Bloc d'information actuelle */
            .current-info {
                background-color: #be2b2b;
                padding: 15px;
                margin-bottom: 20px;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
                border-left: 4px solid var(--admin-primary-red);
            }
            /* Style pour le titre "Admin Panel" */
            .sidebar .sidebar-header {
                padding: 20px;
                text-align: center;
                border-bottom: 1px solid red;
            }

            .sidebar .sidebar-header h2 {
                margin: 0;
                font-size: 1.5rem;
                color: white /* Rouge principal */
            }
            </style>
    {% endblock %}
</head>
<body>
<div class="container-fluid">
    <div class="row">
        {# Sidebar #}
        <div class="col-md-2 sidebar">
            <h3 class="text-white mb-4">Admin Panel</h3>
            <nav>
                <a href="{{ path('admin_home') }}">Tableau de bord</a>
                <a href="{{ path('admin_companies') }}">Entreprises</a>
                <a href="{{ path('admin_job_seekers') }}">Candidats</a>
                <a href="{{ path('admin_create_admin') }}">Créer un administrateur</a>
                <a href="{{ path('app_logout') }}">Déconnexion</a>
            </nav>
        </div>

        {# Main content #}
        <div class="col-md-10 main-content">
            <div class="current-info">
                <p class="mb-0"><strong>Current Date and Time (UTC):</strong> 2025-05-21 17:49:09</p>
                <p class="mb-0"><strong>Current User:</strong> fedifedifedi</p>
            </div>

            {% for message in app.flashes('success') %}
                <div class="alert alert-success">
                    {{ message }}
                </div>
            {% endfor %}

            {% block content %}{% endblock %}
        </div>
    </div>
</div>

{# Bootstrap JS and dependencies #}
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
{% block javascripts %}{% endblock %}
</body>
</html>

==================================================

Fichier: templates\admin\companies.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\companies.html.twig
-----
{# templates/admin/companies.html.twig #}

{# Assurez-vous que cela étend le même template de base que index.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Liste des Entreprises{% endblock %}

{# --- Ajout du bloc stylesheets pour intégrer le CSS --- #}
{% block stylesheets %}
    {{ parent() }} {# Gardez ceci si base-admin.html.twig étend un autre template #}
    <style>
        /* admin_custom_styles.css intégré avec améliorations */

        /* Variables de couleur inspirées du modèle /register/choice */
        :root {
            --admin-primary-red: #B83227; /* Rouge principal (ajustez si nécessaire) */
            --admin-card-bg: #ffffff;
            --admin-card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
            --admin-card-radius: 15px;
            --admin-text-dark: #333;
            --admin-text-light: #fff;
            --admin-btn-radius: 8px;
            --admin-approve-green: #28a745; /* Vert standard pour approuver */
            --admin-reject-red: #dc3545;    /* Rouge standard pour rejeter */
            --admin-pending-yellow: #ffc107; /* Jaune pour en attente */
            --admin-content-bg: #faf8f8; /* Fond gris clair pour la zone de contenu */
        }

        /* Style général pour le contenu admin */
        .admin-content-area {
            padding: 2rem;
            background-color: var(--admin-content-bg); /* Ajout du fond gris clair */
            min-height: calc(100vh - 56px); /* Ajustez 56px si votre barre de navigation a une hauteur différente */
        }

        /* Style des conteneurs de tableaux/cartes */
        .card.shadow.mb-4 {
            border: none;
            border-radius: var(--admin-card-radius);
            box-shadow: var(--admin-card-shadow);
            background-color: var(--admin-card-bg);
        }

        .card.shadow.mb-4 .card-header {
            background-color: transparent;
            border-bottom: 1px solid #eee;
            padding: 1rem 1.25rem;
            border-top-left-radius: var(--admin-card-radius);
            border-top-right-radius: var(--admin-card-radius);
        }

        /* Titres des cartes en rouge */
        .card.shadow.mb-4 .card-header h1,
        .card.shadow.mb-4 .card-header h6 {
            color: var(--admin-primary-red);
            font-weight: bold;
            margin: 0;
            font-size: 1.2rem; /* Taille ajustée pour titre principal */
        }

        /* Style des badges de statut */
        .badge {
            border-radius: var(--admin-btn-radius);
            padding: 0.4em 0.7em;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .badge-success {
            background-color: var(--admin-approve-green);
            color: var(--admin-text-light);
        }
        .badge-danger {
            background-color: var(--admin-reject-red);
            color: var(--admin-text-light);
        }
        .badge-warning {
            background-color: var(--admin-pending-yellow);
            color: var(--admin-text-dark); /* Texte sombre sur fond jaune pour lisibilité */
        }

        /* Ajustements pour les messages flash (optionnel) */
        .alert {
            border-radius: var(--admin-btn-radius);
            box-shadow: var(--admin-card-shadow);
            border: none;
        }

        /* Optionnel: Style pour le titre principal H1 (si hors carte) */
        .admin-content-area > h1 {
            color: var(--admin-text-dark);
            font-weight: 700;
            margin-bottom: 1.5rem;
        }

        /* Style de base pour la table */
        .table {
            margin-bottom: 0; /* Retirer la marge par défaut dans la carte */
        }

        .table thead th {
            border-bottom: 2px solid #dee2e6;
            color: var(--admin-text-dark);
            font-weight: 600;
        }

        .table tbody tr:hover {
            background-color: rgba(0,0,0,0.03);
        }

    </style>
{% endblock %}
{# --- Fin du bloc stylesheets --- #}

{% block content %}
    {# Ajout de la classe .admin-content-area pour le fond et le padding #}
    <div class="admin-content-area">

        {# Affichage des messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show mb-4" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        {# Carte contenant le tableau des entreprises #}
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h1 class="m-0">Liste des Entreprises</h1>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>Nom de l'entreprise</th>
                            <th>Email</th>
                            <th>Industrie</th>
                            <th>Statut</th>
                            {# Ajoutez d'autres colonnes si nécessaire #}
                        </tr>
                        </thead>
                        <tbody>
                        {# Boucle sur la variable dynamique 'companies' fournie par le contrôleur #}
                        {% for company in companies %}
                            <tr>
                                <td>{{ company.companyName | default('N/A') }}</td>
                                <td>{{ company.email }}</td>
                                <td>{{ company.industry | default('N/A') }}</td>
                                <td>
                                    {% if company.isApproved == true %}
                                        <span class="badge badge-success">Approuvée</span>
                                    {% elseif company.isApproved == false %}
                                        <span class="badge badge-danger">Rejetée</span>
                                    {% else %}
                                        <span class="badge badge-warning">En attente</span>
                                    {% endif %}
                                </td>
                                {# Affichez d'autres données ici #}
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="4" class="text-center">Aucune entreprise trouvée.</td> {# Ajustez colspan si vous ajoutez des colonnes #}
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div> {# Fin de .admin-content-area #}
{% endblock %}
==================================================

Fichier: templates\admin\create.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\create.html.twig
-----
{# templates/admin/create.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Créer un administrateur{% endblock %}

{% block body %}
    <div class="container mt-5">
        <h1>Créer un administrateur</h1>

        {# Messages flash #}
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">{{ message }}</div>
        {% endfor %}

        {% for message in app.flashes('success') %}
            <div class="alert alert-success">{{ message }}</div>
        {% endfor %}

        {# Formulaire Symfony #}
        {{ form_start(form) }}
        <div class="mb-3">
            {{ form_label(form.username) }}
            {{ form_widget(form.username, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.username) }}
        </div>

        <div class="mb-3">
            {{ form_label(form.email) }}
            {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.email) }}
        </div>

        <div class="mb-3">
            {{ form_label(form.motdepasse) }}
            {{ form_widget(form.motdepasse, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.motdepasse) }}
        </div>

        <div class="mb-3">
            {{ form_label(form.prenom) }}
            {{ form_widget(form.prenom, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.prenom) }}
        </div>

        <div class="mb-3">
            {{ form_label(form.nomComplet) }}
            {{ form_widget(form.nomComplet, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.nomComplet) }}
        </div>

        <button type="submit" class="btn btn-primary">Créer</button>
        {{ form_end(form) }}
    </div>
{% endblock %}
==================================================

Fichier: templates\admin\create_admin.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\create_admin.html.twig
-----
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Créer un administrateur{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h1 class="h3 mb-0">Créer un nouvel administrateur</h1>
        </div>
        <div class="card-body">
            {% for message in app.flashes('success') %}
                <div class="alert alert-success">
                    {{ message }}
                </div>
            {% endfor %}
            
            {% for message in app.flashes('error') %}
                <div class="alert alert-danger">
                    {{ message }}
                </div>
            {% endfor %}
            
            {{ form_start(form) }}
                <div class="row">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.username) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.email) }}
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.plainPassword.first) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.plainPassword.second) }}
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.prenom) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.nomComplet) }}
                    </div>
                </div>
                
                <div class="mb-3">
                    {{ form_row(form.photo) }}
                </div>
                
                <div class="mb-3 form-check">
                    {{ form_widget(form.termsAccepted) }}
                    {{ form_label(form.termsAccepted) }}
                    {{ form_errors(form.termsAccepted) }}
                </div>
                
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <a href="{{ path('admin_dashboard') }}" class="btn btn-secondary me-md-2">Annuler</a>
                    <button type="submit" class="btn btn-primary">Créer l'administrateur</button>
                </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\admin\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\index.html.twig
-----
{% extends 'admin/base-admin.html.twig' %}
{% block title %}Tableau de bord Admin{% endblock %}

{# --- Ajout du bloc stylesheets pour intégrer le CSS --- #}
{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Variables de couleur inspirées du modèle /register/choice */
        :root {
            --admin-primary-red: #B83227; /* Rouge principal (ajustez si nécessaire) */
            --admin-card-bg: #ffffff;
            --admin-card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
            --admin-card-radius: 15px;
            --admin-text-dark: #333;
            --admin-text-light: #fff;
            --admin-btn-radius: 8px;
            --admin-approve-green: #28a745; /* Vert standard pour approuver */
            --admin-reject-red: #dc3545;    /* Rouge standard pour rejeter */
            --admin-content-bg: #f8f9fa; /* Fond gris clair pour la zone de contenu */
        }

        .admin-content-area {
            padding: 2rem;
            background-color: var(--admin-content-bg);
            min-height: calc(100vh - 56px);
        }

        .card.border-left-primary,
        .card.border-left-success,
        .card.border-left-info,
        .card.border-left-warning {
            border-left: none !important;
            border-radius: var(--admin-card-radius);
            box-shadow: var(--admin-card-shadow);
            background-color: var(--admin-card-bg);
            margin-bottom: 1.5rem;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
        }

        .card:hover {
            transform: translateY(-5px) scale(1.02);
            box-shadow: 0 0.8rem 1.5rem rgba(0, 0, 0, 0.15);
        }

        .card .text-primary,
        .card .text-success,
        .card .text-info,
        .card .text-warning {
            color: var(--admin-primary-red) !important;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.8rem;
        }

        .card .text-gray-800 {
            color: var(--admin-text-dark) !important;
            font-size: 1.75rem;
            font-weight: 700;
        }

        .card .fa-users,
        .card .fa-user-graduate,
        .card .fa-building,
        .card .fa-clock {
            color: #dee2e6 !important;
            font-size: 2.5rem;
            opacity: 0.7;
        }

        .card.shadow.mb-4 {
            border: none;
            border-radius: var(--admin-card-radius);
            box-shadow: var(--admin-card-shadow);
            background-color: var(--admin-card-bg);
        }

        .card-header {
            background-color: transparent;
            border-bottom: 1px solid #eee;
            padding: 1rem 1.25rem;
            border-top-left-radius: var(--admin-card-radius);
            border-top-right-radius: var(--admin-card-radius);
        }

        .card-header h6 {
            color: var(--admin-primary-red);
            font-weight: bold;
            margin: 0;
            font-size: 1rem;
        }

        .table .btn {
            border-radius: var(--admin-btn-radius);
            padding: 0.375rem 0.9rem;
            font-size: 0.8rem;
            font-weight: 600;
            color: var(--admin-text-light);
            border: none;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .table .btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }

        .btn-success {
            background-color: var(--admin-approve-green);
        }

        .btn-danger {
            background-color: var(--admin-reject-red);
        }

        .alert {
            border-radius: var(--admin-btn-radius);
            box-shadow: var(--admin-card-shadow);
            border: none;
        }

        h1 {
            color: var(--admin-text-dark);
            font-weight: 700;
            margin-bottom: 1.5rem;
        }
    </style>
{% endblock %}
{# --- Fin du bloc stylesheets --- #}

{% block content %}
    <div class="admin-content-area">
        <div class="row mb-4">
            <div class="col-md-12">
                <h1>Tableau de bord Administrateur</h1>
            </div>
        </div>

        {# Messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        {# Statistiques #}
        <div class="row mb-4">
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Total Utilisateurs</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">{{ totalUsers | default(0) }}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                    Candidats</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">{{ candidateCount | default(0) }}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-user-graduate fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                    Entreprises</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">{{ companyCount | default(0) }}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-building fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-md-6 mb-4">
                <div class="card border-left-warning shadow h-100 py-2">
                    <div class="card-body">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                    En attente d'approbation</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800">{{ pendingCompanyCount | default(0) }}</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-clock fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {# Tableaux dynamiques #}
        <div class="row">
            <div class="col-md-6">
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0">Derniers Candidats Inscrits</h6>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                <tr>
                                    <th>Nom</th>
                                    <th>Email</th>
                                    <th>Compétences</th>
                                </tr>
                                </thead>
                                <tbody>
                                {% for candidate in lastCandidates %}
                                    <tr>
                                        <td>{{ candidate.firstName | default('') }} {{ candidate.lastName | default('') }}</td>
                                        <td>{{ candidate.email }}</td>
                                        <td>{{ candidate.skills | default('N/A') }}</td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="3" class="text-center">Aucun candidat récent trouvé.</td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card shadow mb-4">
                    <div class="card-header py-3">
                        <h6 class="m-0">Entreprises en Attente</h6>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                <tr>
                                    <th>Entreprise</th>
                                    <th>Email</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                {% for company in pendingCompanies %}
                                    <tr>
                                        <td>{{ company.companyName | default('N/A') }}</td>
                                        <td>{{ company.email }}</td>
                                        <td>
                                            <form action="{{ path('admin_approve_company', {'id': company.id}) }}" method="post" style="display: inline-block; margin-right: 5px;">
                                                <button type="submit" class="btn btn-success btn-sm">✓ Approuver</button>
                                            </form>
                                            <form action="{{ path('admin_reject_company', {'id': company.id}) }}" method="post" style="display: inline-block;">
                                                <button type="submit" class="btn btn-danger btn-sm">× Rejeter</button>
                                            </form>
                                        </td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="3" class="text-center">Aucune entreprise en attente d'approbation.</td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
==================================================

Fichier: templates\admin\job_seekers.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\job_seekers.html.twig
-----
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Gestion des Candidats{% endblock %}

{# --- Ajout du bloc stylesheets pour intégrer le CSS --- #}
{% block stylesheets %}
    {{ parent() }} {# Gardez ceci si base-admin.html.twig étend un autre template #}
    <style>
        /* admin_custom_styles.css intégré avec améliorations et styles pour job_seekers */

        /* Variables de couleur */
        :root {
            --admin-primary-red: #B83227;
            --admin-card-bg: #ffffff;
            --admin-card-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
            --admin-card-radius: 15px;
            --admin-text-dark: #333;
            --admin-text-light: #fff;
            --admin-btn-radius: 8px;
            --admin-content-bg: #f8f9fa;
            --admin-info-blue: #17a2b8; /* Couleur pour bouton Info */
            --admin-warning-orange: #ffc107; /* Couleur pour bouton Warning */
            --admin-danger-red: #dc3545; /* Couleur pour bouton Danger */
            --admin-grey-badge: #6c757d; /* Couleur pour badges compétences */
        }

        /* Style général */
        .admin-content-area {
            padding: 2rem;
            background-color: var(--admin-content-bg);
            min-height: calc(100vh - 56px);
        }

        /* Style des cartes */
        .card.shadow.mb-4 {
            border: none;
            border-radius: var(--admin-card-radius);
            box-shadow: var(--admin-card-shadow);
            background-color: var(--admin-card-bg);
        }

        .card.shadow.mb-4 .card-header {
            background-color: transparent;
            border-bottom: 1px solid #eee;
            padding: 1rem 1.25rem;
            border-top-left-radius: var(--admin-card-radius);
            border-top-right-radius: var(--admin-card-radius);
            display: flex; /* Pour aligner titre et boutons/recherche */
            justify-content: space-between;
            align-items: center;
        }

        /* Titres des cartes en rouge */
        .card.shadow.mb-4 .card-header h1,
        .card.shadow.mb-4 .card-header h6 {
            color: var(--admin-primary-red);
            font-weight: bold;
            margin: 0;
            font-size: 1.2rem;
        }

        /* Style pour la zone de recherche et export */
        .card-header .search-export-zone {
            display: flex;
            align-items: center;
        }
        .card-header .search-export-zone .form-control {
            border-radius: var(--admin-btn-radius);
            margin-right: 0.5rem;
            max-width: 250px; /* Limiter la largeur */
        }
        .card-header .search-export-zone .btn-primary {
            background-color: var(--admin-primary-red);
            border-color: var(--admin-primary-red);
            color: var(--admin-text-light);
            border-radius: var(--admin-btn-radius);
            font-weight: 600;
            transition: all 0.2s ease-in-out;
        }
        .card-header .search-export-zone .btn-primary:hover {
            opacity: 0.9;
            transform: translateY(-2px);
        }

        /* Style de base pour la table */
        .table {
            margin-bottom: 0;
        }
        .table thead th {
            border-bottom: 2px solid #dee2e6;
            color: var(--admin-text-dark);
            font-weight: 600;
            white-space: nowrap; /* Empêcher le retour à la ligne des titres */
        }
        .table tbody tr:hover {
            background-color: rgba(0,0,0,0.03);
        }
        .table td, .table th {
            vertical-align: middle; /* Centrer verticalement le contenu */
        }

        /* Style des badges compétences */
        .badge.bg-primary {
            background-color: var(--admin-grey-badge) !important; /* Utiliser gris pour compétences */
            border-radius: var(--admin-btn-radius);
            padding: 0.4em 0.7em;
            font-size: 0.75rem;
            font-weight: 600;
            margin-right: 3px; /* Espacement entre badges */
            margin-bottom: 3px; /* Espacement vertical */
            display: inline-block;
        }

        /* Style des boutons d'action dans le tableau */
        .table .btn {
            border-radius: var(--admin-btn-radius);
            padding: 0.375rem 0.9rem;
            font-size: 0.75rem; /* Plus petit pour actions */
            font-weight: 600;
            color: var(--admin-text-light);
            border: none;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-right: 5px; /* Espacement entre boutons */
        }
        .table .btn:hover {
            opacity: 0.9;
            transform: translateY(-2px);
            box-shadow: 0 3px 6px rgba(0,0,0,0.15);
        }
        .table .btn-info {
            background-color: var(--admin-info-blue);
        }
        .table .btn-warning {
            background-color: var(--admin-warning-orange);
            color: var(--admin-text-dark); /* Texte sombre sur orange */
        }
        .table .btn-danger {
            background-color: var(--admin-danger-red);
        }

        /* Ajustements pour les messages flash */
        .alert {
            border-radius: var(--admin-btn-radius);
            box-shadow: var(--admin-card-shadow);
            border: none;
        }

        /* Titre principal H1 */
        .admin-content-area > h1 {
            color: var(--admin-text-dark);
            font-weight: 700;
            margin-bottom: 1.5rem;
        }

    </style>
{% endblock %}
{# --- Fin du bloc stylesheets --- #}

{% block content %}
    <div class="admin-content-area">
        {# Titre principal de la page #}
        <h1>Gestion des Candidats</h1>

        {# Affichage des messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show mb-4" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        {# Carte contenant le tableau des candidats #}
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                {# Titre de la carte #}
                <h6 class="m-0">Liste des Candidats</h6>
                {# Zone de recherche et export #}
                <div class="search-export-zone">
                    <input type="text" class="form-control" placeholder="Rechercher...">
                    <button class="btn btn-primary">Exporter</button>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>Nom Complet</th>
                            <th>Email</th>
                            <th>Téléphone</th>
                            <th>Adresse</th>
                            {# <th>Formation</th> -- Commenté car non présent dans User Entity par défaut #}
                            {# <th>Expérience</th> -- Commenté car non présent dans User Entity par défaut #}
                            <th>Compétences</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        {# Boucle sur la variable jobSeekers fournie par le contrôleur #}
                        {% for seeker in jobSeekers %}
                            <tr>
                                <td>{{ seeker.firstName | default('') }} {{ seeker.lastName | default('') }}</td>
                                <td>{{ seeker.email }}</td>
                                <td>{{ seeker.phone | default('N/A') }}</td>
                                <td>{{ seeker.address | default('N/A') }}</td>
                                {# <td>{{ seeker.education | default('N/A') }}</td> #}
                                {# <td>{{ seeker.experience | default('N/A') }}</td> #}
                                <td>
                                    {# Vérifie si skills est un tableau avant de boucler #}
                                    {% if seeker.skills is iterable %}
                                        {% for skill in seeker.skills %}
                                            <span class="badge bg-primary">{{ skill }}</span>
                                        {% endfor %}
                                    {% else %}
                                        {{ seeker.skills | default('N/A') }} {# Affiche comme texte si ce n'est pas un tableau #}
                                    {% endif %}
                                </td>
                                <td>
                                    {# Adaptez les liens/actions si nécessaire #}
                                    <button class="btn btn-info btn-sm">📝 Voir CV</button>
                                    <button class="btn btn-warning btn-sm">✉ Contacter</button>
                                    <button class="btn btn-danger btn-sm">🗑 Supprimer</button>
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="6" class="text-center">Aucun candidat trouvé.</td> {# Ajustez colspan selon les colonnes visibles #}
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div> {# Fin de .admin-content-area #}
{% endblock %}
==================================================

Fichier: templates\admin\demandes\companies.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\demandes\companies.html.twig
-----
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Gestion des Entreprises{% endblock %}

{% block content %}
    <div class="row mb-4">
        <div class="col-md-12">
            <h1>Gestion des Entreprises</h1>
        </div>
    </div>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Liste des Entreprises</h6>
            <div class="d-flex">
                <input type="text" class="form-control mr-2" placeholder="Rechercher...">
                <button class="btn btn-primary">Exporter</button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered">
                    <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Email</th>
                        <th>Téléphone</th>
                        <th>Adresse</th>
                        <th>Site Web</th>
                        <th>Statut</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for company in companies %}
                        <tr>
                            <td>{{ company.name }}</td>
                            <td>{{ company.email }}</td>
                            <td>{{ company.phone }}</td>
                            <td>{{ company.address }}</td>
                            <td><a href="http://{{ company.website }}" target="_blank">{{ company.website }}</a></td>
                            <td>
                                {% if company.isApproved %}
                                    <span class="badge bg-success">Approuvé</span>
                                {% else %}
                                    <span class="badge bg-warning">En attente</span>
                                {% endif %}
                            </td>
                            <td>
                                <button class="btn btn-info btn-sm">📝 Éditer</button>
                                {% if not company.isApproved %}
                                    <button class="btn btn-success btn-sm">✓ Approuver</button>
                                {% endif %}
                                <button class="btn btn-danger btn-sm">🗑 Supprimer</button>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
{% endblock %}
==================================================

Fichier: templates\admin\demandes\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\demandes\index.html.twig
-----
{# templates/admin/demandes/index.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Demandes des entreprises{% endblock %}

{% block content %}
    <div class="container py-4">
        <h1 class="mb-4">Demandes d'entreprises en attente</h1>

        {% if entreprises|length > 0 %}
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="table-light">
                    <tr>
                        <th>Email</th>
                        <th>Nom de l'entreprise</th>
                        <th>Nom d'utilisateur</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for entreprise in entreprises %}
                        <tr>
                            <td>{{ entreprise.email }}</td>
                            <td>{{ entreprise.companyName ?? '-' }}</td>
                            <td>{{ entreprise.username }}</td>
                            <td class="text-center">
                                <form method="POST" action="{{ path('admin_demandes_approuver', {'email': entreprise.email}) }}" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('approve_company') }}">
                                    <button type="submit" class="btn btn-success btn-sm"
                                            onclick="return confirm('Voulez-vous vraiment approuver cette entreprise ?')">
                                        ✅ Approuver
                                    </button>
                                </form>

                                <form method="POST" action="{{ path('admin_demandes_rejeter', {'email': entreprise.email}) }}" class="d-inline">
                                    <input type="hidden" name="_token" value="{{ csrf_token('reject_company') }}">
                                    <button type="submit" class="btn btn-danger btn-sm"
                                            onclick="return confirm('Voulez-vous vraiment rejeter cette entreprise ? Cette action est irréversible.')">
                                        ❌ Rejeter
                                    </button>
                                </form>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <div class="alert alert-info">
                <i class="fas fa-info-circle"></i> Aucune demande d'entreprise en attente.
            </div>
        {% endif %}
    </div>
{% endblock %}
==================================================

Fichier: templates\admin\GestionUtilisateurs\chercheurs.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\GestionUtilisateurs\chercheurs.html.twig
-----
{# templates/admin/GestionUtilisateurs/chercheurs.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Gestion des candidats{% endblock %}

{% block content %}
    <h1>Liste des candidats</h1>

    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Nom complet</th>
            <th>Email</th>
            <th>Date d'inscription</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        {% if chercheurs|length > 0 %}
            {% for user in chercheurs %}
                <tr>
                    <td>{{ user.firstName }} {{ user.lastName }}</td>
                    <td>{{ user.email }}</td>
                    <td>{{ user.createdAt ? user.createdAt|date('d/m/Y') : '-' }}</td>
                    <td>
                        <a href="#" class="btn btn-sm btn-primary">Voir profil</a>
                        <a href="#" class="btn btn-sm btn-danger">Supprimer</a>
                    </td>
                </tr>
            {% endfor %}
        {% else %}
            <tr><td colspan="4" class="text-center">Aucun candidat trouvé.</td></tr>
        {% endif %}
        </tbody>
    </table>
{% endblock %}

==================================================

Fichier: templates\admin\GestionUtilisateurs\entreprise.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\GestionUtilisateurs\entreprise.html.twig
-----
{# templates/admin/gestion_utilisateurs/entreprises.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Gestion des entreprises{% endblock %}

{% block content %}
    <h1>Liste des entreprises</h1>

    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Nom</th>
            <th>Email</th>
            <th>Statut</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        {% if entreprises|length > 0 %}
            {% for entreprise in entreprises %}
                <tr>
                    <td>{{ entreprise.nom }}</td>
                    <td>{{ entreprise.email }}</td>
                    <td>
                        {% if entreprise.isApproved %}
                            <span class="badge bg-success">✅ Approuvée</span>
                        {% else %}
                            <span class="badge bg-warning text-dark">⏳ En attente</span>
                        {% endif %}
                    </td>
                    <td>
                        <a href="#" class="btn btn-sm btn-primary">Voir détails</a>
                    </td>
                </tr>
            {% endfor %}
        {% else %}
            <tr><td colspan="4" class="text-center">Aucune entreprise trouvée.</td></tr>
        {% endif %}
        </tbody>
    </table>
{% endblock %}
==================================================

Fichier: templates\admin\GestionUtilisateurs\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\GestionUtilisateurs\index.html.twig
-----
{# templates/admin/gestion_utilisateurs/index.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Gestion des utilisateurs{% endblock %}

{% block content %}
    <h1>Gestion des utilisateurs</h1>

    <ul class="list-group">
        <li class="list-group-item">
            <a href="{{ path('admin_entreprises') }}">🏢 Gérer les entreprises</a>
        </li>
        <li class="list-group-item">
            <a href="{{ path('admin_chercheurs_emploi') }}">👤 Gérer les candidats</a>
        </li>
    </ul>
{% endblock %}
==================================================

Fichier: templates\admin\home\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\home\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Job Portal{% endblock %}

{% block body %}
    <div class="container mt-4">
        <h1>Job Portal</h1>

        {% if app.user %}
            <div class="alert alert-info">
                <p>Connecté en tant que : {{ app.user.email }}</p>
                {% if is_granted('ROLE_ADMIN') %}
                    <a href="{{ path('admin_home') }}" class="btn btn-primary">Panel d'administration</a>
                {% elseif is_granted('ROLE_JOB_SEEKER') %}
                    <a href="{{ path('job_seeker_home') }}" class="btn btn-primary">Espace Candidat</a>
                {% endif %}
            </div>
        {% else %}
            <div class="jumbotron">
                <h2>Bienvenue sur le Job Portal</h2>
                <p class="lead">Trouvez votre prochain emploi ou le candidat idéal.</p>
                <hr class="my-4">
                <p>Connectez-vous pour accéder à toutes les fonctionnalités.</p>
                <a href="{{ path('app_login') }}" class="btn btn-primary btn-lg">Se connecter</a>
                <a href="{{ path('app_register_choice') }}" class="btn btn-secondary btn-lg">S'inscrire</a>
            </div>
        {% endif %}
    </div>
{% endblock %}
==================================================

Fichier: templates\admin\ToutesEntreprises\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\admin\ToutesEntreprises\index.html.twig
-----
{# templates/admin/ToutesEntreprises/index.html.twig #}
{% extends 'admin/base-admin.html.twig' %}

{% block title %}Toutes les entreprises{% endblock %}

{% block content %}
    <h1 class="mb-4">Liste de toutes les entreprises</h1>

    <table class="table table-bordered table-striped">
        <thead class="table-dark">
        <tr>
            <th>Nom</th>
            <th>Email</th>
            <th>Statut</th>
            <th>Date d'inscription</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        {% if entreprises|length > 0 %}
            {% for entreprise in entreprises %}
                <tr>
                    <td>{{ entreprise.firstName ?? '-' }}</td>
                    <td>{{ entreprise.email }}</td>
                    <td>
                        {% if entreprise.isApproved %}
                            <span class="badge bg-success">✅ Approuvée</span>
                        {% else %}
                            <span class="badge bg-warning text-dark">⏳ En attente</span>
                        {% endif %}
                    </td>
                    <td>{{ entreprise.createdAt ? entreprise.createdAt|date('d/m/Y') : '-' }}</td>
                    <td>
                        <form action="{{ path('admin_approve_company', {'id': entreprise.id}) }}" method="post" style="display: inline-block; margin-right: 5px;">
                            <button type="submit" class="btn btn-success btn-sm" {% if entreprise.isApproved %}disabled{% endif %}>
                                ✓ Approuver
                            </button>
                        </form>
                        <form action="{{ path('admin_reject_company', {'id': entreprise.id}) }}" method="post" style="display: inline-block;">
                            <button type="submit" class="btn btn-danger btn-sm">
                                × Rejeter
                            </button>
                        </form>
                    </td>
                </tr>
            {% endfor %}
        {% else %}
            <tr><td colspan="5" class="text-center">Aucune entreprise trouvée.</td></tr>
        {% endif %}
        </tbody>
    </table>
{% endblock %}

==================================================

Fichier: templates\api_test\business_card_test.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\api_test\business_card_test.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Test de l'API de Carte de Visite{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .api-test-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .form-section, .result-section {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: inherit;
        }
        .btn-submit {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
        }
        .btn-submit:hover {
            background: #0069d9;
        }
        .result-container {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            background: white;
            min-height: 200px;
        }
        .card-preview {
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 20px;
            background: white;
        }
        .card-preview iframe {
            width: 100%;
            height: 400px;
            border: none;
        }
        .loading {
            text-align: center;
            padding: 20px;
            display: none;
        }
        .loading i {
            font-size: 2rem;
            color: #007bff;
        }
    </style>
{% endblock %}

{% block body %}
<div class="api-test-container">
    <h1>Test de l'API de Carte de Visite</h1>
    
    <div class="form-section">
        <h2>Formulaire de test</h2>
        <form id="businessCardForm">
            <div class="form-group">
                <label for="name">Nom</label>
                <input type="text" id="name" name="name" value="Jean Dupont" required>
            </div>
            
            <div class="form-group">
                <label for="title">Titre</label>
                <input type="text" id="title" name="title" value="Développeur Principal">
            </div>
            
            <div class="form-group">
                <label for="company">Entreprise</label>
                <input type="text" id="company" name="company" value="Tech Solutions Inc." required>
            </div>
            
            <div class="form-group">
                <label for="phone">Téléphone</label>
                <input type="text" id="phone" name="phone" value="+33 6 12 34 56 78">
            </div>
            
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" value="jean.dupont@techsolutions.com">
            </div>
            
            <div class="form-group">
                <label for="website">Site web</label>
                <input type="text" id="website" name="website" value="www.techsolutions.com">
            </div>
            
            <div class="form-group">
                <label for="address">Adresse</label>
                <input type="text" id="address" name="address" value="123 Rue de l'Innovation, 75001 Paris">
            </div>
            
            <div class="form-group">
                <label for="logo_url">URL du logo</label>
                <input type="text" id="logo_url" name="logo_url" value="https://via.placeholder.com/150">
            </div>
            
            <div class="form-group">
                <label for="linkedin">LinkedIn</label>
                <input type="text" id="linkedin" name="linkedin" value="linkedin.com/in/jeandupont">
            </div>
            
            <div class="form-group">
                <label for="twitter">Twitter</label>
                <input type="text" id="twitter" name="twitter" value="@jeandupont_tech">
            </div>
            
            <div class="form-group">
                <label for="template_id">Template</label>
                <select id="template_id" name="template_id">
                    <option value="classic_blue">Classic Blue</option>
                    <option value="modern_minimalist">Modern Minimalist</option>
                    <option value="creative_dark">Creative Dark</option>
                    <option value="ai_generated">AI Generated</option>
                </select>
            </div>
            
            <button type="submit" class="btn-submit">Générer la carte</button>
        </form>
    </div>
    
    <div class="loading">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Génération en cours...</p>
    </div>
    
    <div class="result-section" style="display: none;">
        <h2>Résultat de l'API</h2>
        <div class="result-container">
            <pre id="apiResult"></pre>
        </div>
        
        <div class="card-preview">
            <h3>Aperçu de la carte</h3>
            <iframe id="cardPreview"></iframe>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('businessCardForm');
    const loading = document.querySelector('.loading');
    const resultSection = document.querySelector('.result-section');
    const apiResult = document.getElementById('apiResult');
    const cardPreview = document.getElementById('cardPreview');
    
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Afficher le chargement
        loading.style.display = 'block';
        resultSection.style.display = 'none';
        
        // Récupérer les données du formulaire
        const formData = {
            data: {
                name: document.getElementById('name').value,
                title: document.getElementById('title').value,
                company: document.getElementById('company').value,
                phone: document.getElementById('phone').value,
                email: document.getElementById('email').value,
                website: document.getElementById('website').value,
                address: document.getElementById('address').value,
                logo_url: document.getElementById('logo_url').value,
                social_media: {
                    linkedin: document.getElementById('linkedin').value,
                    twitter: document.getElementById('twitter').value
                }
            },
            template_id: document.getElementById('template_id').value,
            output_format: 'html'
        };
        
        // Envoyer la requête à l'API
        fetch('{{ path('api_businesscard_generate') }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formData)
        })
       
==================================================

Fichier: templates\business_card\classic_blue.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\business_card\classic_blue.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carte de Visite - {{ data.name }}</title>
    <style>
        body { 
            margin: 0; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            background-color: #f0f0f0; 
            font-family: 'Arial', sans-serif;
        }
        .business-card {
            width: 350px;
            height: 200px;
            background-color: white;
            border: 1px solid #ccc;
            border-left: 5px solid #007bff;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            position: relative;
        }
        .header { text-align: left; }
        .header .name { font-size: 1.5em; font-weight: bold; color: #333; }
        .header .title { font-size: 1em; color: #007bff; margin-bottom: 10px; }
        .company { font-size: 1.1em; font-weight: bold; color: #555; margin-bottom: 15px; }
        .contact-info div { margin-bottom: 5px; font-size: 0.9em; color: #444; }
        .contact-info a { color: #007bff; text-decoration: none; }
        .logo { 
            max-width: 60px; 
            max-height: 60px; 
            position: absolute; 
            top: 20px; 
            right: 20px; 
        }
    </style>
</head>
<body>
    <div class="business-card">
        {% if data.logo_url is defined and data.logo_url %}
            <img src="{{ data.logo_url }}" alt="Logo" class="logo">
        {% endif %}
        <div class="header">
            <div class="name">{{ data.name }}</div>
            {% if data.title is defined and data.title %}
                <div class="title">{{ data.title }}</div>
            {% endif %}
        </div>
        <div class="company">{{ data.company }}</div>
        <div class="contact-info">
            {% if data.phone is defined and data.phone %}
                <div><strong>Tél:</strong> {{ data.phone }}</div>
            {% endif %}
            {% if data.email is defined and data.email %}
                <div><strong>Email:</strong> <a href="mailto:{{ data.email }}">{{ data.email }}</a></div>
            {% endif %}
            {% if data.website is defined and data.website %}
                <div><strong>Web:</strong> <a href="http://{{ data.website }}" target="_blank">{{ data.website }}</a></div>
            {% endif %}
            {% if data.address is defined and data.address %}
                <div><strong>Adr:</strong> {{ data.address }}</div>
            {% endif %}
            {% if data.social_media is defined and data.social_media.linkedin is defined %}
                <div><strong>LinkedIn:</strong> <a href="https://{{ data.social_media.linkedin }}" target="_blank">{{ data.social_media.linkedin }}</a></div>
            {% endif %}
            {% if data.social_media is defined and data.social_media.twitter is defined %}
                <div><strong>Twitter:</strong> <a href="https://twitter.com/{{ data.social_media.twitter|replace({'@': ''}) }}" target="_blank">{{ data.social_media.twitter }}</a></div>
            {% endif %}
        </div>
    </div>
</body>
</html>
==================================================

Fichier: templates\business_card\creative_dark.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\business_card\creative_dark.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carte de Visite - {{ data.name }}</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');
        
        body { 
            margin: 0; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            background-color: #121212; 
            font-family: 'Montserrat', sans-serif;
        }
        .business-card {
            width: 350px;
            height: 200px;
            background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
            color: #ffffff;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            border-radius: 10px;
            position: relative;
            overflow: hidden;
        }
        .business-card::before {
            content: '';
            position: absolute;
            top: -50px;
            right: -50px;
            width: 100px;
            height: 100px;
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            border-radius: 50%;
            opacity: 0.6;
        }
        .business-card::after {
            content: '';
            position: absolute;
            bottom: -60px;
            left: -60px;
            width: 120px;
            height: 120px;
            background: linear-gradient(135deg, #4a4a4a, #333333);
            border-radius: 50%;
            opacity: 0.4;
        }
        .content {
            position: relative;
            z-index: 1;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .header {
            margin-bottom: 15px;
        }
        .name {
            font-size: 1.6em;
            font-weight: 700;
            margin-bottom: 5px;
            color: #ffffff;
        }
        .title {
            font-size: 0.9em;
            color: #ff6b6b;
            font-weight: 600;
            letter-spacing: 1px;
        }
        .company {
            font-size: 1.1em;
            font-weight: 600;
            color: #e0e0e0;
            margin-bottom: 15px;
        }
        .contact-info {
            font-size: 0.85em;
            color: #bbbbbb;
        }
        .contact-info div {
            margin-bottom: 5px;
            display: flex;
            align-items: center;
        }
        .contact-info a {
            color: #bbbbbb;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        .contact-info a:hover {
            color: #ff6b6b;
==================================================

Fichier: templates\business_card\modern_minimalist.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\business_card\modern_minimalist.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carte de Visite - {{ data.name }}</title>
    <style>
        body { 
            margin: 0; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            background-color: #e9ecef; 
            font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        }
        .business-card {
            width: 320px;
            height: 180px;
            background-color: #ffffff;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            text-align: center;
        }
        .name { 
            font-size: 1.4em; 
            font-weight: 500; 
            color: #212529; 
            margin-bottom: 4px; 
        }
        .title { 
            font-size: 0.9em; 
            color: #6c757d; 
            margin-bottom: 15px; 
            letter-spacing: 0.5px; 
        }
        .contact-info div { 
            margin-bottom: 3px; 
            font-size: 0.85em; 
            color: #495057; 
        }
        .contact-info a { 
            color: #007bff; 
            text-decoration: none; 
        }
        .contact-info a:hover { 
            text-decoration: underline; 
        }
        .company { 
            font-size: 0.8em; 
            color: #adb5bd; 
            margin-top: 15px; 
        }
    </style>
</head>
<body>
    <div class="business-card">
        <div class="name">{{ data.name }}</div>
        {% if data.title is defined and data.title %}
            <div class="title">{{ data.title }}</div>
        {% endif %}
        <div class="contact-info">
            {% if data.phone is defined and data.phone %}
                <div>{{ data.phone }}</div>
            {% endif %}
            {% if data.email is defined and data.email %}
                <div><a href="mailto:{{ data.email }}">{{ data.email }}</a></div>
            {% endif %}
            {% if data.website is defined and data.website %}
                <div><a href="http://{{ data.website }}" target="_blank">{{ data.website }}</a></div>
            {% endif %}
        </div>
        <div class="company">{{ data.company }}</div>
    </div>
</body>
</html>
==================================================

Fichier: templates\chat\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\chat\index.html.twig
-----
{# templates/chat/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat Application{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        :root {
            --primary-color: #ff4d4d;
            --secondary-color: #e9ecef;
            --text-dark: #212529;
            --text-light: #f8f9fa;
        }
        
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .chat-header {
            background-color: white;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .chat-header h2 {
            margin: 0;
            color: var(--primary-color);
        }
        
        .user-info {
            display: flex;
            align-items: center;
        }
        
        .user-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        #chat-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #f8f9fa;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M30 30 Q50 20 70 30 T90 30' fill='none' stroke='%23e0e0e0' stroke-width='0.5' opacity='0.3'/%3E%3C/svg%3E");
            background-size: 200px 200px;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
            animation: fadeIn 0.3s ease-out;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .user-message {
            background: linear-gradient(135deg, var(--primary-color) 0%, #cc0000 100%);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        .other-message {
            background: var(--secondary-color);
            color: var(--text-dark);
            margin-right: auto;
            border-bottom-left-radius: 4px;
            border: 1px solid #dee2e6;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            margin-bottom: 5px;
        }
        
        .message-sender {
            font-weight: bold;
            font-size: 0.9em;
        }
        
        .user-message .message-sender {
            color: rgba(255,255,255,0.9);
        }
        
        .other-message .message-sender {
            color: var(--primary-color);
        }
        
        .message-time {
            font-size: 0.75em;
            opacity: 0.7;
            margin-left: 10px;
        }
        
        .message-content {
            word-wrap: break-word;
            line-height: 1.4;
        }
        
        .voice-message {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        
        .voice-message button {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
            margin-right: 10px;
            color: inherit;
        }
        
        .voice-wave {
            display: inline-block;
            letter-spacing: 1px;
            color: currentColor;
        }
        
        .chat-footer {
            background-color: white;
            padding: 15px;
            border-top: 1px solid #eee;
        }
        
        .message-form {
            display: flex;
            align-items: center;
        }
        
        #message-form textarea {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ced4da;
            border-radius: 20px;
            margin-right: 10px;
            font-size: 1em;
            outline: none;
            transition: all 0.3s;
            resize: none;
            height: 45px;
            max-height: 120px;
        }
        
        #message-form textarea:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(255,77,77,0.25);
        }
        
        #record-button {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-right: 10px;
            transition: all 0.3s;
        }
        
        #record-button:hover {
            transform: scale(1.05);
        }
        
        #record-button.recording {
            animation: pulse 1.5s infinite;
        }
        
        #send-button {
            background: linear-gradient(135deg, var(--primary-color) 0%, #cc0000 100%);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        #send-button:hover {
            background: linear-gradient(135deg, #e60000 0%, #b30000 100%);
            transform: translateY(-2px);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .chat-container {
                height: 100vh;
                max-width: 100%;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-header">
        <h2>Chat Application</h2>
        <div class="user-info">
            <img src="{{ asset('images/default-avatar.png') }}" alt="User Avatar">
            <span>{{ app.user.username }}</span>
        </div>
    </div>
    
    <div id="chat-area">
        {% for message in messages|reverse %}
            <div class="message {% if message.sender == app.user.username %}user-message{% else %}other-message{% endif %}" data-id="{{ message.id }}">
                <div class="message-header">
                    <span class="message-sender">{{ message.sender }}</span>
                    <span class="message-time">{{ message.createdAt|date('H:i') }}</span>
                </div>
                <div class="message-content">
                    {% if message.isVoiceMessage() %}
                        <div class="voice-message" onclick="playVoiceMessage('{{ message.voiceFilePath }}')">
                            <button>▶</button>
                            <span class="voice-wave">⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯</span>
                        </div>
                    {% else %}
                        {{ message.content }}
                    {% endif %}
                </div>
            </div>
        {% endfor %}
    </div>
    
    <div class="chat-footer">
        {{ form_start(form, {
            'attr': {
                'id': 'message-form',
                'class': 'message-form',
                'enctype': 'multipart/form-data'
            }
        }) }}
            <button type="button" id="record-button" title="Enregistrer un message vocal">
                <i class="fas fa-microphone"></i>
            </button>
            {{ form_widget(form.content, {
                'attr': {
                    'id': 'message-input',
                    'placeholder': 'Tapez votre message...'
                }
            }) }}
            {{ form_widget(form.voiceFile, {
                'attr': {
                    'id': 'voice-input',
                    'class': 'd-none'
                }
            }) }}
            <button type="submit" id="send-button">Envoyer</button>
        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatArea = document.getElementById('chat-area');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const recordButton = document.getElementById('record-button');
            const voiceInput = document.getElementById('voice-input');
            
            let mediaRecorder;
            let audioChunks = [];
            let isRecording = false;
            let audioContext;
            let audioBufferSource;
            
            // Initial scroll to bottom
            chatArea.scrollTop = chatArea.scrollHeight;
            
            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
            
            // Handle form submission
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                
                fetch('{{ path('chat_api_send') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        addMessageToChat(data.message);
                        messageForm.reset();
                        messageInput.style.height = '45px';
                        chatArea.scrollTop = chatArea.scrollHeight;
                    }
                })
                .catch(error => console.error('Error:', error));
            });
            
            // Handle voice recording
            recordButton.addEventListener('click', async function() {
                if (!isRecording) {
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];
                        
                        mediaRecorder.ondataavailable = event => {
                            audioChunks.push(event.data);
                        };
                        
                        mediaRecorder.onstop = async () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                            const audioFile = new File([audioBlob], 'recording.wav', { type: 'audio/wav' });
                            
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(audioFile);
                            voiceInput.files = dataTransfer.files;
                            
                            // Trigger form submission
                            messageForm.dispatchEvent(new Event('submit'));
                        };
                        
                        mediaRecorder.start();
                        isRecording = true;
                        recordButton.classList.add('recording');
                        recordButton.innerHTML = '<i class="fas fa-stop"></i>';
                        
                    } catch (error) {
                        console.error('Error accessing microphone:', error);
                        alert('Microphone access denied. Please allow microphone access to send voice messages.');
                    }
                } else {
                    mediaRecorder.stop();
                    mediaRecorder.stream.getTracks().forEach(track => track.stop());
                    isRecording = false;
                    recordButton.classList.remove('recording');
                    recordButton.innerHTML = '<i class="fas fa-microphone"></i>';
                }
            });
            
            // Play voice message
            window.playVoiceMessage = function(filename) {
                if (audioBufferSource) {
                    audioBufferSource.stop();
                }
                
                audioContext = audioContext || new (window.AudioContext || window.webkitAudioContext)();
                
                fetch('{{ path('chat_play_voice', {'filename': 'FILE_PLACEHOLDER'}) }}'.replace('FILE_PLACEHOLDER', filename))
                    .then(response => response.arrayBuffer())
                    .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
                    .then(audioBuffer => {
                        audioBufferSource
==================================================

Fichier: templates\chatbot\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\chatbot\index.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chatbot Esprit - Esprit</title>
  
  <!-- Favicons -->
  <link href="/img/favicon.png" rel="icon">
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600&display=swap" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  
  <style>
    :root {
      --primary-red: #d62828;
      --dark-red: #ba181b;
      --light-red: #ff6b6b;
      --gray-100: #f8f9fa;
      --gray-200: #e9ecef;
      --gray-300: #dee2e6;
      --gray-500: #adb5bd;
      --gray-700: #495057;
      --gray-900: #212529;
      --sidebar-width: 280px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--gray-100);
      color: var(--gray-900);
      overflow-x: hidden;
      height: 100vh;
    }

    /* Layout Structure */
    .chat-app-container {
      display: flex;
      height: 100vh;
    }

    /* Sidebar Historique */
    .chat-history-sidebar {
      width: var(--sidebar-width);
      background-color: white;
      border-right: 1px solid var(--gray-300);
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 100;
      box-shadow: 2px 0 10px rgba(0,0,0,0.05);
      display: flex;
      flex-direction: column;
    }

    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--gray-200);
    }

    .sidebar-header h4 {
      color: var(--gray-900);
      font-size: 1.25rem;
      margin-bottom: 1rem;
    }

    .btn-new-chat {
      background: var(--primary-red);
      color: white;
      border: none;
      padding: 0.75rem 1rem;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s;
      width: 100%;
    }

    .btn-new-chat:hover {
      background: var(--dark-red);
      transform: translateY(-2px);
    }

    .history-list {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
    }

    .history-item {
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 0.75rem;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
    }

    .history-item:hover {
      background-color: var(--gray-100);
    }

    .history-item.active {
      background-color: rgba(214, 40, 40, 0.1);
      border-left: 3px solid var(--primary-red);
    }

    .history-item.active::after {
      content: '';
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      width: 8px;
      height: 8px;
      background-color: var(--primary-red);
      border-radius: 50%;
    }

    .history-preview {
      font-size: 0.95rem;
      color: var(--gray-900);
      margin-bottom: 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .history-time {
      font-size: 0.8rem;
      color: var(--gray-500);
    }

    /* Main Chat Area */
    .main-chat-area {
      flex: 1;
      margin-left: var(--sidebar-width);
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Chat Header */
    .chat-header {
      padding: 1.25rem 2rem;
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      display: flex;
      align-items: center;
      gap: 1.5rem;
      position: sticky;
      top: 0;
      z-index: 90;
    }

    .chatbot-avatar {
      width: 42px;
      height: 42px;
      background-color: rgba(255,255,255,0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.25rem;
    }

    .chat-title {
      flex: 1;
    }

    .chat-title h3 {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 600;
    }

    .chat-title small {
      font-size: 0.85rem;
      opacity: 0.9;
    }

    .status-indicator {
      position: relative;
      width: 14px;
      height: 14px;
      border-radius: 50%;
      background-color: #4ade80;
    }

    .status-indicator::after {
      content: '';
      position: absolute;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background-color: rgba(74, 222, 128, 0.3);
      top: -2px;
      left: -2px;
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(0.8); opacity: 1; }
      100% { transform: scale(1.5); opacity: 0; }
    }

    /* Messages Container */
    .chat-messages-container {
      flex: 1;
      padding: 2rem;
      overflow-y: auto;
      background-color: var(--gray-100);
      background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23e9ecef' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
    }

    /* Messages */
    .message-container {
      margin-bottom: 1.5rem;
      animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .chat-message {
      max-width: 75%;
      padding: 1rem 1.25rem;
      border-radius: 12px;
      font-size: 0.95rem;
      line-height: 1.5;
      word-wrap: break-word;
      position: relative;
      box-shadow: 0 2px 12px rgba(0,0,0,0.08);
    }

    .user {
      margin-left: auto;
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      border-bottom-right-radius: 4px;
    }

    .bot {
      margin-right: auto;
      background-color: white;
      color: var(--gray-900);
      border-bottom-left-radius: 4px;
      border-left: 3px solid var(--primary-red);
    }

    .chat-content {
      font-family: inherit;
    }

    .chat-content strong {
      font-weight: 600;
      color: var(--primary-red);
    }

    .chat-content em {
      font-style: italic;
    }

    .chat-content ul, .chat-content ol {
      padding-left: 1.5rem;
      margin: 0.5rem 0;
    }

    .chat-meta {
      font-size: 0.75rem;
      margin-top: 0.5rem;
      text-align: right;
    }

    .user .chat-meta {
      color: rgba(255,255,255,0.7);
    }

    .bot .chat-meta {
      color: var(--gray-500);
    }

    /* Input Area */
    .chat-input-area {
      padding: 1.5rem;
      background-color: white;
      border-top: 1px solid var(--gray-200);
      position: sticky;
      bottom: 0;
    }

    .input-group {
      border-radius: 24px;
      overflow: hidden;
      border: 1px solid var(--gray-200);
      transition: all 0.3s;
      display: flex;
    }

    .input-group:focus-within {
      border-color: var(--primary-red);
      box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.1);
    }

    #message-input {
      flex: 1;
      border: none;
      padding: 0.75rem 1.25rem;
      font-size: 0.95rem;
    }

    #message-input:focus {
      outline: none;
    }

    .btn-send {
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      border: none;
      padding: 0 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s;
      cursor: pointer;
    }

    .btn-send:hover {
      background: linear-gradient(135deg, var(--dark-red), #a31515);
    }

    .btn-send .send-text {
      font-size: 0.95rem;
    }

    .btn-send .send-icon {
      display: none;
    }

    .input-footer {
      text-align: center;
      margin-top: 0.75rem;
    }

    .input-footer small {
      color: var(--gray-500);
      font-size: 0.8rem;
    }

    /* Typing indicator */
    .typing-indicator {
      display: inline-block;
      padding: 0.75rem 1.25rem;
      background: white;
      border-radius: 12px;
      margin-bottom: 1rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .typing-indicator span {
      height: 8px;
      width: 8px;
      background: var(--primary-red);
      border-radius: 50%;
      display: inline-block;
      margin: 0 2px;
      animation: bounce 1.5s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(2) {
      animation-delay: 0.2s;
    }

    .typing-indicator span:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes bounce {
      0%, 60%, 100% { transform: translateY(0); }
      30% { transform: translateY(-5px); }
    }

    /* Responsive Design */
    @media (max-width: 992px) {
      .chat-history-sidebar {
        transform: translateX(-100%);
        transition: transform 0.3s ease;
      }

      .chat-history-sidebar.active {
        transform: translateX(0);
      }

      .main-chat-area {
        margin-left: 0;
      }

      .btn-toggle-sidebar {
        display: block;
        background: none;
        border: none;
        color: white;
        font-size: 1.25rem;
        cursor: pointer;
      }

      .btn-send .send-text {
        display: none;
      }

      .btn-send .send-icon {
        display: block;
      }
    }

    @media (max-width: 576px) {
      .chat-message {
        max-width: 85%;
      }

      .chat-header {
        padding: 1rem;
      }

      .chat-messages-container {
        padding: 1.5rem;
      }

      .chat-input-area {
        padding: 1rem;
      }
    }

    /* Styles pour l'indicateur de frappe */
    .typing-indicator {
      display: flex;
      align-items: center;
    }
    
    .typing-indicator span {
      height: 8px;
      width: 8px;
      float: left;
      margin: 0 1px;
      background-color: #9E9EA1;
      display: block;
      border-radius: 50%;
      opacity: 0.4;
    }
    
    .typing-indicator span:nth-of-type(1) {
      animation: 1s blink infinite 0.3333s;
    }
    
    .typing-indicator span:nth-of-type(2) {
      animation: 1s blink infinite 0.6666s;
    }
    
    .typing-indicator span:nth-of-type(3) {
      animation: 1s blink infinite 0.9999s;
    }
    
    @keyframes blink {
      50% {
        opacity: 1;
      }
    }
    
    /* Style pour les messages d'erreur */
    .chat-message.error .chat-content {
      background-color: #ffebee;
      color: #c62828;
    }
  </style>
</head>
<body>
  <!-- Chat App Container -->
  <div class="chat-app-container">
    <!-- Sidebar Historique -->
    <div class="chat-history-sidebar">
      <div class="sidebar-header">
        <h4>Historique des discussions</h4>
        <button class="btn-new-chat">
          <i class="fas fa-plus"></i> Nouvelle discussion
        </button>
      </div>
      <div class="history-list">
        <div class="history-item active">
          <div class="history-preview">Discussion actuelle</div>
          <div class="history-time">Aujourd'hui, {{ "now"|date("H:i") }}</div>
        </div>
        <div class="history-item">
          <div class="history-preview">Conseils pour entretien d'embauche</div>
          <div class="history-time">Hier, 14:30</div>
        </div>
        <div class="history-item">
          <div class="history-preview">Offres d'emploi en développement</div>
          <div class="history-time">Lundi, 09:45</div>
        </div>
      </div>
    </div>

    <!-- Main Chat Area -->
    <div class="main-chat-area">
      <!-- Chat Header -->
      <div class="chat-header">
        <button class="btn-toggle-sidebar">
          <i class="fas fa-history"></i>
        </button>
        <div class="chatbot-avatar">
          <i class="fas fa-robot"></i>
        </div>
        <div class="chat-title">
          <h3>Assistant Esprit</h3>
          <small>Spécialiste emploi & carrière</small>
        </div>
        <div class="status-indicator"></div>
      </div>

      <!-- Messages Container -->
      <div id="chat-area" class="chat-messages-container">
        <div class="message-container">
          <div class="chat-message bot">
            <div class="chat-content">{{ welcomeMessage }}</div>
            <div class="chat-meta">{{ "now"|date("H:i") }}</div>
          </div>
        </div>
      </div>

      <!-- Input Area -->
      <div class="chat-input-area">
        <div class="input-group">
          <input type="text" id="message-input" class="form-control" 
                 placeholder="Posez votre question sur les emplois, stages ou entretiens..." autocomplete="off">
          <button type="button" class="btn btn-send" id="send-button">
            <span class="send-text">Envoyer</span>
            <span class="spinner-border spinner-border-sm d-none" id="spinner"></span>
            <i class="fas fa-paper-plane send-icon"></i>
          </button>
        </div>
        <div class="input-footer">
          <small>Tchala répond uniquement aux questions professionnelles</small>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.clear(); // Nettoyer la console pour mieux voir nos logs
      console.log('DOM chargé, initialisation du chatbot...');
      
      // Récupération des éléments DOM
      const chatArea = document.getElementById('chat-area');
      const input = document.getElementById('message-input');
      const button = document.getElementById('send-button');
      
      console.log('Éléments trouvés:', {
        chatArea: !!chatArea,
        input: !!input,
        button: !!button
      });
      
      if (!button) {
        console.error('ERREUR: Le bouton d\'envoi n\'a pas été trouvé!');
        return; // Arrêter l'exécution si le bouton n'est pas trouvé
      }
      
      // Fonction pour envoyer un message
      function sendMessage() {
        console.log('Fonction sendMessage appelée');
        const message = input.value.trim();
        
        if (!message) {
          console.log('Message vide, abandon');
          return;
        }
        
        console.log('Message à envoyer:', message);
        
        // Ajouter le message de l'utilisateur au chat
        const userMessageContainer = document.createElement('div');
        userMessageContainer.className = 'message-container';
        
        const userBubble = document.createElement('div');
        userBubble.className = 'chat-message user';
        
        const userContent = document.createElement('div');
        userContent.className = 'chat-content';
        userContent.textContent = message;
        
        const userMeta = document.createElement('div');
        userMeta.className = 'chat-meta';
        userMeta.textContent = 'Vous • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        
        userBubble.appendChild(userContent);
        userBubble.appendChild(userMeta);
        userMessageContainer.appendChild(userBubble);
        chatArea.appendChild(userMessageContainer);
        
        // Vider le champ de texte
        input.value = '';
        
        // Afficher l'indicateur de chargement
        const loadingContainer = document.createElement('div');
        loadingContainer.className = 'message-container';
        loadingContainer.id = 'loading-indicator';
        
        const loadingBubble = document.createElement('div');
        loadingBubble.className = 'chat-message bot';
        
        const loadingContent = document.createElement('div');
        loadingContent.className = 'chat-content typing-indicator';
        loadingContent.innerHTML = '<span></span><span></span><span></span>';
        
        loadingBubble.appendChild(loadingContent);
        loadingContainer.appendChild(loadingBubble);
        chatArea.appendChild(loadingContainer);
        
        // Faire défiler vers le bas
        chatArea.scrollTop = chatArea.scrollHeight;
        
        // Désactiver le bouton pendant l'envoi
        button.disabled = true;
        
        // Envoyer la requête au serveur
        fetch('{{ path('chatbot_send') }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({ message: message })
        })
        .then(response => {
          console.log('Réponse reçue, statut:', response.status);
          if (!response.ok) {
            throw new Error('Erreur serveur: ' + response.status);
          }
          return response.json();
        })
        .then(data => {
          console.log('Données reçues:', data);
          
          // Supprimer l'indicateur de chargement
          const loadingIndicator = document.getElementById('loading-indicator');
          if (loadingIndicator) {
            loadingIndicator.remove();
          }
          
          // Ajouter la réponse du bot
          const botMessageContainer = document.createElement('div');
          botMessageContainer.className = 'message-container';
          
          const botBubble = document.createElement('div');
          botBubble.className = 'chat-message bot';
          
          const botContent = document.createElement('div');
          botContent.className = 'chat-content';
          
          if (data.response) {
            botContent.innerHTML = data.response;
          } else if (data.error) {
            botContent.textContent = data.error;
          } else {
            botContent.textContent = 'Réponse vide reçue du serveur.';
          }
          
          const botMeta = document.createElement('div');
          botMeta.className = 'chat-meta';
          botMeta.textContent = 'Tchala • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
          
          botBubble.appendChild(botContent);
          botBubble.appendChild(botMeta);
          botMessageContainer.appendChild(botBubble);
          chatArea.appendChild(botMessageContainer);
          
          // Faire défiler vers le bas
          chatArea.scrollTop = chatArea.scrollHeight;
        })
        .catch(error => {
          console.error('Erreur:', error);
          
          // Supprimer l'indicateur de chargement
          const loadingIndicator = document.getElementById('loading-indicator');
          if (loadingIndicator) {
            loadingIndicator.remove();
          }
          
          // Afficher un message d'erreur
          const errorMessageContainer = document.createElement('div');
          errorMessageContainer.className = 'message-container';
          
          const errorBubble = document.createElement('div');
          errorBubble.className = 'chat-message bot error';
          
          const errorContent = document.createElement('div');
          errorContent.className = 'chat-content';
          errorContent.textContent = 'Erreur de connexion: ' + error.message + '. Veuillez réessayer.';
          
          const errorMeta = document.createElement('div');
          errorMeta.className = 'chat-meta';
          errorMeta.textContent = 'Système • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
          
          errorBubble.appendChild(errorContent);
          errorBubble.appendChild(errorMeta);
          errorMessageContainer.appendChild(errorBubble);
          chatArea.appendChild(errorMessageContainer);
          
          // Faire défiler vers le bas
          chatArea.scrollTop = chatArea.scrollHeight;
        })
        .finally(() => {
          // Réactiver le bouton
          button.disabled = false;
          // Remettre le focus sur le champ de texte
          input.focus();
        });
      }
      
      // Attacher les événements
      console.log('Attachement des événements...');
      
      // 1. Événement de clic sur le bouton
      button.addEventListener('click', function(e) {
        console.log('Bouton cliqué!');
        e.preventDefault();
        sendMessage();
      });
      
      // 2. Événement de touche Entrée dans le champ de texte
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          console.log('Touche Entrée pressée!');
          e.preventDefault();
          sendMessage();
        }
      });
      
      // Test pour vérifier si les événements sont bien attachés
      console.log('Test des événements:');
      console.log('- Le bouton a-t-il un gestionnaire de clic?', button.onclick !== null || button._events);
      
      // Focus sur le champ de texte au chargement
      input.focus();
      
      console.log('Initialisation du chatbot terminée!');
    });
  </script>
</body>
</html>


==================================================

Fichier: templates\conversation\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\conversation\index.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Mes conversations{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --dark-gray: #660708;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: var(--transition);
        }

        .profile-img:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
            background-color: rgba(255, 255, 255, 0.05);
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 1.5rem 0;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.8rem;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        /* Conversation Cards */
        .conversations-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .conversation-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            opacity: 0;
            transform: translateY(20px);
            position: relative;
            overflow: hidden;
        }

        .conversation-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
            transition: var(--transition);
        }

        .conversation-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .conversation-card:hover::before {
            width: 6px;
            background: var(--accent-color);
        }

        .conversation-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            align-items: center;
        }

        .conversation-participants {
            font-weight: 600;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .conversation-participants i {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        .conversation-date {
            color: var(--medium-gray);
            font-size: 0.8rem;
            background: rgba(214, 40, 40, 0.1);
            padding: 0.3rem 0.6rem;
            border-radius: 20px;
        }

        .conversation-preview {
            color: var(--dark);
            margin-bottom: 0.5rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-unread {
            position: absolute;
            top: 15px;
            right: 15px;
            width: 12px;
            height: 12px;
            background-color: var(--accent-color);
            border-radius: 50%;
        }

        .no-conversations {
            background: var(--white);
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            box-shadow: var(--shadow);
            grid-column: 1 / -1;
        }

        .no-conversations i {
            font-size: 3rem;
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            opacity: 0.7;
        }

        .no-conversations h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .no-conversations p {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-new-conversation {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-new-conversation:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 80px;
                height: 80px;
            }
        }

        @media (max-width: 768px) {
            .conversations-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item active">
                <i class="fas fa-envelope"></i> Messages
                {% if stats is defined and stats.messages > 0 %}
                    <span class="badge">{{ stats.messages }}</span>
                {% endif %}
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="section-title">
            <i class="fas fa-comments"></i> Mes conversations
        </h1>
        
        <a href="{{ path('conversation_new') }}" class="btn-new-conversation">
            <i class="fas fa-plus"></i> Nouvelle conversation
        </a>

        <!-- Formulaire de recherche -->
        <form action="{{ path('conversation_search') }}" method="GET" class="search-form">
            <input type="text" name="q" placeholder="Rechercher une conversation" value="{{ search_query|default('') }}">
            <button type="submit" class="btn btn-primary">Rechercher</button>
        </form>

        {% if search_query is defined and search_query %}
            <div class="search-results-header">
                <h3>Résultats pour "{{ search_query }}"</h3>
                <a href="{{ path('conversation_index') }}" class="btn btn-sm btn-outline-secondary">Réinitialiser</a>
            </div>
            
            {% if conversations|length > 0 %}
                <div class="search-results-count">{{ conversations|length }} conversation(s) trouvée(s)</div>
            {% else %}
                <div class="search-results-empty">Aucune conversation trouvée pour "{{ search_query }}"</div>
            {% endif %}
        {% endif %}

        {% if conversations is defined and conversations|length > 0 %}
            <div class="conversation-list">
                {% for conversation in conversations %}
                    <div class="conversation-item">
                        <div class="conversation-header">
                            <h4>{{ conversation.title }}</h4>
                            <small>Dernière mise à jour: {{ conversation.updatedAt|date('d/m/Y H:i') }}</small>
                        </div>
                        
                        {% if search_query is defined and search_query and matching_messages[conversation.id] is defined and matching_messages[conversation.id]|length > 0 %}
                            <div class="matching-messages">
                                <h5>Messages correspondants:</h5>
                                <ul class="message-list">
                                    {% for message in matching_messages[conversation.id] %}
                                        <li class="message-item">
                                            <div class="message-sender">{{ message.sender.username }}</div>
                                            <div class="message-content">{{ message.content }}</div>
                                            <div class="message-date">{{ message.createdAt|date('d/m/Y H:i') }}</div>
                                        </li>
                                    {% endfor %}
                                </ul>
                            </div>
                        {% endif %}
                        
                        <div class="conversation-actions">
                            <a href="{{ path('conversation_show', {'id': conversation.id}) }}" class="btn btn-sm btn-primary">
                                Voir la conversation
                            </a>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="no-conversations">
                {% if search_query is defined and search_query %}
                    Aucune conversation ne correspond à votre recherche "{{ search_query }}".
                {% else %}
                    Vous n'avez pas encore de conversations.
                {% endif %}
            </div>
        {% endif %}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Fonction pour animer les cartes
        function animateCards() {
            const cards = document.querySelectorAll('.conversation-card:not(.show)');
            
            cards.forEach((card, index) => {
                const cardPosition = card.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(cardPosition < screenPosition) {
                    setTimeout(() => {
                        card.classList.add('show');
                    }, index * 100);
                }
            });
        }

        // Trigger animations
        window.addEventListener('load', animateCards);
        window.addEventListener('scroll', animateCards);

        // Real-time updates for unread count - using polling instead of Mercure
        function updateUnreadCount() {
            fetch('{{ path('conversation_unread_count') }}')
                .then(response => response.json())
                .then(data => {
                    const badge = document.querySelector('.nav-item.active .badge');
                    if (data.count > 0) {
                        if (!badge) {
                            const navItem = document.querySelector('.nav-item.active');
                            const newBadge = document.createElement('span');
                            newBadge.className = 'badge';
                            newBadge.textContent = data.count;
                            navItem.appendChild(newBadge);
                        } else {
                            badge.textContent = data.count;
                        }
                    } else if (badge) {
                        badge.remove();
                    }
                });
        }
        
        // Check for new messages every 30 seconds
        setInterval(updateUnreadCount, 30000);
        // Initial check
        updateUnreadCount();
    });
</script>
</body>
</html>

































==================================================

Fichier: templates\conversation\new.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\conversation\new.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Mes conversations{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --dark-gray: #660708;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: var(--transition);
        }

        .profile-img:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
            background-color: rgba(255, 255, 255, 0.05);
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .section-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin: 1.5rem 0;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.8rem;
            position: relative;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 60px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        /* Conversation Cards */
        .conversations-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .conversation-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            opacity: 0;
            transform: translateY(20px);
            position: relative;
            overflow: hidden;
        }

        .conversation-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 4px;
            height: 100%;
            background: var(--primary-color);
            transition: var(--transition);
        }

        .conversation-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .conversation-card:hover::before {
            width: 6px;
            background: var(--accent-color);
        }

        .conversation-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            align-items: center;
        }

        .conversation-participants {
            font-weight: 600;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .conversation-participants i {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        .conversation-date {
            color: var(--medium-gray);
            font-size: 0.8rem;
            background: rgba(214, 40, 40, 0.1);
            padding: 0.3rem 0.6rem;
            border-radius: 20px;
        }

        .conversation-preview {
            color: var(--dark);
            margin-bottom: 0.5rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-unread {
            position: absolute;
            top: 15px;
            right: 15px;
            width: 12px;
            height: 12px;
            background-color: var(--accent-color);
            border-radius: 50%;
        }

        .no-conversations {
            background: var(--white);
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            box-shadow: var(--shadow);
            grid-column: 1 / -1;
        }

        .no-conversations i {
            font-size: 3rem;
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            opacity: 0.7;
        }

        .no-conversations h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .no-conversations p {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-new-conversation {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-new-conversation:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
            background: linear-gradient(135deg, var(--secondary-color), var(--primary-color));
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 80px;
                height: 80px;
            }
        }

        @media (max-width: 768px) {
            .conversations-grid {
                grid-template-columns: 1fr;
            }
        }

        /* Styles pour le formulaire de nouvelle conversation */
        .card {
            background: var(--white);
            border-radius: 12px;
            box-shadow: var(--shadow);
            margin-top: 2rem;
            border: none;
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border-radius: 12px 12px 0 0 !important;
            padding: 1.2rem 1.5rem;
        }
        
        .card-header h3 {
            margin: 0;
            font-size: 1.4rem;
            font-weight: 600;
        }
        
        .card-body {
            padding: 2rem;
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-control {
            border-radius: 8px;
            border: 1px solid rgba(0, 0, 0, 0.1);
            padding: 0.8rem 1rem;
            transition: var(--transition);
        }
        
        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(214, 40, 40, 0.25);
        }
        
        .participants-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 0.8rem;
            max-height: 200px;
            overflow-y: auto;
            padding: 1rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }
        
        .participant-checkbox {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-outline-secondary {
            color: var(--dark);
            border: 1px solid var(--medium-gray);
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-outline-secondary:hover {
            background-color: var(--light-gray);
        }
        
        .ml-2 {
            margin-left: 0.5rem;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item active">
                <i class="fas fa-envelope"></i> Messages
                {% if stats is defined and stats.messages > 0 %}
                    <span class="badge">{{ stats.messages }}</span>
                {% endif %}
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="section-title">
            <i class="fas fa-comments"></i> Nouvelle conversation
        </h1>
        
        <div class="card">
            <div class="card-header">
                <h3>Créer une nouvelle conversation</h3>
            </div>
            <div class="card-body">
                <form method="post" action="{{ path('conversation_new') }}">
                    <div class="form-group">
                        <label for="title">Sujet de la conversation</label>
                        <input type="text" id="title" name="title" class="form-control" required>
                    </div>
                    
                    <div class="form-group mt-3">
                        <label>Participants (Chercheurs d'emploi)</label>
                        <div class="participants-container">
                            {% for user in users %}
                                <div class="participant-checkbox">
                                    <input type="checkbox" id="participant-{{ user.id }}" name="participants[]" value="{{ user.id }}">
                                    <label for="participant-{{ user.id }}">{{ user.username }}</label>
                                </div>
                            {% else %}
                                <p class="text-muted">Aucun autre chercheur d'emploi disponible.</p>
                            {% endfor %}
                        </div>
                        <small class="form-text text-muted">Sélectionnez les chercheurs d'emploi avec qui vous souhaitez discuter.</small>
                    </div>
                    
                    <div class="form-group mt-3">
                        <label for="initial_message">Message initial</label>
                        <textarea id="initial_message" name="initial_message" class="form-control" rows="4" required></textarea>
                        <small class="form-text text-muted">Ce message sera envoyé à tous les participants de la conversation.</small>
                    </div>
                    
                    <div class="form-group mt-4">
                        <button type="submit" class="btn-new-conversation">
                            <i class="fas fa-paper-plane"></i> Créer la conversation
                        </button>
                        <a href="{{ path('conversation_index') }}" class="btn btn-outline-secondary ml-2">
                            Annuler
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Fonction pour animer les cartes
        function animateCards() {
            const cards = document.querySelectorAll('.user-card:not(.show)');
            
            cards.forEach((card, index) => {
                const cardPosition = card.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(cardPosition < screenPosition) {
                    setTimeout(() => {
                        card.classList.add('show');
                    }, index * 100);
                }
            });
        }

        // Trigger animations
        window.addEventListener('load', animateCards);
        window.addEventListener('scroll', animateCards);

        // Real-time updates for unread count
        function updateUnreadCount() {
            fetch('{{ path('conversation_unread_count') }}')
                .then(response => response.json())
                .then(data => {
                    const badge = document.querySelector('.nav-item.active .badge');
                    if (data.count > 0) {
                        if (!badge) {
                            const navItem = document.querySelector('.nav-item.active');
                            const newBadge = document.createElement('span');
                            newBadge.className = 'badge';
                            newBadge.textContent = data.count;
                            navItem.appendChild(newBadge);
                        } else {
                            badge.textContent = data.count;
                        }
                    } else if (badge) {
                        badge.remove();
                    }
                });
        }
        
        // Check for new messages every 30 seconds
        setInterval(updateUnreadCount, 30000);
        // Initial check
        updateUnreadCount();
    });
</script>
</body>
</html>

==================================================

Fichier: templates\conversation\show.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\conversation\show.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    {% set otherParticipants = conversation.participants|filter(p => p != app.user) %}
    <title>Conversation avec {{ otherParticipants|map(p => p.username)|join(', ') }}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --light-gray: #e9ecef;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--white);
            overflow: hidden;
        }

        /* Conversation Header */
        .conversation-header {
            padding: 1.5rem 2rem;
            background-color: var(--white);
            border-bottom: 1px solid var(--light-gray);
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            z-index: 10;
        }

        .conversation-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
        }

        .conversation-title i {
            color: var(--primary-color);
            margin-right: 10px;
            font-size: 1.2rem;
        }

        .conversation-actions {
            display: flex;
            gap: 10px;
        }

        .action-button {
            background: none;
            border: none;
            color: var(--medium-gray);
            font-size: 1.2rem;
            cursor: pointer;
            transition: var(--transition);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .action-button:hover {
            color: var(--primary-color);
            background-color: var(--light-color);
        }

        /* Messages Container */
        .messages-container {
            flex: 1;
            padding: 1.5rem 2rem;
            overflow-y: auto;
            background-color: var(--light-color);
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            max-width: 70%;
            padding: 1rem;
            border-radius: 15px;
            position: relative;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message-sent {
            align-self: flex-end;
            background-color: var(--primary-color);
            color: var(--white);
            border-bottom-right-radius: 5px;
        }

        .message-received {
            align-self: flex-start;
            background-color: var(--white);
            color: var(--dark);
            border-bottom-left-radius: 5px;
            box-shadow: var(--shadow);
        }

        .message-content {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }

        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.75rem;
            opacity: 0.8;
        }

        .message-time {
            margin-left: auto;
        }

        .message-status {
            margin-left: 5px;
        }

        .message-sender {
            font-weight: 600;
            margin-bottom: 0.3rem;
        }

        .date-divider {
            text-align: center;
            margin: 1rem 0;
            position: relative;
        }

        .date-divider span {
            background-color: var(--light-color);
            padding: 0 10px;
            font-size: 0.8rem;
            color: var(--medium-gray);
            position: relative;
            z-index: 1;
        }

        .date-divider::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 1px;
            background-color: var(--light-gray);
            z-index: 0;
        }

        /* Message Form */
        .message-form-container {
            padding: 1.5rem 2rem;
            background-color: var(--white);
            border-top: 1px solid var(--light-gray);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        .message-form {
            display: flex;
            gap: 10px;
        }

        .message-input {
            flex: 1;
            border: 1px solid var(--light-gray);
            border-radius: 25px;
            padding: 0.8rem 1.2rem;
            font-family: 'Poppins', sans-serif;
            resize: none;
            outline: none;
            transition: var(--transition);
            max-height: 120px;
            overflow-y: auto;
        }

        .message-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.1);
        }

        .send-button {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
            align-self: flex-end;
        }

        .send-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        .send-button i {
            font-size: 1.2rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                max-height: 200px;
                overflow-y: auto;
                padding: 1rem;
            }
            
            .profile-section {
                display: flex;
                align-items: center;
                text-align: left;
                margin-bottom: 1rem;
            }
            
            .profile-img {
                width: 60px;
                height: 60px;
                margin-right: 1rem;
                margin-bottom: 0;
            }
            
            .nav-menu {
                display: flex;
                overflow-x: auto;
                margin-top: 1rem;
                padding-bottom: 0.5rem;
            }
            
            .nav-item {
                white-space: nowrap;
                margin-right: 0.5rem;
                margin-bottom: 0;
            }
            
            .message {
                max-width: 85%;
            }
        }

        @media (max-width: 576px) {
            .conversation-header {
                padding: 1rem;
            }
            
            .messages-container {
                padding: 1rem;
            }
            
            .message-form-container {
                padding: 1rem;
            }
            
            .conversation-title {
                font-size: 1.2rem;
            }
            
            .message {
                max-width: 90%;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Profile
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Jobs
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item active">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <!-- Conversation Header -->
        <div class="conversation-header">
            <h2 class="conversation-title">
                <i class="fas fa-comments"></i>
                {% set otherParticipants = conversation.participants|filter(p => p != app.user) %}
                {{ otherParticipants|map(p => p.username)|join(', ') }}
            </h2>
            <div class="conversation-actions">
                <button class="action-button" title="Rechercher">
                    <i class="fas fa-search"></i>
                </button>
                <button class="action-button" title="Informations">
                    <i class="fas fa-info-circle"></i>
                </button>
                <button class="action-button" title="Plus d'options">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
            </div>
        </div>
        
        <!-- Messages Container -->
        <div class="messages-container" id="messages-container">
            {% set currentDate = null %}
            {% for message in conversation.messages %}
                {% set messageDate = message.createdAt|date('Y-m-d') %}
                
                {% if currentDate != messageDate %}
                    <div class="date-divider">
                        <span>{{ message.createdAt|date('d F Y') }}</span>
                    </div>
                    {% set currentDate = messageDate %}
                {% endif %}
                
                <div class="message {% if message.sender == app.user %}message-sent{% else %}message-received{% endif %}">
                    {% if message.sender != app.user %}
                        <div class="message-sender">{{ message.sender.username }}</div>
                    {% endif %}
                    <div class="message-content">{{ message.content }}</div>
                    <div class="message-meta">
                        <span class="message-time">{{ message.createdAt|date('H:i') }}</span>
                        {% if message.sender == app.user %}
                            <span class="message-status">
                                {% if message.isRead %}
                                    <i class="fas fa-check-double" title="Lu"></i>
                                {% else %}
                                    <i class="fas fa-check" title="Envoyé"></i>
                                {% endif %}
                            </span>
                        {% endif %}
                    </div>
                </div>
            {% else %}
                <div class="no-messages">
                    <p>Aucun message dans cette conversation. Commencez à discuter !</p>
                </div>
            {% endfor %}
        </div>
        
        <!-- Message Form -->
        <div class="message-form-container">
            <form method="post" class="message-form">
                <textarea name="content" class="message-input" placeholder="Écrivez votre message..." rows="1" required></textarea>
                <button type="submit" class="send-button">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Scroll to bottom of messages container
        const messagesContainer = document.querySelector('.messages-container');
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Auto-resize textarea
        const messageInput = document.querySelector('.message-input');
        if (messageInput) {
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
            
            // Submit form on Enter (but allow Shift+Enter for new line)
            messageInput.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.form.submit();
                }
            });
        }
        
        // Fonction pour mettre à jour le compteur de messages non lus
        function updateUnreadCount() {
            fetch('{{ path('conversation_unread_count') }}')
                .then(response => response.json())
                .then(data => {
                    const badge = document.querySelector('.nav-item.active .badge');
                    if (data.count > 0) {
                        if (!badge) {
                            const navItem = document.querySelector('.nav-item.active');
                            const newBadge = document.createElement('span');
                            newBadge.className = 'badge';
                            newBadge.textContent = data.count;
                            navItem.appendChild(newBadge);
                        } else {
                            badge.textContent = data.count;
                        }
                    } else if (badge) {
                        badge.remove();
                    }
                });
        }
        
        // Vérifier périodiquement les nouveaux messages
        setInterval(updateUnreadCount, 30000); // Vérifier toutes les 30 secondes
        
        // Vérifier également les nouveaux messages dans la conversation actuelle
        function checkNewMessages() {
            const lastMessageId = document.querySelector('.message:last-child')?.dataset?.id || 0;
            fetch(`{{ path('conversation_check_new_messages', {'id': conversation.id}) }}?lastId=${lastMessageId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.hasNewMessages) {
                        window.location.reload(); // Recharger la page pour afficher les nouveaux messages
                    }
                });
        }
        
        // Vérifier les nouveaux messages toutes les 10 secondes
        setInterval(checkNewMessages, 10000);
    });
</script>
</body>
</html>

==================================================

Fichier: templates\email\base.email.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\email\base.email.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Email{% endblock %}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #f8f9fa;
            padding: 20px;
            text-align: center;
            border-radius: 5px 5px 0 0;
        }
        .content {
            padding: 20px;
            background-color: #ffffff;
            border: 1px solid #e9ecef;
        }
        .footer {
            text-align: center;
            padding: 10px;
            font-size: 12px;
            color: #6c757d;
            background-color: #f8f9fa;
            border-radius: 0 0 5px 5px;
        }
        a {
            color: #d62828;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #d62828;
            color: white !important;
            text-decoration: none;
            border-radius: 5px;
            margin: 20px 0;
        }
        .btn:hover {
            background-color: #ba181b;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>{% block header %}Job Seeker Platform{% endblock %}</h1>
    </div>
    
    <div class="content">
        {% block body %}{% endblock %}
    </div>
    
    <div class="footer">
        <p>© {{ "now"|date("Y") }} Job Seeker Platform. All rights reserved.</p>
        <p>This email was sent to you because you have an account on our platform.</p>
    </div>
</body>
</html>
==================================================

Fichier: templates\entreprise\carte_visite.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\carte_visite.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carte de visite</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 2rem;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            font-size: 1.1rem;
            color: var(--medium-gray);
            margin-bottom: 2rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
            text-align: center;
            font-size: 1rem;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        .btn-secondary {
            background: var(--light-color);
            color: var(--dark);
            border: 1px solid var(--medium-gray);
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            text-align: center;
            font-size: 1rem;
        }

        .btn-secondary:hover {
            background-color: var(--medium-gray);
            color: var(--white);
        }

        /* Business Card Styles */
        .business-card-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-top: 2rem;
        }

        .business-card-preview {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 1px solid rgba(0, 0, 0, 0.05);
            padding: 0;
            transition: var(--transition);
            transform-style: preserve-3d;
            perspective: 1000px;
        }

        .business-card-front {
            background: linear-gradient(135deg, #ffffff, #f8f9fa);
            padding: 2rem;
            display: flex;
            align-items: center;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            position: relative;
            overflow: hidden;
        }

        .business-card-front::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 150px;
            height: 150px;
            background: linear-gradient(135deg, rgba(214, 40, 40, 0.05), rgba(214, 40, 40, 0.1));
            border-radius: 50%;
            transform: translate(50%, -50%);
        }

        .business-card-logo {
            width: 120px;
            height: 120px;
            overflow: hidden;
            border-radius: 10px;
            margin-right: 2rem;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--light-color);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 4px solid var(--white);
        }

        .business-card-logo img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .placeholder-logo {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            color: var(--medium-gray);
        }

        .business-card-info {
            flex: 1;
        }

        .company-name {
            font-size: 1.8rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
            font-weight: 700;
        }

        .company-industry {
            font-size: 1.2rem;
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            font-weight: 500;
        }

        .contact-info {
            display: grid;
            gap: 0.8rem;
        }

        .contact-info p {
            margin: 0;
            display: flex;
            align-items: center;
            font-size: 0.95rem;
        }

        .contact-info i {
            width: 20px;
            margin-right: 10px;
            color: var(--primary-color);
        }

        .business-card-options {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header h2 {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0;
        }

        .card-header h2 i {
            color: var(--primary-color);
        }

        .card-content {
            padding: 2rem;
        }

        .option-group {
            margin-bottom: 2rem;
        }

        .option-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--dark);
        }

        .option-description {
            font-size: 0.95rem;
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .action-buttons .btn-primary,
        .action-buttons .btn-secondary {
            flex: 1;
        }

        .share-options {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .share-button {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: var(--white);
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .share-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
        }

        .share-button.facebook {
            background: #3b5998;
        }

        .share-button.twitter {
            background: #1da1f2;
        }

        .share-button.linkedin {
            background: #0077b5;
        }

        .share-button.email {
            background: #ea4335;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .business-card-container {
                grid-template-columns: 1fr;
            }
        }

        /* Animation styles */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .animate-fade-in {
            animation: fadeIn 0.5s ease forwards;
            opacity: 0;
        }

        .delay-1 {
            animation-delay: 0.1s;
        }

        .delay-2 {
            animation-delay: 0.2s;
        }

        .delay-3 {
            animation-delay: 0.3s;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if user.profileImage is defined and user.profileImage %}
                <img src="{{ asset(user.profileImage) }}" alt="Photo de profil" class="profile-img" />
            {% else %}
                <img src="{{ asset(user.profileImage) }}" alt="Photo de profil" class="profile-img" />
            {% endif %}
            <h3 class="profile-name">{{ user.username }}</h3>
            <p class="profile-email">{{ user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('app_entreprise_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('entreprise_edit_profile') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="{{ path('entreprise_publication_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Publications
            </a>
            <a href="{{ path('entreprise_carte_visite') }}" class="nav-item active">
                <i class="fas fa-id-card"></i> Carte de visite
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="page-title">Carte de visite</h1>
        <p class="welcome-subtitle">Votre carte de visite professionnelle prête à être partagée</p>
        
        <div class="business-card-container">
            <div class="business-card-preview animate-fade-in delay-1">
                <div class="business-card-front">
                    <div class="business-card-logo">
                        {% if user.profileImage is defined and user.profileImage %}
                           <img src="{{ asset(user.profileImage) }}" alt="{{ user.companyName ?? user.username }}" />
                        {% else %}
                            <div class="placeholder-logo">
                                <i class="fas fa-building"></i>
                            </div>
                        {% endif %}
                    </div>
                    <div class="business-card-info">
                        <h2 class="company-name">{{ user.companyName ?? user.username }}</h2>
                        <p class="company-industry">{{ user.industry ?? 'Secteur non spécifié' }}</p>
                        <div class="contact-info">
                            <p><i class="fas fa-envelope"></i> {{ user.email }}</p>
                            <p><i class="fas fa-map-marker-alt"></i> {{ user.address ?? 'Adresse non spécifiée' }}</p>
                            {% if user.website is defined and user.website %}
                                <p><i class="fas fa-globe"></i> {{ user.website }}</p>
                            {% endif %}
                            {% if user.phone is defined and user.phone %}
                                <p><i class="fas fa-phone"></i> {{ user.phone }}</p>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="business-card-options animate-fade-in delay-2">
                <div class="card-header">
                    <h2><i class="fas fa-cog"></i> Options de la carte</h2>
                </div>
                <div class="card-content">
                    <div class="option-group">
                        <h3 class="option-title">Imprimer ou télécharger votre carte</h3>
                        <p class="option-description">Imprimez votre carte de visite ou téléchargez-la au format PDF pour vos rencontres professionnelles.</p>
                        <button class="btn-primary" id="printCard">
                            <i class="fas fa-print"></i> Imprimer / Télécharger PDF
                        </button>
                    </div>
                    
                    <div class="option-group mt-4">
                        <h3 class="option-title">Générer avec IA</h3>
                        <p class="option-description">Utilisez l'intelligence artificielle pour générer une carte de visite personnalisée.</p>
                        <div class="ai-generation-form">
                            <textarea id="cardDescription" class="form-control mb-3" rows="4" placeholder="Décrivez le style de carte que vous souhaitez (ex: moderne, minimaliste, élégant, couleurs spécifiques, etc.)">Carte de visite moderne avec un design épuré, utilisant des dégradés de bleu, adaptée pour une entreprise professionnelle.</textarea>
                            <button class="btn-primary" id="generateAICard">
                                <i class="fas fa-magic"></i> Générer avec IA
                            </button>
                        </div>
                        <div id="aiCardPreview" class="mt-3" style="display: none;">
                            <h4>Aperçu de la carte générée</h4>
                            <div id="aiCardContainer" class="mt-2"></div>
                            <button class="btn-secondary mt-2" id="applyAICard">
                                <i class="fas fa-check"></i> Appliquer ce design
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Imprimer la carte
        document.getElementById('printCard').addEventListener('click', function() {
            // Créer une fenêtre d'impression avec seulement la carte
            const printWindow = window.open('', '_blank');
            const companyName = document.querySelector('.company-name').textContent;
            const companyIndustry = document.querySelector('.company-industry').textContent;
            const email = document.querySelector('.contact-info p:nth-child(1)').textContent.trim();
            const address = document.querySelector('.contact-info p:nth-child(2)').textContent.trim();
            
            // Vérifier si une image de logo existe
            let logoHTML = '';
            const logoImg = document.querySelector('.business-card-logo img');
            if (logoImg) {
                logoHTML = `<img src="${logoImg.src}" alt="${companyName}" style="width: 100%; height: 100%; object-fit: cover;">`;
            } else {
                logoHTML = `<div class="placeholder-logo"><i class="fas fa-building"></i></div>`;
            }
            
            // Récupérer les informations de contact supplémentaires si elles existent
            let websiteHTML = '';
            let phoneHTML = '';
            const websiteElement = document.querySelector('.contact-info p:nth-child(3)');
            const phoneElement = document.querySelector('.contact-info p:nth-child(4)');
            
            // Valeur par défaut pour le site web si non défini
            let websiteValue = 'Site web non spécifié';
            
            if (websiteElement) {
                websiteValue = websiteElement.textContent.trim().replace('<i class="fas fa-globe"></i>', '').trim();
                websiteHTML = `<p><i class="fas fa-globe"></i> ${websiteValue}</p>`;
            }
            
            if (phoneElement) {
                phoneHTML = `<p><i class="fas fa-phone"></i> ${phoneElement.textContent.trim().replace('<i class="fas fa-phone"></i>', '')}</p>`;
            }
            
            printWindow.document.write(`<!DOCTYPE html>
                <html>
                <head>
                    <title>Carte de visite - ${companyName}</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
                    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
                    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"><\/script>
                    <style>
                        body {
                            font-family: 'Poppins', sans-serif;
                            display: flex;
                            flex-direction: column;
                            justify-content: center;
                            align-items: center;
                            height: 100vh;
                            margin: 0;
                            background-color: #f5f3f4;
                        }
                        .card-container {
                            margin-bottom: 30px;
                        }
                        .business-card {
                            width: 85mm;
                            height: 55mm;
                            background: white;
                            border-radius: 10px;
                            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                            overflow: hidden;
                            position: relative;
                        }
                        .card-header {
                            background: linear-gradient(135deg, #d62828, #ba181b);
                            color: white;
                            padding: 10px 15px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        }
                        .company-title {
                            font-size: 1.5rem;
                            font-weight: 700;
                            margin: 0;
                        }
                        .company-website {
                            font-size: 0.9rem;
                            opacity: 0.9;
                        }
                        .card-content {
                            display: flex;
                            padding: 15px;
                            box-sizing: border-box;
                            height: calc(100% - 45px);
                        }
                        .logo-section {
                            width: 35%;
                            display: flex;
                            flex-direction: column;
                            justify-content: center;
                            align-items: center;
                            padding-right: 15px;
                        }
                        .logo-container {
                            width: 80px;
                            height: 80px;
                            border-radius: 8px;
                            overflow: hidden;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            background: white;
                            box-shadow: 0 4px 8px rgba(0,0,0,0.05);
                            border: 4px solid white;
                        }
                        .logo-container img {
                            width: 100%;
                            height: 100%;
                            object-fit: cover;
                        }
                        .placeholder-logo {
                            width: 100%;
                            height: 100%;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            font-size: 2.5rem;
                            color: #d62828;
                        }
                        .info-section {
                            flex: 1;
                            display: flex;
                            flex-direction: column;
                            justify-content: center;
                            border-left: 1px solid #eee;
                            padding-left: 15px;
                        }
                        .company-industry {
                            font-size: 1rem;
                            color: #b1a7a6;
                            margin-bottom: 15px;
                            font-weight: 500;
                        }
                        .contact-info {
                            display: grid;
                            gap: 8px;
                        }
                        .contact-info p {
                            margin: 0;
                            display: flex;
                            align-items: center;
                            font-size: 0.9rem;
                            color: #333;
                        }
                        .contact-info i {
                            width: 20px;
                            margin-right: 10px;
                            color: #d62828;
                        }
                        .action-buttons {
                            display: flex;
                            gap: 15px;
                            margin-top: 20px;
                        }
                        .action-btn {
                            padding: 12px 25px;
                            border-radius: 8px;
                            font-weight: 600;
                            cursor: pointer;
                            display: flex;
                            align-items: center;
                            gap: 8px;
                            transition: all 0.3s ease;
                            border: none;
                            font-family: 'Poppins', sans-serif;
                        }
                        .print-btn {
                            background-color: #d62828;
                            color: white;
                        }
                        .print-btn:hover {
                            background-color: #b21e1e;
                            transform: translateY(-2px);
                        }
                        .download-btn {
                            background-color: #0077b5;
                            color: white;
                        }
                        .download-btn:hover {
                            background-color: #005885;
                            transform: translateY(-2px);
                        }
                        .instructions {
                            text-align: center;
                            margin-top: 10px;
                            color: #666;
                            font-size: 0.9rem;
                        }
                        @media print {
                            .action-buttons, .instructions {
                                display: none;
                            }
                            body {
                                background: none;
                            }
                            .business-card {
                                box-shadow: none;
                                border: 1px solid #e0e0e0;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="card-container" id="card-container">
                        <div class="business-card">
                            <div class="card-header">
                                <h2 class="company-title">${companyName}</h2>
                                <div class="company-website">${websiteValue}</div>
                            </div>
                            <div class="card-content">
                                <div class="logo-section">
                                    <div class="logo-container">
                                        ${logoHTML}
                                    </div>
                                </div>
                                <div class="info-section">
                                    <p class="company-industry">${companyIndustry}</p>
                                    <div class="contact-info">
                                        <p><i class="fas fa-envelope"></i> ${email.replace('<i class="fas fa-envelope"></i>', '')}</p>
                                        <p><i class="fas fa-map-marker-alt"></i> ${address.replace('<i class="fas fa-map-marker-alt"></i>', '')}</p>
                                        ${phoneHTML}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="action-buttons">
                        <button class="action-btn print-btn" onclick="window.print()">
                            <i class="fas fa-print"></i> Imprimer
                        </button>
                        <button class="action-btn download-btn" onclick="downloadPDF()">
                            <i class="fas fa-download"></i> Télécharger PDF
                        </button>
                    </div>
                    
                    <p class="instructions">
                        Pour imprimer, cliquez sur "Imprimer" ou utilisez Ctrl+P (Cmd+P sur Mac).<br>
                        Pour télécharger en PDF, cliquez sur "Télécharger PDF".
                    </p>
                    
                    <script>
                        function downloadPDF() {
                            // Masquer temporairement les boutons pour le PDF
                            const buttons = document.querySelector('.action-buttons');
                            const instructions = document.querySelector('.instructions');
                            buttons.style.display = 'none';
                            instructions.style.display = 'none';
                            
                            // Options pour html2pdf
                            const options = {
                                margin: 0,
                                filename: 'carte_visite_${companyName.replace(/[^a-zA-Z0-9]/g, '_')}.pdf',
                                image: { type: 'jpeg', quality: 1 },
                                html2canvas: { scale: 2, useCORS: true },
                                jsPDF: { unit: 'mm', format: [90, 60], orientation: 'landscape' }
                            };
                            
                            // Générer le PDF
                            const element = document.getElementById('card-container');
                            html2pdf().set(options).from(element).save().then(() => {
                                // Réafficher les boutons après la génération
                                buttons.style.display = 'flex';
                                instructions.style.display = 'block';
                            });
                        }
                    <\/script>
                </body>
                </html>`);
            
            printWindow.document.close();
        });
        
        // Copier le lien
        document.getElementById('copyLink').addEventListener('click', function() {
            // Créer un lien temporaire
            const tempInput = document.createElement('input');
            tempInput.value = window.location.href;
            document.body.appendChild(tempInput);
            tempInput.select();
            document.execCommand('copy');
            document.body.removeChild(tempInput);
            
            // Afficher un message de confirmation
            const button = this;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-check"></i> Lien copié!';
            button.style.backgroundColor = '#28a745';
            button.style.borderColor = '#28a745';
            button.style.color = 'white';
            
            // Rétablir le texte original après 2 secondes
            setTimeout(function() {
                button.innerHTML = originalText;
                button.style.backgroundColor = '';
                button.style.borderColor = '';
                button.style.color = '';
            }, 2000);
        });
        
        // Partage sur les réseaux sociaux
        document.querySelectorAll('.share-button').forEach(button => {
            button.addEventListener('click', function() {
                const url = encodeURIComponent(window.location.href);
                const title = encodeURIComponent(`Carte de visite de ${document.querySelector('.company-name').textContent}`);
                let shareUrl = '';
                
                if (this.classList.contains('facebook')) {
                    shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
                } else if (this.classList.contains('twitter')) {
                    shareUrl = `https://twitter.com/intent/tweet?url=${url}&text=${title}`;
                } else if (this.classList.contains('linkedin')) {
                    shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;
                } else if (this.classList.contains('email')) {
                    shareUrl = `mailto:?subject=${title}&body=Découvrez ma carte de visite professionnelle: ${url}`;
                }
                
                if (shareUrl) {
                    window.open(shareUrl, '_blank', 'width=600,height=400');
                }
            });
        });
        
        // Animation au survol de la carte
        const card = document.querySelector('.business-card-front');
        card.addEventListener('mousemove', function(e) {
            const rect = this.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            
            const rotateX = (y - centerY) / 20;
            const rotateY = (centerX - x) / 20;
            
            this.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
            this.style.transition = 'transform 0.1s';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';
            this.style.transition = 'transform 0.5s';
        });
        
        // Génération de carte avec IA
        document.getElementById('generateAICard').addEventListener('click', function() {
            const description = document.getElementById('cardDescription').value.trim();
            if (!description) {
                alert('Veuillez entrer une description pour générer une carte.');
                return;
            }
            
            // Afficher un indicateur de chargement
            const button = this;
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Génération en cours...';
            button.disabled = true;
            
            // Récupérer les informations de l'utilisateur
            const companyName = document.querySelector('.company-name').textContent;
            const companyIndustry = document.querySelector('.company-industry').textContent;
            const email = document.querySelector('.contact-info p:nth-child(1)').textContent.trim().replace('<i class="fas fa-envelope"></i>', '').trim();
            const address = document.querySelector('.contact-info p:nth-child(2)').textContent.trim().replace('<i class="fas fa-map-marker-alt"></i>', '').trim();
            
            // Appel à l'API pour générer la carte
            fetch('{{ path('entreprise_generate_ai_card') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    description: description,
                    companyName: companyName,
                    industry: companyIndustry,
                    email: email,
                    address: address
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la génération de la carte');
                }
                return response.json();
            })
            .then(data => {
                // Afficher la carte générée
                document.getElementById('aiCardContainer').innerHTML = data.cardHtml;
                document.getElementById('aiCardPreview').style.display = 'block';
                
                // Restaurer le bouton
                button.innerHTML = originalText;
                button.disabled = false;
                
                // Scroll vers l'aperçu
                document.getElementById('aiCardPreview').scrollIntoView({ behavior: 'smooth' });
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la génération de la carte. Veuillez réessayer.');
                button.innerHTML = originalText;
                button.disabled = false;
            });
        });
        
        // Appliquer le design généré par IA
        document.getElementById('applyAICard').addEventListener('click', function() {
            const aiCardHtml = document.getElementById('aiCardContainer').innerHTML;
            
            // Remplacer la carte actuelle par la carte générée
            document.querySelector('.business-card-front').outerHTML = aiCardHtml;
            
            // Masquer l'aperçu
            document.getElementById('aiCardPreview').style.display = 'none';
            
            // Sauvegarder le design dans la base de données
            fetch('{{ path('entreprise_save_ai_card') }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    cardHtml: aiCardHtml
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erreur lors de la sauvegarde de la carte');
                }
                return response.json();
            })
            .then(data => {
                // Afficher un message de succès
                alert('Le design de la carte a été appliqué et sauvegardé avec succès!');
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Une erreur est survenue lors de la sauvegarde de la carte. Veuillez réessayer.');
            });
        });
    });
</script>

<style>
    @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(10px); }
    }
    
    @media print {
        .sidebar, .card-header, .card-content, .page-title, .welcome-subtitle, .business-card-options {
            display: none !important;
        }
        
        .main-content {
            padding: 0 !important;
            margin: 0 !important;
            background: none !important;
        }
        
        .business-card-container {
            display: block !important;
            margin: 0 !important;
        }
        
        .business-card-preview {
            box-shadow: none !important;
            border: none !important;
        }
        
        .business-card-front {
            width: 85mm !important;
            height: 55mm !important;
            box-shadow: none !important;
            border: 1px solid #e0e0e0 !important;
        }
    }
    /* Styles pour l'aperçu de la carte générée par IA */
    #aiCardPreview {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        border: 1px solid #e0e0e0;
        transition: all 0.3s ease;
    }
    
    #aiCardPreview h4 {
        font-size: 1.2rem;
        margin-bottom: 15px;
        color: var(--dark);
    }
    
    #aiCardContainer {
        max-width: 400px;
        margin: 0 auto;
        transition: transform 0.3s ease;
    }
    
    #aiCardContainer:hover {
        transform: scale(1.02);
    }
    
    .btn-secondary {
        background: linear-gradient(135deg, #6c757d, #495057);
        color: var(--white);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        text-align: center;
        font-size: 1rem;
        margin-top: 15px;
    }
    
    .btn-secondary:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
    }
    
    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-family: 'Poppins', sans-serif;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }
    
    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
        outline: none;
    }
    
    .ai-generation-form {
        margin-top: 15px;
    }
</style>
</body>
</html>






==================================================

Fichier: templates\entreprise\edit_profile.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\edit_profile.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modifier le profil</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 2rem;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .profile-form-container {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 2rem;
        }

        .profile-image-card {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 1px solid rgba(0, 0, 0, 0.05);
            padding: 2rem;
            text-align: center;
        }

        .profile-image-preview {
            width: 180px;
            height: 180px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 1.5rem;
            border: 4px solid var(--light-color);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .no-logo {
            width: 180px;
            height: 180px;
            border-radius: 50%;
            margin: 0 auto 1.5rem;
            background-color: var(--light-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--medium-gray);
            font-size: 1rem;
            border: 4px solid var(--light-color);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .file-upload-container {
            margin-top: 1rem;
        }

        .file-upload-label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .file-upload-input {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            background-color: var(--light-color);
            transition: var(--transition);
        }

        .file-upload-help {
            display: block;
            font-size: 0.8rem;
            color: var(--medium-gray);
            margin-top: 0.5rem;
        }

        .profile-details-card {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header {
            padding: 1.5rem 2rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header h2 {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin: 0;
        }

        .card-header h2 i {
            color: var(--primary-color);
        }

        .form-fields {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.8rem;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            background-color: var(--light-color);
            transition: var(--transition);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
            width: 100%;
            text-align: center;
            font-size: 1rem;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .profile-form-container {
                grid-template-columns: 1fr;
            }
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 8px;
            animation: fadeIn 0.5s ease-in-out;
        }
        
        .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }
        
        .alert-error {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .alert {
            position: relative;
        }
        
        .alert .close {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-weight: bold;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'entreprise/_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="page-title">Modifier votre profil</h1>
        
        <!-- Affichage des messages flash -->
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        
        {{ form_start(form) }}
        
        <div class="profile-form-container">
            <div class="profile-image-card">
                {% if user.profileImage %}
                    <img src="{{ asset(user.profileImage) }}" alt="Logo" class="profile-image-preview">
                {% else %}
                    <div class="no-logo">Aucun logo</div>
                {% endif %}
                
                <div class="file-upload-container">
                    <label class="file-upload-label">{{ form_label(form.logoFile) }}</label>
                    {{ form_widget(form.logoFile, {'attr': {'class': 'file-upload-input'}}) }}
                    <small class="file-upload-help">JPG, PNG ou GIF. Max 2MB.</small>
                    {{ form_errors(form.logoFile) }}
                </div>
            </div>
            
            <div class="profile-details-card">
                <div class="card-header">
                    <h2><i class="fas fa-building"></i> Informations de l'entreprise</h2>
                </div>
                
                <div class="form-fields">
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.username) }}</label>
                        {{ form_widget(form.username, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.email) }}</label>
                        {{ form_widget(form.email, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.companyName) }}</label>
                        {{ form_widget(form.companyName, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.industry) }}</label>
                        {{ form_widget(form.industry, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.address) }}</label>
                        {{ form_widget(form.address, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.website) }}</label>
                        {{ form_widget(form.website, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">{{ form_label(form.description) }}</label>
                        {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 5}}) }}
                    </div>
                    
                    <button type="submit" class="btn-primary">Enregistrer les modifications</button>
                </div>
            </div>
        </div>
        
        {{ form_end(form) }}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.profile-image-card, .profile-details-card'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.profile-image-card, .profile-details-card'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        
        // Prévisualisation de l'image
        const logoFileInput = document.querySelector('input[type="file"]');
        const previewContainer = document.querySelector('.profile-image-preview') || document.querySelector('.no-logo');
        
        if (logoFileInput && previewContainer) {
            logoFileInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        // Créer une nouvelle image si nécessaire
                        if (previewContainer.tagName === 'DIV') {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.classList.add('profile-image-preview');
                            previewContainer.parentNode.replaceChild(img, previewContainer);
                        } else {
                            previewContainer.src = e.target.result;
                        }
                        
                        // Mettre à jour également l'image dans la sidebar
                        const sidebarImg = document.querySelector('.sidebar .profile-img');
                        if (sidebarImg) {
                            sidebarImg.src = e.target.result;
                        }
                    }
                    
                    reader.readAsDataURL(file);
                }
            });
        }
    });
</script>
</body>
</html>

<!-- Ajouter temporairement ce code pour déboguer -->
{% if user.profileImage %}
    <div style="display: none;">
        Chemin de l'image: {{ user.profileImage }}
        Chemin complet:<img src="{{ asset('img/fxchat.png') }}" 
    </div>
{% endif %}





==================================================

Fichier: templates\entreprise\home.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\home.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Entreprise Dashboard{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-card h1 {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-card h1::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            font-size: 1.1rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Company Profile Card */
        .company-profile-card {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem 2rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-header h2 {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .card-header h2 i {
            color: var(--primary-color);
        }

        .btn-edit {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background-color: rgba(214, 40, 40, 0.1);
            color: var(--primary-color);
            padding: 0.5rem 1rem;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: var(--transition);
        }

        .btn-edit:hover {
            background-color: rgba(214, 40, 40, 0.2);
            transform: translateY(-2px);
        }

        .info-fields {
            padding: 1.5rem 2rem;
        }

        .info-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 1.2rem;
            padding-bottom: 1.2rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .info-item:last-child {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .info-item i {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary-color);
            font-size: 1rem;
            flex-shrink: 0;
        }

        .info-content {
            flex: 1;
        }

        .info-label {
            display: block;
            font-size: 0.9rem;
            color: var(--medium-gray);
            margin-bottom: 0.3rem;
        }

        .info-value {
            font-weight: 500;
            color: var(--dark);
        }

        /* Action Cards */
        .action-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .action-card {
            background: var(--white);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .action-icon {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            font-size: 1.8rem;
        }

        .action-card h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--dark);
        }

        .action-card p {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        /* Section Titles */
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 2rem 0 1.5rem;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title i {
            color: var(--primary-color);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary-color);
            font-size: 1.2rem;
        }

        .stat-info h3 {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.2rem;
            color: var(--dark);
        }

        .stat-info p {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .action-cards {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if user.profileImage %}
                <img src="{{ asset(user.profileImage) }}" alt="Logo de l'entreprise" class="profile-img" />
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Logo par défaut" class="profile-img" />
            {% endif %}
            <h3 class="profile-name">{{ user.username }}</h3>
            <p class="profile-email">{{ user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('app_entreprise_home') }}" class="nav-item active">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('entreprise_edit_profile') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="{{ path('entreprise_publication_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Publications
            </a>
            <a href="{{ path('entreprise_applications_index') }}" class="nav-item">
                <i class="fas fa-users"></i> Candidats
                <span class="badge" id="candidates-badge">3</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-comments"></i> Entretiens
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-chart-line"></i> Statistiques
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1>Bienvenue, {{ user.username }} !</h1>
            <p class="welcome-subtitle">Gérez vos offres d'emploi et trouvez les meilleurs talents</p>
            <a href="{{ path('entreprise_edit_profile') }}" class="btn-primary">Compléter votre profil</a>
        </div>
        
        <h2 class="section-title"><i class="fas fa-chart-line"></i> Statistiques</h2>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-briefcase"></i>
                </div>
                <div class="stat-info">
                    <h3>5</h3>
                    <p>Offres publiées</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-info">
                    <h3>12</h3>
                    <p>Candidatures reçues</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="stat-info">
                    <h3>3</h3>
                    <p>Entretiens planifiés</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-eye"></i>
                </div>
                <div class="stat-info">
                    <h3>128</h3>
                    <p>Vues du profil</p>
                </div>
            </div>
        </div>

        <h2 class="section-title"><i class="fas fa-building"></i> Informations de l'entreprise</h2>
        <div class="company-profile-card">
            <div class="card-header">
                <h2><i class="fas fa-building"></i> Profil de l'entreprise</h2>
                <a href="{{ path('entreprise_edit_profile') }}" class="btn-edit">
                    <i class="fas fa-edit"></i> Modifier
                </a>
            </div>
            
            <div class="info-fields">
                <div class="info-item">
                    <i class="fas fa-envelope"></i>
                    <div class="info-content">
                        <span class="info-label">Email</span>
                        <span class="info-value">{{ user.email }}</span>
                    </div>
                </div>
                
                <div class="info-item">
                    <i class="fas fa-building"></i>
                    <div class="info-content">
                        <span class="info-label">Nom de l'entreprise</span>
                        <span class="info-value">{{ user.companyName ?? 'Non renseigné' }}</span>
                    </div>
                </div>
                
                <div class="info-item">
                    <i class="fas fa-industry"></i>
                    <div class="info-content">
                        <span class="info-label">Secteur d'activité</span>
                        <span class="info-value">{{ user.industry ?? 'Non renseigné' }}</span>
                    </div>
                </div>
                
                <div class="info-item">
                    <i class="fas fa-map-marker-alt"></i>
                    <div class="info-content">
                        <span class="info-label">Adresse</span>
                        <span class="info-value">{{ user.address ?? 'Non renseignée' }}</span>
                    </div>
                </div>
            </div>
        </div>

        <h2 class="section-title"><i class="fas fa-bolt"></i> Actions rapides</h2>
        <div class="action-cards">
            <div class="action-card">
                <div class="action-icon">
                    <i class="fas fa-plus-circle"></i>
                </div>
                <h3>Publier une offre</h3>
                <p>Créez une nouvelle offre d'emploi pour attirer les meilleurs talents</p>
                <a href="#" class="btn-primary">Créer une offre</a>
            </div>
            
            <div class="action-card">
                <div class="action-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h3>Rechercher des candidats</h3>
                <p>Parcourez notre base de données de candidats qualifiés</p>
                <a href="#" class="btn-primary">Rechercher</a>
            </div>
            
            <div class="action-card">
                <div class="action-icon">
                    <i class="fas fa-id-card"></i>
                </div>
                <h3>Carte de visite</h3>
                <p>Affichez et partagez votre carte de visite professionnelle</p>
                <a href="{{ path('entreprise_carte_visite') }}" class="btn-primary">Voir ma carte</a>
            </div>
        </div>
        
        <h2 class="section-title"><i class="fas fa-briefcase"></i> Dernières offres publiées</h2>
        <div class="recent-jobs">
            {% if jobs is defined and jobs|length > 0 %}
                {% for job in jobs %}
                    <div class="company-profile-card">
                        <div class="card-header">
                            <h2>{{ job.title }}</h2>
                            <div>
                                <a href="#" class="btn-edit">
                                    <i class="fas fa-edit"></i> Modifier
                                </a>
                            </div>
                        </div>
                        <div class="info-fields">
                            <div class="info-item">
                                <i class="fas fa-map-marker-alt"></i>
                                <div class="info-content">
                                    <span class="info-label">Localisation</span>
                                    <span class="info-value">{{ job.location }}</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-clock"></i>
                                <div class="info-content">
                                    <span class="info-label">Type de contrat</span>
                                    <span class="info-value">{{ job.contractType }}</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-users"></i>
                                <div class="info-content">
                                    <span class="info-label">Candidatures</span>
                                    <span class="info-value">{{ job.applications|length }} candidat(s)</span>
                                </div>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-calendar-alt"></i>
                                <div class="info-content">
                                    <span class="info-label">Date de publication</span>
                                    <span class="info-value">{{ job.createdAt|date('d/m/Y') }}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="company-profile-card">
                    <div class="card-header">
                        <h2>Aucune offre publiée</h2>
                    </div>
                    <div class="info-fields" style="text-align: center; padding: 2rem;">
                        <p>Vous n'avez pas encore publié d'offres d'emploi.</p>
                        <a href="#" class="btn-primary" style="margin-top: 1rem;">Publier votre première offre</a>
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
</div>
</body>
</html>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.stat-card, .action-card, .company-profile-card'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.stat-card, .action-card, .company-profile-card'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = `${index * 0.1}s`;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);

        // Afficher le nombre de candidatures
        const candidatesBadge = document.getElementById('candidates-badge');
        if (candidatesBadge) {
            // Vous pouvez remplacer cette logique par une vraie vérification
            const newCandidates = 3;
            if (newCandidates > 0) {
                candidatesBadge.textContent = newCandidates;
                candidatesBadge.style.display = 'flex';
            } else {
                candidatesBadge.style.display = 'none';
            }
        }
    });
</script>
</body>
</html>

==================================================

Fichier: templates\entreprise\navbar.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\navbar.html.twig
-----
<a href="{{ path('app_entreprise_home') }}" class="nav-item {% if app.request.get('_route') == 'app_entreprise_home' %}active{% endif %}">
    <i class="fas fa-home"></i> Dashboard
</a>
<a href="{{ path('entreprise_carte_visite') }}" class="nav-item {% if app.request.get('_route') == 'entreprise_carte_visite' %}active{% endif %}">
    <i class="fas fa-id-card"></i> Carte de visite
</a>
<a href="{{ path('entreprise_publication_index') }}" class="nav-item {% if app.request.get('_route') starts with 'entreprise_publication' %}active{% endif %}">
    <i class="fas fa-briefcase"></i> Publications
</a>
<a href="{{ path('entreprise_applications_index') }}" class="nav-item {% if app.request.get('_route') starts with 'entreprise_applications' %}active{% endif %}">
    <i class="fas fa-users"></i> Candidats
</a>
<a href="{{ path('entreprise_statistics_index') }}" class="nav-item {% if app.request.get('_route') starts with 'entreprise_statistics' %}active{% endif %}">
    <i class="fas fa-chart-line"></i> Statistiques
</a>


==================================================

Fichier: templates\entreprise\publications.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\publications.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mes Publications</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        /* Publications Card */
        .publications-card {
            background: var(--white);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .publications-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .publications-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
        }

        .publications-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        /* Alert styles */
        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            font-weight: 500;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 3rem;
            background-color: #f8f9fa;
            border-radius: 15px;
            margin: 2rem 0;
            transition: var(--transition);
        }

        .empty-icon {
            font-size: 4rem;
            color: var(--medium-gray);
            margin-bottom: 1rem;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .empty-state p {
            color: #6c757d;
            margin-bottom: 1.5rem;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        /* Publications Grid */
        .publications-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 1.5rem;
        }

        .publication-card {
            background-color: var(--white);
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            position: relative;
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            overflow: hidden;
            height: 100%;
            display: flex;
            flex-direction: column;
        }

        .publication-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .publication-status {
            position: absolute;
            top: 1rem;
            right: 1rem;
            z-index: 2;
        }

        .status {
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
        }

        .status.published {
            background-color: #d4edda;
            color: #155724;
        }

        .status.draft {
            background-color: #f8f9fa;
            color: #6c757d;
        }

        .publication-category {
            margin-bottom: 1rem;
        }

        .category {
            font-size: 0.75rem;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-weight: 600;
            display: inline-block;
        }

        .category.job {
            background-color: #cce5ff;
            color: #004085;
        }

        .category.internship {
            background-color: #d1ecf1;
            color: #0c5460;
        }

        .category.news {
            background-color: #fff3cd;
            color: #856404;
        }

        .category.event {
            background-color: #f8d7da;
            color: #721c24;
        }

        .publication-title {
            font-size: 1.25rem;
            margin-bottom: 0.75rem;
            color: var(--dark);
            font-weight: 600;
            line-height: 1.4;
        }

        .publication-content {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 1rem;
            line-height: 1.6;
            flex-grow: 1;
        }

        .publication-meta {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            font-size: 0.8rem;
            color: #6c757d;
        }

        .publication-date, .publication-updated {
            display: flex;
            align-items: center;
        }

        .publication-date i, .publication-updated i {
            margin-right: 5px;
        }

        .publication-actions {
            display: flex;
            justify-content: space-between;
            border-top: 1px solid #f1f1f1;
            padding-top: 1rem;
        }

        .btn-action {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--white);
            text-decoration: none;
            transition: var(--transition);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .btn-action.view {
            background-color: #17a2b8;
        }

        .btn-action.edit {
            background-color: #ffc107;
            color: #212529;
        }

        .btn-action.publish {
            background-color: #28a745;
        }

        .btn-action.unpublish {
            background-color: #6c757d;
        }

        .btn-action.delete {
            background-color: #dc3545;
        }

        .btn-action.display {
            background-color: #6610f2;
        }

        .btn-action:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

        /* Buttons */
        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-primary i {
            margin-right: 8px;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .publications-grid {
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            }
        }

        @media (max-width: 576px) {
            .publications-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .publications-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'entreprise/_publication_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}
        
        <div class="publications-header">
            <h1 class="page-title">Mes Publications</h1>
            <a href="{{ path('entreprise_publication_new') }}" class="btn-primary">
                <i class="fas fa-plus"></i> Nouvelle Publication
            </a>
        </div>
        
        <div class="publications-filters">
            <div class="filter-group">
                <label for="status-filter">Statut</label>
                <select id="status-filter" class="filter-select">
                    <option value="all">Tous</option>
                    <option value="published">Publiés</option>
                    <option value="draft">Brouillons</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="category-filter">Catégorie</label>
                <select id="category-filter" class="filter-select">
                    <option value="all">Toutes</option>
                    <option value="job_offer">Offres d'emploi</option>
                    <option value="internship">Stages</option>
                    <option value="news">Actualités</option>
                    <option value="event">Événements</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="search-filter">Recherche</label>
                <div class="search-input">
                    <input type="text" id="search-filter" placeholder="Rechercher..." class="filter-input">
                    <i class="fas fa-search search-icon"></i>
                </div>
            </div>
        </div>
        
        <div class="publications-list">
            {% if publications|length > 0 %}
                {% for publication in publications %}
                    <div class="publication-card" 
                         data-status="{{ publication.isPublished ? 'published' : 'draft' }}"
                         data-category="{{ publication.category }}">
                        <div class="publication-info">
                            <div class="publication-meta">
                                <div class="publication-status">
                                    {% if publication.isPublished %}
                                        <span class="status published">Publié</span>
                                    {% else %}
                                        <span class="status draft">Brouillon</span>
                                    {% endif %}
                                </div>
                                <div class="publication-category">
                                    {% if publication.category == 'job_offer' %}
                                        <span class="category job">Offre d'emploi</span>
                                    {% elseif publication.category == 'internship' %}
                                        <span class="category internship">Stage</span>
                                    {% elseif publication.category == 'news' %}
                                        <span class="category news">Actualité</span>
                                    {% elseif publication.category == 'event' %}
                                        <span class="category event">Événement</span>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <h3 class="publication-title">{{ publication.title }}</h3>
                            
                            <div class="publication-dates">
                                <div class="date-item">
                                    <i class="far fa-calendar-alt"></i> Créé le {{ publication.createdAt|date('d/m/Y') }}
                                </div>
                                {% if publication.updatedAt %}
                                    <div class="date-item">
                                        <i class="far fa-edit"></i> Modifié le {{ publication.updatedAt|date('d/m/Y') }}
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                        
                        <div class="publication-actions">
                            <a href="{{ path('entreprise_publication_show', {'id': publication.id}) }}" class="btn-action view" title="Voir">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="{{ path('entreprise_publication_edit', {'id': publication.id}) }}" class="btn-action edit" title="Modifier">
                                <i class="fas fa-pencil-alt"></i>
                            </a>
                            <a href="{{ path('entreprise_publication_delete', {'id': publication.id}) }}" class="btn-action delete" title="Supprimer" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette publication ?')">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                            <a href="{{ path('entreprise_publication_show', {'id': publication.id}) }}" class="btn-action display" title="Afficher publication">
                                <i class="fas fa-desktop"></i>
                            </a>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="no-publications">
                    <div class="no-data-icon">
                        <i class="fas fa-newspaper"></i>
                    </div>
                    <h3>Aucune publication</h3>
                    <p>Vous n'avez pas encore créé de publication. Cliquez sur "Nouvelle Publication" pour commencer.</p>
                    <a href="{{ path('entreprise_publication_new') }}" class="btn-primary">
                        <i class="fas fa-plus"></i> Nouvelle Publication
                    </a>
                </div>
            {% endif %}
        </div>
    </div>
</div>
</body>
<script>
    function showPublicationPreview(publicationId) {
        // Créer une fenêtre modale pour afficher la publication
        const modal = document.createElement('div');
        modal.className = 'publication-preview-modal';
        modal.innerHTML = `
            <div class="preview-content">
                <div class="preview-header">
                    <h2>Prévisualisation de la publication</h2>
                    <button class="close-btn" onclick="closePreview()"><i class="fas fa-times"></i></button>
                </div>
                <div class="preview-body">
                    <div class="loading">Chargement de la publication...</div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        
        // Charger le contenu de la publication (simulé ici)
        // Dans un cas réel, vous feriez une requête AJAX pour récupérer les détails
        setTimeout(() => {
            const publication = document.querySelector(`.publication-card[data-id="${publicationId}"]`);
            if (publication) {
                const title = publication.querySelector('.publication-title').textContent;
                const content = publication.querySelector('.publication-content').getAttribute('data-full-content');
                const category = publication.querySelector('.category').textContent;
                
                const previewBody = modal.querySelector('.preview-body');
                previewBody.innerHTML = `
                    <h3>${title}</h3>
                    <div class="preview-category">${category}</div>
                    <div class="preview-text">${content}</div>
                    <div class="preview-actions">
                        <button class="preview-btn" onclick="closePreview()">Fermer</button>
                    </div>
                `;
            }
        }, 500);
    }
    
    function closePreview() {
        const modal = document.querySelector('.publication-preview-modal');
        if (modal) {
            document.body.removeChild(modal);
        }
    }
</script>
<style>
    /* Styles pour la fenêtre modale de prévisualisation */
    .publication-preview-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    
    .preview-content {
        background-color: white;
        border-radius: 10px;
        width: 80%;
        max-width: 800px;
        max-height: 80vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }
    
    .preview-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #eee;
    }
    
    .preview-header h2 {
        margin: 0;
        font-size: 1.5rem;
    }
    
    .close-btn {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6c757d;
    }
    
    .preview-body {
        padding: 1.5rem;
    }
    
    .loading {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }
    
    .preview-text {
        margin: 1.5rem 0;
        line-height: 1.6;
    }
    
    .preview-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 1.5rem;
    }
    
    .preview-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
    }
</style>
</html>













==================================================

Fichier: templates\entreprise\publication_detail.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\publication_detail.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Détail de la publication{% endblock %}

{% block body %}
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'entreprise/_publication_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}
        
        <div class="welcome-card">
            <h1>Détail de la publication</h1>
            <p class="welcome-subtitle">Consultez et gérez les informations de votre publication</p>
            <a href="{{ path('entreprise_publication_index') }}" class="btn-primary">
                <i class="fas fa-arrow-left"></i> Retour aux publications
            </a>
        </div>
        
        <div class="company-profile-card publication-detail-card">
            <div class="card-header">
                <h2>
                    <i class="fas fa-file-alt"></i> {{ publication.title }}
                </h2>
                <div class="publication-meta">
                    <div class="publication-status">
                        {% if publication.isPublished %}
                            <span class="status published">Publié</span>
                        {% else %}
                            <span class="status draft">Brouillon</span>
                        {% endif %}
                    </div>
                    <div class="publication-category">
                        {% if publication.category == 'job_offer' %}
                            <span class="category job">Offre d'emploi</span>
                        {% elseif publication.category == 'internship' %}
                            <span class="category internship">Stage</span>
                        {% elseif publication.category == 'news' %}
                            <span class="category news">Actualité</span>
                        {% elseif publication.category == 'event' %}
                            <span class="category event">Événement</span>
                        {% endif %}
                    </div>
                </div>
            </div>
            
            <div class="info-fields">
                <div class="info-item">
                    <i class="far fa-calendar-alt"></i>
                    <div class="info-content">
                        <span class="info-label">Date de création</span>
                        <span class="info-value">{{ publication.createdAt|date('d/m/Y à H:i') }}</span>
                    </div>
                </div>
                
                {% if publication.updatedAt %}
                <div class="info-item">
                    <i class="far fa-edit"></i>
                    <div class="info-content">
                        <span class="info-label">Dernière modification</span>
                        <span class="info-value">{{ publication.updatedAt|date('d/m/Y à H:i') }}</span>
                    </div>
                </div>
                {% endif %}
                
                <div class="info-item content-item">
                    <i class="fas fa-align-left"></i>
                    <div class="info-content">
                        <span class="info-label">Contenu</span>
                        <div class="publication-content">
                            {{ publication.content|raw }}
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="publication-actions">
                {% if publication.isPublished %}
                    <a href="{{ path('entreprise_publication_unpublish', {'id': publication.id}) }}" class="btn-action unpublish">
                        <i class="fas fa-eye-slash"></i> Dépublier
                    </a>
                {% else %}
                    <a href="{{ path('entreprise_publication_publish', {'id': publication.id}) }}" class="btn-action publish">
                        <i class="fas fa-globe"></i> Publier
                    </a>
                {% endif %}
                <a href="{{ path('entreprise_publication_edit', {'id': publication.id}) }}" class="btn-action edit">
                    <i class="fas fa-pencil-alt"></i> Modifier
                </a>
                <a href="{{ path('entreprise_publication_delete', {'id': publication.id}) }}" class="btn-action delete" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette publication ?')">
                    <i class="fas fa-trash-alt"></i> Supprimer
                </a>
            </div>
        </div>
        
        <h2 class="section-title"><i class="fas fa-eye"></i> Aperçu public</h2>
        <div class="company-profile-card preview-container">
            <div class="card-header">
                <div class="preview-company">
                    {% if user.profileImage %}
                        <img src="{{ asset(user.profileImage) }}" alt="{{ user.username }}" class="company-logo" />
                    {% else %}
                        <img src="{{ asset('img/fxchat.png') }}" alt="{{ user.username }}" class="company-logo" />
                    {% endif %}
                    <div class="company-info">
                        <h4>{{ user.companyName ?? user.username }}</h4>
                        <p>{{ user.industry ?? 'Entreprise' }}</p>
                    </div>
                </div>
                <div class="preview-date">
                    {{ publication.createdAt|date('d/m/Y') }}
                </div>
            </div>
            
            <div class="info-fields">
                <h2 class="preview-title">{{ publication.title }}</h2>
                <div class="preview-category-tag">
                    {% if publication.category == 'job_offer' %}
                        <span class="tag job">Offre d'emploi</span>
                    {% elseif publication.category == 'internship' %}
                        <span class="tag internship">Stage</span>
                    {% elseif publication.category == 'news' %}
                        <span class="tag news">Actualité</span>
                    {% elseif publication.category == 'event' %}
                        <span class="tag event">Événement</span>
                    {% endif %}
                </div>
                <div class="preview-content">
                    {{ publication.content|raw }}
                </div>
            </div>
            
            <div class="preview-footer">
                <div class="preview-stats">
                    <div class="stat-item">
                        <i class="far fa-eye"></i> 0 vues
                    </div>
                    <div class="stat-item">
                        <i class="far fa-bookmark"></i> 0 enregistrements
                    </div>
                </div>
                <div class="preview-actions">
                    <button class="btn-primary apply" disabled>
                        <i class="fas fa-paper-plane"></i> Postuler
                    </button>
                    <button class="btn-secondary save" disabled>
                        <i class="far fa-bookmark"></i> Enregistrer
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #d62828;
        --secondary-color: #ba181b;
        --accent-color: #e5383b;
        --light-color: #f5f3f4;
        --white: #ffffff;
        --dark: #161a1d;
        --medium-gray: #b1a7a6;
        --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--light-color);
        color: var(--dark);
        min-height: 100vh;
    }

    .dashboard-container {
        display: flex;
        min-height: 100vh;
    }

    /* Sidebar */
    .sidebar {
        width: 300px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        padding: 2rem;
        position: relative;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .sidebar::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
        opacity: 0.15;
        z-index: 0;
    }

    .profile-section {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--white);
        position: relative;
        z-index: 1;
    }

    .profile-img {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid var(--white);
        margin-bottom: 1rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .profile-name {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .profile-email {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .nav-menu {
        margin-top: 2rem;
        position: relative;
        z-index: 1;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 0.8rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        color: rgba(255, 255, 255, 0.9);
        text-decoration: none;
        transition: var(--transition);
        position: relative;
    }

    .nav-item i {
        margin-right: 10px;
        font-size: 1.1rem;
    }

    .nav-item:hover, .nav-item.active {
        background-color: rgba(255, 255, 255, 0.2);
        color: var(--white);
        transform: translateX(5px);
    }

    /* Main Content */
    .main-content {
        flex: 1;
        padding: 2rem;
        background-color: var(--white);
        overflow-y: auto;
    }

    .welcome-card {
        background: var(--light-color);
        border-radius: 15px;
        padding: 2.5rem;
        box-shadow: var(--shadow);
        margin-bottom: 2rem;
        position: relative;
    }

    .welcome-card h1 {
        font-size: 2rem;
        font-weight: 700;
        color: var(--dark);
        position: relative;
        display: inline-block;
        margin-bottom: 1.5rem;
    }

    .welcome-card h1::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 0;
        width: 50px;
        height: 4px;
        background: var(--primary-color);
        border-radius: 2px;
    }

    .welcome-subtitle {
        color: var(--medium-gray);
        margin-bottom: 1.5rem;
        font-size: 1.1rem;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--white);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
    }

    .btn-secondary {
        background-color: var(--light-color);
        color: var(--dark);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
    }

    .btn-secondary:hover {
        background-color: #e9ecef;
        transform: translateY(-3px);
    }

    /* Section Titles */
    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 2rem 0 1.5rem;
        color: var(--dark);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .section-title i {
        color: var(--primary-color);
    }

    /* Publication Detail Card */
    .company-profile-card {
        background: var(--white);
        border-radius: 15px;
        overflow: hidden;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .card-header h2 {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--dark);
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .card-header h2 i {
        color: var(--primary-color);
    }

    .publication-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .status, .category, .tag {
        display: inline-block;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .status.published {
        background-color: #28a745;
        color: white;
    }

    .status.draft {
        background-color: #6c757d;
        color: white;
    }

    .category.job, .tag.job {
        background-color: #007bff;
        color: white;
    }

    .category.internship, .tag.internship {
        background-color: #17a2b8;
        color: white;
    }

    .category.news, .tag.news {
        background-color: #ffc107;
        color: #212529;
    }

    .category.event, .tag.event {
        background-color: #6f42c1;
        color: white;
    }

    .info-fields {
        padding: 1.5rem 2rem;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        margin-bottom: 1.2rem;
        padding-bottom: 1.2rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .info-item:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }

    .info-item i {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: rgba(214, 40, 40, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        color: var(--primary-color);
        font-size: 1rem;
        flex-shrink: 0;
    }

    .info-content {
        flex: 1;
    }

    .info-label {
        display: block;
        font-size: 0.9rem;
        color: var(--medium-gray);
        margin-bottom: 0.3rem;
    }

    .info-value {
        font-weight: 500;
        color: var(--dark);
    }

    .content-item {
        align-items: flex-start;
    }

    .publication-content {
        margin-top: 0.5rem;
        line-height: 1.8;
        font-size: 1rem;
    }

    .publication-actions {
        display: flex;
        gap: 1rem;
        padding: 1.5rem 2rem;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        background-color: rgba(0, 0, 0, 0.02);
    }

    .btn-action {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        text-decoration: none;
        transition: var(--transition);
    }
    
    .btn-action:hover {
        transform: translateY(-2px);
    }
    
    .btn-action.edit {
        background-color: #ffc107;
        color: #212529;
    }
    
    .btn-action.delete {
        background-color: #dc3545;
        color: white;
    }
    
    .btn-action.publish {
        background-color: #28a745;
        color: white;
    }
    
    .btn-action.unpublish {
        background-color: #6c757d;
        color: white;
    }
    
    /* Styles pour l'aperçu */
    .publication-preview {
        margin-top: 3rem;
    }
    
    .preview-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1.5rem;
        color: var(--dark);
    }
    
    .preview-container {
        background: var(--white);
        border-radius: 15px;
        overflow: hidden;
        box-shadow: var(--shadow);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .preview-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }
    
    .preview-company {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .company-logo {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        object-fit: cover;
    }
    
    .company-info h4 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.2rem;
    }
    
    .company-info p {
        font-size: 0.9rem;
        color: #6c757d;
    }
    
    .preview-date {
        font-size: 0.9rem;
        color: #6c757d;
    }
    
    .preview-body {
        padding: 2rem;
    }
    
    .preview-body h2 {
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: var(--dark);
    }
    
    .preview-category-tag {
        margin-bottom: 1.5rem;
    }
    
    .tag {
        display: inline-block;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }
    
    .tag.job {
        background-color: #007bff;
        color: white;
    }
    
    .tag.internship {
        background-color: #17a2b8;
        color: white;
    }
    
    .tag.news {
        background-color: #ffc107;
        color: #212529;
    }
    
    .tag.event {
        background-color: #6f42c1;
        color: white;
    }
    
    .preview-content {
        line-height: 1.8;
        font-size: 1rem;
    }
    
    .preview-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1.5rem 2rem;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
    }
    
    .preview-stats {
        display: flex;
        gap: 1.5rem;
    }
    
    .stat-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
        color: #6c757d;
    }
    
    .preview-actions {
        display: flex;
        gap: 1rem;
    }
    
    .preview-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        border: none;
        cursor: not-allowed;
        opacity: 0.7;
        transition: var(--transition);
    }
    
    .preview-btn.apply {
        background-color: var(--primary-color);
        color: white;
    }
    
    .preview-btn.save {
        background-color: #6c757d;
        color: white;
    }
    
    /* Styles pour les alertes */
    .alert {
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        border-radius: 8px;
        font-weight: 500;
    }
    
    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
</style>
{% endblock %}



















==================================================

Fichier: templates\entreprise\publication_form.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\publication_form.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}{{ edit_mode ? 'Modifier la publication' : 'Nouvelle publication' }}{% endblock %}

{% block body %}
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'entreprise/_publication_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="publication-form-card">
            <div class="form-header">
                <h1 class="form-title">{{ edit_mode ? 'Modifier la publication' : 'Nouvelle publication' }}</h1>
                <a href="{{ path('entreprise_publication_index') }}" class="btn-secondary">
                    <i class="fas fa-arrow-left"></i> Retour aux publications
                </a>
            </div>
            
            {{ form_start(form, {'attr': {'class': 'publication-form'}}) }}
                <div class="form-group">
                    {{ form_label(form.title) }}
                    {{ form_widget(form.title) }}
                    {{ form_errors(form.title) }}
                </div>
                
                <div class="form-group">
                    {{ form_label(form.category) }}
                    {{ form_widget(form.category) }}
                    {{ form_errors(form.category) }}
                </div>
                
                <div class="form-group">
                    {{ form_label(form.content) }}
                    {{ form_widget(form.content) }}
                    {{ form_errors(form.content) }}
                </div>
                
                <div class="form-actions">
                    <button type="submit" class="btn-primary">
                        <i class="fas fa-save"></i> {{ edit_mode ? 'Mettre à jour' : 'Enregistrer' }}
                    </button>
                    {% if edit_mode %}
                        <a href="{{ path('entreprise_publication_show', {'id': publication.id}) }}" class="btn-secondary">
                            <i class="fas fa-times"></i> Annuler
                        </a>
                    {% else %}
                        <a href="{{ path('entreprise_publication_index') }}" class="btn-secondary">
                            <i class="fas fa-times"></i> Annuler
                        </a>
                    {% endif %}
                </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #d62828;
        --secondary-color: #ba181b;
        --accent-color: #e5383b;
        --light-color: #f5f3f4;
        --white: #ffffff;
        --dark: #161a1d;
        --medium-gray: #b1a7a6;
        --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--light-color);
        color: var(--dark);
        min-height: 100vh;
    }

    .dashboard-container {
        display: flex;
        min-height: 100vh;
    }

    /* Sidebar styles */
    .sidebar {
        width: 300px;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        padding: 2rem;
        position: relative;
        overflow: hidden;
        box-shadow: var(--shadow);
    }

    .sidebar::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
        opacity: 0.15;
        z-index: 0;
    }

    .profile-section {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--white);
        position: relative;
        z-index: 1;
    }

    .profile-img {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        object-fit: cover;
        border: 4px solid var(--white);
        margin-bottom: 1rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .profile-name {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .profile-email {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .nav-menu {
        margin-top: 2rem;
        position: relative;
        z-index: 1;
    }

    .nav-item {
        display: flex;
        align-items: center;
        padding: 0.8rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        color: rgba(255, 255, 255, 0.9);
        text-decoration: none;
        transition: var(--transition);
        position: relative;
    }

    .nav-item i {
        margin-right: 10px;
        font-size: 1.1rem;
    }

    .nav-item:hover, .nav-item.active {
        background-color: rgba(255, 255, 255, 0.2);
        color: var(--white);
        transform: translateX(5px);
    }

    /* Main Content */
    .main-content {
        flex: 1;
        padding: 2rem;
        background-color: var(--white);
        overflow-y: auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .page-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--dark);
        position: relative;
        display: inline-block;
    }

    .page-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 0;
        width: 50px;
        height: 4px;
        background: var(--primary-color);
        border-radius: 2px;
    }

    .btn-secondary {
        background-color: #f8f9fa;
        color: #6c757d;
        border: 1px solid #dee2e6;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
    }

    .btn-secondary i {
        margin-right: 8px;
    }

    .btn-secondary:hover {
        background-color: #e9ecef;
        transform: translateY(-3px);
    }

    /* Form Styles */
    .form-card {
        background: var(--white);
        border-radius: 15px;
        padding: 2rem;
        box-shadow: var(--shadow);
        margin-bottom: 2rem;
        border: 1px solid rgba(0, 0, 0, 0.05);
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: var(--dark);
    }

    .form-control {
        width: 100%;
        padding: 0.8rem 1rem;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(214, 40, 40, 0.25);
        outline: none;
    }

    .form-check {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
    }

    .form-check-input {
        margin-right: 0.5rem;
    }

    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn-cancel {
        background-color: #f8f9fa;
        color: #6c757d;
        border: 1px solid #ced4da;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
    }

    .btn-cancel:hover {
        background-color: #e9ecef;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--white);
        border: none;
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-block;
        box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(214, 
    /* Styles pour le formulaire */
    .publication-form-card {
        background: var(--white);
        border-radius: 15px;
        padding: 2.5rem;
        box-shadow: var(--shadow);
        margin-bottom: 2rem;
        position: relative;
        transition: var(--transition);
        border: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    }
    
    .form-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--dark);
        position: relative;
        display: inline-block;
    }
    
    .form-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 0;
        width: 50px;
        height: 4px;
        background: var(--primary-color);
        border-radius: 2px;
    }
    
    .publication-form {
        margin-top: 1.5rem;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: var(--dark);
    }
    
    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-family: 'Poppins', sans-serif;
        font-size: 1rem;
        transition: var(--transition);
    }
    
    .form-control:focus {
        border-color: var(--primary-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-start;
        gap: 1rem;
        margin-top: 2rem;
    }
    
    .btn-primary {
        background-color: var(--primary-color);
        color: var(--white);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }
    
    .btn-primary:hover {
        background-color: var(--secondary-color);
        transform: translateY(-2px);
    }
    
    .btn-secondary {
        background-color: #6c757d;
        color: var(--white);
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }
    
    .btn-secondary:hover {
        background-color: #5a6268;
        transform: translateY(-2px);
    }
</style>
{% endblock %}







==================================================

Fichier: templates\entreprise\statistics.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\statistics.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Statistiques de vos publications{% endblock %}

{% block body %}
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'entreprise/_publication_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="page-title">
            <i class="fas fa-chart-line"></i> Statistiques de vos publications
        </h1>
        
        <!-- Global Stats -->
        <h2 class="section-title"><i class="fas fa-chart-pie"></i> Vue d'ensemble</h2>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="stat-info">
                    <h3>{{ globalStats.totalPublications }}</h3>
                    <p>Publications totales</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-info">
                    <h3>{{ globalStats.publishedPublications }}</h3>
                    <p>Publications actives</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-eye"></i>
                </div>
                <div class="stat-info">
                    <h3>{{ globalStats.totalViews }}</h3>
                    <p>Vues totales</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-paper-plane"></i>
                </div>
                <div class="stat-info">
                    <h3>{{ globalStats.totalApplications }}</h3>
                    <p>Candidatures reçues</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-bookmark"></i>
                </div>
                <div class="stat-info">
                    <h3>{{ globalStats.totalSaved }}</h3>
                    <p>Enregistrements</p>
                </div>
            </div>
        </div>
        
        <!-- Publications Stats -->
        <h2 class="section-title"><i class="fas fa-list"></i> Détails par publication</h2>
        
        <div class="table-responsive">
            <table class="stats-table">
                <thead>
                    <tr>
                        <th>Titre</th>
                        <th>Catégorie</th>
                        <th>Statut</th>
                        <th>Date</th>
                        <th>Vues</th>
                        <th>Candidatures</th>
                        <th>Enregistrements</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for stat in publicationStats %}
                    <tr>
                        <td>{{ stat.title }}</td>
                        <td>
                            {% if stat.category == 'job_offer' %}
                                <span class="category job">Offre d'emploi</span>
                            {% elseif stat.category == 'internship' %}
                                <span class="category internship">Stage</span>
                            {% elseif stat.category == 'news' %}
                                <span class="category news">Actualité</span>
                            {% elseif stat.category == 'event' %}
                                <span class="category event">Événement</span>
                            {% endif %}
                        </td>
                        <td>
                            {% if stat.isPublished %}
                                <span class="status published">Publié</span>
                            {% else %}
                                <span class="status draft">Brouillon</span>
                            {% endif %}
                        </td>
                        <td>{{ stat.createdAt|date('d/m/Y') }}</td>
                        <td>{{ stat.views }}</td>
                        <td>{{ stat.applications }}</td>
                        <td>{{ stat.saved }}</td>
                        <td>
                            <a href="{{ path('entreprise_publication_show', {'id': stat.id}) }}" class="btn-action">
                                <i class="fas fa-eye"></i>
                            </a>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        
        <!-- Charts Section -->
        <h2 class="section-title"><i class="fas fa-chart-bar"></i> Graphiques</h2>
        <div class="charts-container">
            <div class="chart-card">
                <h3>Interactions par publication</h3>
                <canvas id="publicationsChart"></canvas>
            </div>
        </div>
    </div>
</div>

<style>
    /* Table Styles */
    .table-responsive {
        overflow-x: auto;
        margin-bottom: 2rem;
    }
    
    .stats-table {
        width: 100%;
        border-collapse: collapse;
        background: var(--white);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: var(--shadow);
    }
    
    .stats-table th, .stats-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid rgba(0,0,0,0.05);
    }
    
    .stats-table th {
        background-color: rgba(214, 40, 40, 0.05);
        font-weight: 600;
        color: var(--dark);
    }
    
    .stats-table tr:hover {
        background-color: rgba(0,0,0,0.02);
    }
    
    /* Status and Category Tags */
    .status, .category {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 50px;
        font-size: 0.8rem;
        font-weight: 500;
    }
    
    .status.published {
        background-color: rgba(40, 167, 69, 0.1);
        color: #28a745;
    }
    
    .status.draft {
        background-color: rgba(108, 117, 125, 0.1);
        color: #6c757d;
    }
    
    .category.job {
        background-color: rgba(0, 123, 255, 0.1);
        color: #007bff;
    }
    
    .category.internship {
        background-color: rgba(255, 193, 7, 0.1);
        color: #ffc107;
    }
    
    .category.news {
        background-color: rgba(23, 162, 184, 0.1);
        color: #17a2b8;
    }
    
    .category.event {
        background-color: rgba(111, 66, 193, 0.1);
        color: #6f42c1;
    }
    
    /* Chart Styles */
    .charts-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .chart-card {
        background: var(--white);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
    }
    
    .chart-card h3 {
        margin-bottom: 1rem;
        font-size: 1.2rem;
        color: var(--dark);
    }
    
    @media (min-width: 992px) {
        .charts-container {
            grid-template-columns: 1fr;
        }
    }
    
    /* Action Buttons */
    .btn-action {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background-color: rgba(214, 40, 40, 0.1);
        color: var(--primary-color);
        transition: var(--transition);
    }
    
    .btn-action:hover {
        background-color: var(--primary-color);
        color: var(--white);
    }
</style>

{% block javascripts %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Préparer les données pour le graphique
    const publicationTitles = {{ publicationStats|map(stat => stat.title)|json_encode|raw }};
    const viewsData = {{ publicationStats|map(stat => stat.views)|json_encode|raw }};
    const applicationsData = {{ publicationStats|map(stat => stat.applications)|json_encode|raw }};
    const savedData = {{ publicationStats|map(stat => stat.saved)|json_encode|raw }};
    
    // Créer le graphique des publications
    const publicationsCtx = document.getElementById('publicationsChart').getContext('2d');
    new Chart(publicationsCtx, {
        type: 'bar',
        data: {
            labels: publicationTitles,
            datasets: [
                {
                    label: 'Vues',
                    data: viewsData,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Candidatures',
                    data: applicationsData,
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Enregistrements',
                    data: savedData,
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }
            ]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});
</script>
{% endblock %}
{% endblock %}
==================================================

Fichier: templates\entreprise\_publication_sidebar.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\_publication_sidebar.html.twig
-----
<div class="sidebar">
    <div class="profile-section">
        {% if user.profileImage %}
            <img src="{{ asset(user.profileImage) }}" alt="Logo de l'entreprise" class="profile-img" />
        {% else %}
            <img src="{{ asset('img/fxchat.png') }}" alt="Logo par défaut" class="profile-img" />
        {% endif %}
        <h3 class="profile-name">{{ user.username }}</h3>
        <p class="profile-email">{{ user.email }}</p>
    </div>
    
    <div class="nav-menu">
        <a href="{{ path('app_entreprise_home') }}" class="nav-item">
            <i class="fas fa-home"></i> Dashboard
        </a>
        <a href="{{ path('entreprise_edit_profile') }}" class="nav-item">
            <i class="fas fa-user-edit"></i> Profil
        </a>
        <a href="{{ path('entreprise_publication_index') }}" class="nav-item active">
            <i class="fas fa-briefcase"></i> Publications
        </a>
        <a href="#" class="nav-item">
            <i class="fas fa-users"></i> Candidats
        </a>
        <a href="#" class="nav-item">
            <i class="fas fa-comments"></i> Entretiens
        </a>
        <a href="#" class="nav-item">
            <i class="fas fa-chart-line"></i> Statistiques
        </a>
        <a href="{{ path('app_logout') }}" class="nav-item">
            <i class="fas fa-sign-out-alt"></i> Déconnexion
        </a>
    </div>
</div>
==================================================

Fichier: templates\entreprise\_sidebar.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\_sidebar.html.twig
-----
<div class="sidebar">
    <div class="profile-section">
        {% if app.user.profileImage %}
            <img src="{{ asset(app.user.profileImage) }}" alt="Logo de l'entreprise" class="profile-img" />
        {% else %}
            <img src="{{ asset('img/fxchat.png') }}" alt="Logo par défaut" class="profile-img" />
        {% endif %}
        <h3 class="profile-name">{{ app.user.username }}</h3>
        <p class="profile-email">{{ app.user.email }}</p>
    </div>
    
    <div class="nav-menu">
        <a href="{{ path('app_entreprise_home') }}" class="nav-item {% if app.request.get('_route') == 'app_entreprise_home' %}active{% endif %}">
            <i class="fas fa-home"></i> Dashboard
        </a>
        <a href="{{ path('entreprise_edit_profile') }}" class="nav-item {% if app.request.get('_route') == 'entreprise_edit_profile' %}active{% endif %}">
            <i class="fas fa-user-edit"></i> Edit Profile
        </a>
        <a href="{{ path('entreprise_publication_index') }}" class="nav-item {% if app.request.get('_route') starts with 'entreprise_publication' %}active{% endif %}">
            <i class="fas fa-briefcase"></i> Publications
        </a>
        <a href="{{ path('entreprise_applications_index') }}" class="nav-item {% if app.request.get('_route') starts with 'entreprise_applications' %}active{% endif %}">
            <i class="fas fa-users"></i> Candidats
        </a>
        <a href="#" class="nav-item">
            <i class="fas fa-comments"></i> Entretiens
        </a>
        <a href="#" class="nav-item">
            <i class="fas fa-chart-line"></i> Statistiques
        </a>
        <a href="{{ path('app_logout') }}" class="nav-item">
            <i class="fas fa-sign-out-alt"></i> Déconnexion
        </a>
    </div>
</div>
==================================================

Fichier: templates\entreprise\applications\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\applications\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Candidatures reçues{% endblock %}

{% block body %}
<div class="application-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('app_entreprise_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('entreprise_edit_profile') }}" class="nav-item">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('entreprise_publication_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Mes Offres
            </a>
            <a href="{{ path('entreprise_applications_index') }}" class="nav-item active">
                <i class="fas fa-paper-plane"></i> Candidatures
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Messages
                {% if unread_messages_count is defined %}
                    {% set unread_count = unread_messages_count() %}
                    {% if unread_count > 0 %}
                        <span class="badge">{{ unread_count }}</span>
                    {% endif %}
                {% endif %}
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="application-content">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="applications-header">
            <h1 class="applications-title">Candidatures reçues</h1>
            <div class="applications-count">{{ applications|length }} candidature(s)</div>
        </div>
        
        {% if applications is empty %}
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <h3 class="empty-title">Aucune candidature</h3>
                <p class="empty-text">Vous n'avez pas encore reçu de candidatures pour vos offres d'emploi.</p>
                <a href="{{ path('entreprise_publication_index') }}" class="btn-action">Voir mes offres</a>
            </div>
        {% else %}
            <div class="status-tabs">
                <div class="status-tab active" data-status="all">
                    <i class="fas fa-list"></i> Toutes
                </div>
                <div class="status-tab" data-status="pending">
                    <i class="fas fa-clock"></i> En attente
                </div>
                <div class="status-tab" data-status="accepted">
                    <i class="fas fa-check-circle"></i> Acceptées
                </div>
                <div class="status-tab" data-status="rejected">
                    <i class="fas fa-times-circle"></i> Rejetées
                </div>
            </div>
            
            <div class="applications-table-container">
                <table class="applications-table">
                    <thead>
                        <tr>
                            <th>Candidat</th>
                            <th>Offre</th>
                            <th>Date</th>
                            <th>Statut</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for application in applications %}
                            <tr class="application-row" data-status="{{ application.status }}">
                                <td>
                                    <div class="candidate-info">
                                        <div class="candidate-avatar">
                                            {% if application.user.profileImage %}
                                                <img src="{{ asset(application.user.profileImage) }}" alt="{{ application.user.username }}">
                                            {% else %}
                                                <img src="{{ asset('img/fxchat.png') }}" alt="{{ application.user.username }}">
                                            {% endif %}
                                        </div>
                                        <div class="candidate-details">
                                            <div class="candidate-name">{{ application.user.firstName }} {{ application.user.lastName }}</div>
                                            <div class="candidate-email">{{ application.user.email }}</div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="job-title">{{ application.publication.title }}</div>
                                    <div class="job-company">{{ application.publication.user.companyName }}</div>
                                </td>
                                <td>
                                    <div class="application-date">
                                        <i class="far fa-calendar-alt"></i> {{ application.createdAt|date('d/m/Y') }}
                                    </div>
                                </td>
                                <td>
                                    {% if application.status == 'pending' %}
                                        <span class="application-status status-pending">En attente</span>
                                    {% elseif application.status == 'accepted' %}
                                        <span class="application-status status-accepted">Acceptée</span>
                                    {% elseif application.status == 'rejected' %}
                                        <span class="application-status status-rejected">Rejetée</span>
                                    {% endif %}
                                </td>
                                <td>
                                    <div class="application-actions">
                                        <a href="{{ path('entreprise_applications_view', {'id': application.id}) }}" class="btn-action">
                                            <i class="fas fa-eye"></i> Voir
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        {% endif %}
    </div>
</div>

<style>
    :root {
        --primary-color: #d62828;
        --secondary-color: #d62828;
        --accent-color: #d62828;
        --dark: #6c757d;
        --medium-gray: #6c757d;
        --light-gray: #dee2e6;
        --white: #dee2e6;
        --light-color: #6c757d;
        --light-bg: #dee2e6;
        --success: #28a745;
        --danger: #dc3545;
        --shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }
    
    .application-container {
        display: flex;
        min-height: 100vh;
    }
    
    .sidebar {
        width: 250px;
        background-color: var(--dark);
        color: var(--white);
        padding: 0;
        box-shadow: var(--shadow);
    }
    
    .application-content {
        flex: 1;
        padding: 2rem;
        background-color: var(--light-bg);
    }
    
    .profile-section {
        text-align: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    }
    
    .profile-img {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 1rem;
        border: 3px solid var(--white);
        box-shadow: var(--shadow);
    }
    
    .profile-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.3rem;
    }
    
    .profile-email {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .nav-menu {
        padding: 1rem 0;
    }
    
    .nav-item {
        display: flex;
        align-items: center;
        padding: 0.8rem 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        transition: var(--transition);
        position: relative;
    }
    
    .nav-item i {
        margin-right: 0.8rem;
        width: 20px;
        text-align: center;
        font-size: 1.1rem;
    }
    
    .nav-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--white);
    }
    
    .nav-item.active {
        background-color: rgba(255, 255, 255, 0.15);
        color: var(--white);
        font-weight: 500;
        border-left: 4px solid var(--accent-color);
    }
    
    .badge {
        position: absolute;
        right: 15px;
        background-color: var(--accent-color);
        color: var(--dark);
        font-size: 0.7rem;
        font-weight: 600;
        padding: 0.2rem 0.5rem;
        border-radius: 10px;
    }
    
    .applications-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }
    
    .applications-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--dark);
    }
    
    .applications-count {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--white);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
        box-shadow: var(--shadow);
    }
    
    .status-tabs {
        display: flex;
        background-color: var(--white);
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
    }
    
    .status-tab {
        flex: 1;
        padding: 1rem;
        text-align: center;
        cursor: pointer;
        transition: var(--transition);
        font-weight: 500;
        color: var(--medium-gray);
        border-bottom: 3px solid transparent;
    }
    
    .status-tab i {
        margin-right: 0.5rem;
    }
    
    .status-tab:hover {
        background-color: var(--light-color);
    }
    
    .status-tab.active {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
        background-color: rgba(214, 40, 40, 0.05);
    }
    
    .applications-table-container {
        background: var(--white);
        border-radius: 15px;
        box-shadow: var(--shadow);
        overflow: hidden;
    }
    
    .applications-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .applications-table th {
        background-color: var(--light-color);
        padding: 1.2rem 1.5rem;
        text-align: left;
        font-weight: 600;
        color: var(--dark);
    }
    
    .applications-table td {
        padding: 1.2rem 1.5rem;
        border-top: 1px solid var(--light-gray);
    }
    
    .applications-table tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }
    
    .candidate-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .candidate-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: hidden;
    }
    
    .candidate-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .candidate-name {
        font-weight: 600;
        color: var(--dark);
    }
    
    .candidate-email {
        font-size: 0.8rem;
        color: var(--medium-gray);
    }
    
    .job-title {
        font-weight: 500;
        color: var(--dark);
    }
    
    .job-company {
        font-size: 0.9rem;
        color: var(--medium-gray);
    }
    
    .application-date {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--medium-gray);
        font-size: 0.9rem;
    }
    
    .application-status {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        display: inline-block;
    }
    
    .status-pending {
        background-color: var(--accent-color);
        color: var(--dark);
    }
    
    .status-accepted {
        background-color: var(--success);
        color: var(--white);
    }
    
    .status-rejected {
        background-color: var(--danger);
        color: var(--white);
    }
    
    .application-actions {
        display: flex;
        gap: 0.5rem;
    }
    
    .btn-action {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: var(--white);
        border: none;
        box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
    }
    
    .btn-action i {
        margin-right: 0.5rem;
    }
    
    .btn-action:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(52, 152, 219, 0.4);
    }
    
    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        background-color: var(--white);
        border-radius: 15px;
        box-shadow: var(--shadow);
        animation: fadeIn 0.5s ease;
    }
    
    .empty-icon {
        font-size: 4rem;
        color: var(--light-gray);
        margin-bottom: 1.5rem;
    }
    
    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: var(--dark);
    }
    
    .empty-text {
        color: var(--medium-gray);
        margin-bottom: 1.5rem;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Responsive Design */
    @media (max-width: 992px) {
        .application-container {
            flex-direction: column;
        }
        
        .sidebar {
            width: 100%;
            order: 2;
        }
        
        .application-content {
            order: 1;
        }
        
        .profile-section {
            padding: 1rem;
        }
        
        .profile-img {
            width: 60px;
            height: 60px;
        }
        
        .nav-menu {
            display: flex;
            flex-wrap: wrap;
            padding: 0.5rem;
        }
        
        .nav-item {
            flex: 1 0 auto;
            min-width: 120px;
            justify-content: center;
            padding: 0.8rem;
        }
        
        .nav-item i {
            margin-right: 0;
            margin-bottom: 0.3rem;
            font-size: 1.2rem;
        }
    }
    
    @media (max-width: 768px) {
        .applications-table {
            display: block;
            overflow-x: auto;
        }
        
        .status-tabs {
            flex-wrap: wrap;
        }
        
        .status-tab {
            flex: 1 0 50%;
            padding: 0.8rem;
        }
    }
    
    @media (max-width: 576px) {
        .applications-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        
        .applications-count {
            align-self: flex-start;
        }
        
        .status-tab {
            flex: 1 0 100%;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filtrage par statut
        const statusTabs = document.querySelectorAll('.status-tab');
        const applicationRows = document.querySelectorAll('.application-row');
        
        statusTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Mettre à jour l'onglet actif
                statusTabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // Filtrer les candidatures
                const status = this.getAttribute('data-status');
                
                applicationRows.forEach(row => {
                    if (status === 'all' || row.getAttribute('data-status') === status) {
                        row.style.display = 'table-row';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
        });
        
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll('.application-row');
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    setTimeout(() => {
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        };
        
        // Initial state for animation
        const animatedItems = document.querySelectorAll('.application-row');
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });
        
        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);
    });
</script>
{% endblock %}

==================================================

Fichier: templates\entreprise\applications\view.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\entreprise\applications\view.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Détail de la candidature{% endblock %}

{% block body %}
<div class="application-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('app_entreprise_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('entreprise_edit_profile') }}" class="nav-item">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('entreprise_publication_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Mes Offres
            </a>
            <a href="{{ path('entreprise_applications_index') }}" class="nav-item active">
                <i class="fas fa-paper-plane"></i> Candidatures
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Messages
                {% if unread_messages_count is defined %}
                    {% set unread_count = unread_messages_count() %}
                    {% if unread_count > 0 %}
                        <span class="badge">{{ unread_count }}</span>
                    {% endif %}
                {% endif %}
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="application-content">
        <div class="back-link">
            <a href="{{ path('entreprise_applications_index') }}" class="btn-back">
                <i class="fas fa-arrow-left"></i> Retour aux candidatures
            </a>
        </div>
        
        <div class="application-header">
            <h1 class="application-title">Détail de la candidature</h1>
        </div>
        
        <div class="application-card">
            <div class="card-header">
                <div class="application-job">
                    <h2>{{ application.publication.title }}</h2>
                    <div class="job-company">
                        <i class="fas fa-building"></i> {{ application.publication.user.companyName }}
                    </div>
                </div>
                <div class="application-date">
                    <i class="far fa-calendar-alt"></i> Postulé le {{ application.createdAt|date('d/m/Y') }}
                </div>
            </div>
            
            <div class="card-body">
                <div class="section">
                    <h3 class="section-title">
                        <i class="fas fa-user-circle"></i> Informations du candidat
                    </h3>
                    <div class="candidate-profile">
                        <div class="candidate-avatar">
                            {% if application.user.profileImage %}
                                <img src="{{ asset(application.user.profileImage) }}" alt="{{ application.user.username }}">
                            {% else %}
                                <img src="{{ asset('img/fxchat.png') }}" alt="{{ application.user.username }}">
                            {% endif %}
                        </div>
                        <div class="candidate-details">
                            <div class="candidate-name">{{ application.user.firstName }} {{ application.user.lastName }}</div>
                            <div class="candidate-email">
                                <i class="fas fa-envelope"></i> {{ application.user.email }}
                            </div>
                            {% if application.user.phone %}
                            <div class="candidate-phone">
                                <i class="fas fa-phone"></i> {{ application.user.phone }}
                            </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
                
                <div class="section">
                    <h3 class="section-title">
                        <i class="fas fa-comment-alt"></i> Message de candidature
                    </h3>
                    <div class="message-content">
                        {{ application.message|nl2br }}
                    </div>
                </div>
                
                {% if application.resumeFilename %}
                <div class="section">
                    <h3 class="section-title">
                        <i class="fas fa-file-alt"></i> CV du candidat
                    </h3>
                    <a href="{{ asset('uploads/resumes/' ~ application.resumeFilename) }}" target="_blank" class="btn-download">
                        <i class="fas fa-download"></i> Télécharger le CV
                    </a>
                </div>
                {% endif %}
                
                <div class="section">
                    <h3 class="section-title">
                        <i class="fas fa-info-circle"></i> Statut de la candidature
                    </h3>
                    <div class="status-container">
                        {% if application.status == 'pending' %}
                            <span class="application-status status-pending">En attente</span>
                        {% elseif application.status == 'accepted' %}
                            <span class="application-status status-accepted">Acceptée</span>
                            {% if application.processedAt %}
                                <div class="processed-date">
                                    <i class="far fa-calendar-check"></i> Traitée le {{ application.processedAt|date('d/m/Y') }}
                                </div>
                            {% endif %}
                        {% elseif application.status == 'rejected' %}
                            <span class="application-status status-rejected">Rejetée</span>
                            {% if application.processedAt %}
                                <div class="processed-date">
                                    <i class="far fa-calendar-check"></i> Traitée le {{ application.processedAt|date('d/m/Y') }}
                                </div>
                            {% endif %}
                        {% endif %}
                        
                        {% if application.feedback %}
                            <div class="feedback">
                                <h4 class="feedback-title">
                                    <i class="fas fa-comment-dots"></i> Commentaire
                                </h4>
                                <div class="feedback-content">
                                    {{ application.feedback|nl2br }}
                                </div>
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
            
            <div class="card-footer">
                {% if application.status == 'pending' %}
                    <div class="application-actions">
                        <a href="{{ path('entreprise_applications_accept', {'id': application.id}) }}" class="btn-action btn-accept">
                            <i class="fas fa-check"></i> Accepter
                        </a>
                        <button type="button" class="btn-action btn-reject" data-bs-toggle="modal" data-bs-target="#rejectModal">
                            <i class="fas fa-times"></i> Rejeter
                        </button>
                    </div>
                {% else %}
                    <div class="status-info">
                        {% if application.status == 'accepted' %}
                            <div class="status-badge accepted">
                                <i class="fas fa-check-circle"></i> Candidature acceptée
                            </div>
                        {% elseif application.status == 'rejected' %}
                            <div class="status-badge rejected">
                                <i class="fas fa-times-circle"></i> Candidature rejetée
                            </div>
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Modal de rejet -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-labelledby="rejectModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectModalLabel">Rejeter la candidature</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form action="{{ path('entreprise_applications_reject', {'id': application.id}) }}" method="post">
                <div class="modal-body">
                    <div class="form-group">
                        <label for="rejection_reason" class="form-label">Motif du rejet (optionnel)</label>
                        <textarea class="form-control" id="rejection_reason" name="rejection_reason" rows="4"></textarea>
                        <div class="form-text">Ce message sera visible par le candidat.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <button type="submit" class="btn btn-danger">Confirmer le rejet</button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #d62828;
        --secondary-color: #d62828;
        --accent-color: #dee2e6;
        --dark: #6c757d;
        --medium-gray: #6c757d;
        --light-gray: #dee2e6;
        --white: #dee2e6;
        --light-color: #6c757d;
        --light-bg: #dee2e6;
        --success: #28a745;
        --danger: #dc3545;
        --shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }
    
    .application-container {
        display: flex;
        min-height: 100vh;
    }
    
    .sidebar {
        width: 250px;
        background-color: var(--dark);
        color: var(--white);
        padding: 0;
        box-shadow: var(--shadow);
    }
    
    .application-content {
        flex: 1;
        padding: 2rem;
        background-color: var(--light-bg);
    }
    
    .profile-section {
        text-align: center;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
    }
    
    .profile-img {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 1rem;
        border: 3px solid var(--white);
        box-shadow: var(--shadow);
    }
    
    .profile-name {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 0.3rem;
    }
    
    .profile-email {
        font-size: 0.9rem;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .nav-menu {
        padding: 1rem 0;
    }
    
    .nav-item {
        display: flex;
        align-items: center;
        padding: 0.8rem 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        text-decoration: none;
        transition: var(--transition);
        position: relative;
    }
    
    .nav-item i {
        margin-right: 0.8rem;
        width: 20px;
        text-align: center;
        font-size: 1.1rem;
    }
    
    .nav-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--white);
    }
    
    .nav-item.active {
        background-color: rgba(255, 255, 255, 0.15);
        color: var(--white);
        font-weight: 500;
        border-left: 4px solid var(--accent-color);
    }
    
    .badge {
        position: absolute;
        right: 15px;
        background-color: var(--accent-color);
        color: var(--dark);
        font-size: 0.7rem;
        font-weight: 600;
        padding: 0.2rem 0.5rem;
        border-radius: 10px;
    }
    
    .back-link {
        margin-bottom: 1.5rem;
    }
    
    .btn-back {
        display: inline-flex;
        align-items: center;
        color: var(--medium-gray);
        text-decoration: none;
        transition: var(--transition);
        font-weight: 500;
    }
    
    .btn-back i {
        margin-right: 0.5rem;
    }
    
    .btn-back:hover {
        color: var(--primary-color);
    }
    
    .application-header {
        margin-bottom: 2rem;
    }
    
    .application-title {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--dark);
    }
    
    .application-card {
        background: var(--white);
        border-radius: 15px;
        box-shadow: var(--shadow);
        overflow: hidden;
        margin-bottom: 2rem;
    }
    
    .card-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        padding: 1.5rem;
        color: var(--white);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .application-job h2 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: var(--white);
    }
    
    .job-company {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        opacity: 0.9;
    }
    
    .job-company i {
        margin-right: 0.5rem;
    }
    
    .application-date {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        opacity: 0.9;
    }
    
    .application-date i {
        margin-right: 0.5rem;
    }
    
    .card-body {
        padding: 2rem;
    }
    
    .section {
        margin-bottom: 2.5rem;
    }
    
    .section-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: var(--dark);
        display: flex;
        align-items: center;
    }
    
    .section-title i {
        margin-right: 0.8rem;
        color: var(--primary-color);
    }
    
    .candidate-profile {
        display: flex;
        align-items: center;
        gap: 1.5rem;
    }
    
    .candidate-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        overflow: hidden;
    }
    
    .candidate-avatar img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .candidate-details {
        flex: 1;
    }
    
    .candidate-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: var(--dark);
    }
    
    .candidate-email, .candidate-phone {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: var(--medium-gray);
        margin-bottom: 0.3rem;
    }
    
    .candidate-email i, .candidate-phone i {
        margin-right: 0.5rem;
    }
    
    .message-content {
        background-color: var(--light-color);
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid var(--primary-color);
        line-height: 1.6;
    }
    
    .btn-download {
        display: inline-flex;
        align-items: center;
        padding: 0.8rem 1.5rem;
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: var(--white);
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        transition: var(--transition);
        box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
    }
    
    .btn-download i {
        margin-right: 0.5rem;
    }
    
    .btn-download:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(52, 152, 219, 0.4);
    }
    
    .status-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    
    .application-status {
        padding: 0.6rem 1.2rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
        text-transform: uppercase;
        display: inline-flex;
        align-items: center;
        width: fit-content;
    }
    
    .application-status i {
        margin-right: 0.5rem;
    }
    
    .status-pending {
        background-color: var(--accent-color);
        color: var(--dark);
    }
    
    .status-accepted {
        background-color: var(--success);
        color: var(--white);
    }
    
    .status-rejected {
        background-color: var(--danger);
        color: var(--white);
    }
    
    .processed-date {
        display: flex;
        align-items: center;
        font-size: 0.9rem;
        color: var(--medium-gray);
    }
    
    .processed-date i {
        margin-right: 0.5rem;
    }
    
    .feedback {
        background-color: var(--light-color);
        padding: 1.5rem;
        border-radius: 10px;
        margin-top: 1rem;
    }
    
    .feedback-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
    }
    
    .feedback-title i {
        margin-right: 0.5rem;
        color: var(--primary-color);
    }
    
    .feedback-content {
        line-height: 1.6;
    }
    
    .card-footer {
        padding: 1.5rem;
        background-color: var(--light-color);
        border-top: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .application-actions {
        display: flex;
        gap: 1rem;
    }
    
    .btn-action {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        font-size: 0.9rem;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        border: none;
    }
    
    .btn-action i {
        margin-right: 0.5rem;
    }
    
    .btn-accept {
        background: linear-gradient(135deg, var(--success), #218838);
        color: var(--white);
        box-shadow: 0 4px 10px rgba(40, 167, 69, 0.3);
    }
    
    .btn-accept:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(40, 167, 69, 0.4);
    }
    
    .btn-reject {
        background: linear-gradient(135deg, var(--danger), #c82333);
        color: var(--white);
        box-shadow: 0 4px 10px rgba(220, 53, 69, 0.3);
    }
    
    .btn-reject:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(220, 53, 69, 0.4);
    }
    
    .status-info {
        display: flex;
        justify-content: center;
    }
    
    .status-badge {
        padding: 0.8rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
    }
    
    .status-badge i {
        margin-right: 0.5rem;
        font-size: 1.1rem;
    }
    
    .status-badge.accepted {
        background-color: rgba(40, 167, 69, 0.1);
        color: var(--success);
    }
    
    .status-badge.rejected {
        background-color: rgba(220, 53, 69, 0.1);
        color: var(--danger);
    }
    
    /* Modal Styles */
    .modal-content {
        border-radius: 15px;
        overflow: hidden;
        border: none;
        box-shadow: var(--shadow);
    }
    
    .modal-header {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: var(--white);
        border-bottom: none;
    }
    
    .modal-title {
        font-weight: 600;
    }
    
    .btn-close {
        filter: invert(1);
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        display: block;
    }
    
    .form-control {
        border-radius: 8px;
        padding: 0.8rem;
        border: 1px solid var(--light-gray);
        transition: var(--transition);
    }
    
    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.25rem rgba(214, 40, 40, 0.25);
    }
    
    .form-text {
        font-size: 0.8rem;
        color: var(--medium-gray);
        margin-top: 0.5rem;
    }
    
    .modal-footer {
        border-top: none;
        padding: 1.5rem;
    }
    
    .btn-secondary {
        background-color: var(--medium-gray);
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
    }
    
    .btn-danger {
        background: linear-gradient(135deg, var(--danger), #c82333);
        border: none;
        padding: 0.6rem 1.2rem;
        border-radius: 8px;
    }
    
    /* Responsive Design */
    @media (max-width: 992px) {
        .application-container {
            flex-direction: column;
        }
        
        .sidebar {
            width: 100%;
            order: 2;
        }
        
        .application-content {
            order: 1;
        }
        
        .profile-section {
            padding: 1rem;
        }
        
        .profile-img {
            width: 60px;
            height: 60px;
        }
        
        .nav-menu {
            display: flex;
            flex-wrap: wrap;
            padding: 0.5rem;
        }
        
        .nav-item {
            flex: 1 0 auto;
            min-width: 120px;
            justify-content: center;
            padding: 0.8rem;
        }
        
        .nav-item i {
            margin-right: 0;
            margin-bottom: 0.3rem;
            font-size: 1.2rem;
        }
    }
    
    @media (max-width: 768px) {
        .card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
        
        .candidate-profile {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .application-actions {
            flex-direction: column;
        }
        
        .btn-action {
            width: 100%;
            justify-content: center;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments
        const animateElements = function() {
            const elements = document.querySelectorAll('.section, .card-footer');
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    setTimeout(() => {
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        };
        
        // Initial state for animation
        const animatedItems = document.querySelectorAll('.section, .card-footer');
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });
        
        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);
    });
</script>
{% endblock %}

==================================================

Fichier: templates\first_page\about.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\first_page\about.html.twig
-----
{# templates/first_page/about.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About - Esprit Career</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-red: #e63946;
            --dark-red: #c1121f;
            --light-gray: #f8f9fa;
            --medium-gray: #adb5bd;
            --dark-gray: #343a40;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-gray);
            color: var(--light-gray);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0px); }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Header */
        .main-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 100;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            animation: fadeIn 0.8s ease-out forwards;
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
        }

        .logo {
            height: 42px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        .logo:hover {
            transform: rotate(-5deg) scale(1.1);
        }

        .logo-text {
            font-size: 1.6rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .logo-container:hover .logo-text {
            letter-spacing: 1px;
        }

        .nav-links {
            display: flex;
            gap: 2.5rem;
        }

        .nav-link {
            color: var(--medium-gray);
            text-decoration: none;
            font-weight: 500;
            font-size: 1.05rem;
            transition: all 0.4s ease;
            position: relative;
        }

        .nav-link:hover {
            color: var(--light-gray);
        }

        .nav-link.active {
            color: var(--primary-red);
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-red);
            transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        /* Hero Section */
        .about-hero {
            min-height: 70vh;
            display: flex;
            align-items: center;
            padding: 8rem 5rem 5rem;
            position: relative;
            overflow: hidden;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1.8rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: slideInLeft 0.8s ease-out forwards;
            animation-delay: 0.2s;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            line-height: 1.7;
            color: var(--medium-gray);
            margin-bottom: 3rem;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
            animation-delay: 0.4s;
        }

        /* Mission Section */
        .mission-section {
            padding: 6rem 5rem;
            background-color: #1a1a2e;
        }

        .section-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .section-title {
            text-align: center;
            font-size: 2.8rem;
            margin-bottom: 5rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
        }

        .mission-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 4rem;
        }

        .mission-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 2.5rem;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            border: 1px solid rgba(255, 255, 255, 0.08);
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .mission-card:nth-child(1) { animation-delay: 0.2s; }
        .mission-card:nth-child(2) { animation-delay: 0.4s; }
        .mission-card:nth-child(3) { animation-delay: 0.6s; }

        .mission-card:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .mission-icon {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            color: var(--primary-red);
        }

        .mission-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--light-gray);
        }

        .mission-desc {
            color: var(--medium-gray);
            line-height: 1.7;
        }

        /* Team Section */
        .team-section {
            padding: 6rem 5rem;
            background: linear-gradient(135deg, #16213e 0%, #1a1a2e 100%);
        }

        .team-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 3rem;
        }

        .team-member {
            text-align: center;
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .team-member:nth-child(1) { animation-delay: 0.2s; }
        .team-member:nth-child(2) { animation-delay: 0.4s; }
        .team-member:nth-child(3) { animation-delay: 0.6s; }
        .team-member:nth-child(4) { animation-delay: 0.8s; }

        .member-photo {
            width: 180px;
            height: 180px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 1.5rem;
            border: 5px solid rgba(255, 255, 255, 0.1);
            transition: all 0.4s ease;
        }

        .team-member:hover .member-photo {
            transform: scale(1.05);
            border-color: var(--primary-red);
        }

        .member-name {
            font-size: 1.4rem;
            margin-bottom: 0.5rem;
            color: var(--light-gray);
        }

        .member-position {
            color: var(--primary-red);
            margin-bottom: 1rem;
            font-weight: 500;
        }

        .member-bio {
            color: var(--medium-gray);
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        .member-social {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }

        .social-icon {
            color: var(--medium-gray);
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .social-icon:hover {
            color: var(--primary-red);
            transform: translateY(-3px);
        }

        /* History Section */
        .history-section {
            padding: 6rem 5rem;
            background-color: #1a1a2e;
        }

        .timeline {
            position: relative;
            max-width: 800px;
            margin: 0 auto;
        }

        .timeline::before {
            content: '';
            position: absolute;
            width: 2px;
            background: var(--primary-red);
            top: 0;
            bottom: 0;
            left: 50%;
            margin-left: -1px;
        }

        .timeline-item {
            padding: 20px 40px;
            position: relative;
            width: 50%;
            opacity: 0;
            animation: fadeIn 0.6s ease-out forwards;
        }

        .timeline-item:nth-child(1) { animation-delay: 0.2s; }
        .timeline-item:nth-child(2) { animation-delay: 0.4s; }
        .timeline-item:nth-child(3) { animation-delay: 0.6s; }
        .timeline-item:nth-child(4) { animation-delay: 0.8s; }

        .timeline-item::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            background: var(--dark-gray);
            border: 4px solid var(--primary-red);
            border-radius: 50%;
            top: 30px;
            z-index: 1;
        }

        .timeline-item.left {
            left: 0;
        }

        .timeline-item.right {
            left: 50%;
        }

        .timeline-item.left::after {
            right: -10px;
        }

        .timeline-item.right::after {
            left: -10px;
        }

        .timeline-content {
            padding: 2rem;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.4s ease;
        }

        .timeline-item:hover .timeline-content {
            background: rgba(255, 255, 255, 0.1);
            transform: translateY(-5px);
        }

        .timeline-date {
            color: var(--primary-red);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .timeline-title {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: var(--light-gray);
        }

        .timeline-text {
            color: var(--medium-gray);
            line-height: 1.7;
        }

        /* CTA Section */
        .cta-section {
            padding: 6rem 5rem;
            text-align: center;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .cta-content {
            max-width: 700px;
            margin: 0 auto;
        }

        .cta-title {
            font-size: 2.5rem;
            margin-bottom: 2rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .cta-text {
            color: var(--medium-gray);
            margin-bottom: 3rem;
            line-height: 1.7;
        }

        .btn {
            padding: 0.9rem 2.2rem;
            border-radius: 50px;
            font-size: 1.05rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            display: inline-block;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background-color: var(--primary-red);
            color: white;
            box-shadow: var(--shadow);
            z-index: 1;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background-color: var(--dark-red);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .btn-primary:hover::before {
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(230, 57, 70, 0.4);
        }

        /* Footer */
        .main-footer {
            background-color: #0f0f1a;
            padding: 4rem 5rem 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.08);
        }

        .footer-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 3rem;
            margin-bottom: 3rem;
        }

        .footer-logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .footer-logo-text {
            font-size: 1.4rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .footer-about {
            color: var(--medium-gray);
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        .footer-title {
            font-size: 1.3rem;
            margin-bottom: 1.5rem;
            color: var(--light-gray);
        }

        .footer-links {
            list-style: none;
        }

        .footer-link {
            margin-bottom: 1rem;
        }

        .footer-link a {
            color: var(--medium-gray);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .footer-link a:hover {
            color: var(--primary-red);
            padding-left: 5px;
        }

        .footer-social {
            display: flex;
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .social-icon {
            color: var(--medium-gray);
            font-size: 1.3rem;
            transition: all 0.3s ease;
        }

        .social-icon:hover {
            color: var(--primary-red);
            transform: translateY(-3px);
        }

        .footer-bottom {
            text-align: center;
            padding-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            color: var(--medium-gray);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .hero-title, .section-title {
                font-size: 3rem;
            }
        }

        @media (max-width: 992px) {
            .about-hero {
                padding: 8rem 3rem 5rem;
            }
            
            .mission-section, .team-section, .history-section, .cta-section {
                padding: 5rem 3rem;
            }
            
            .mission-grid, .team-grid {
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .hero-title, .section-title {
                font-size: 2.5rem;
            }
            
            .main-header {
                padding: 1.2rem 2rem;
            }
            
            .nav-links {
                gap: 1.5rem;
            }
            
            .logo-text {
                font-size: 1.4rem;
            }
            
            .timeline::before {
                left: 31px;
            }
            
            .timeline-item {
                width: 100%;
                padding-left: 70px;
                padding-right: 25px;
            }
            
            .timeline-item.right, .timeline-item.left {
                left: 0;
            }
            
            .timeline-item.left::after, .timeline-item.right::after {
                left: 21px;
            }
        }

        @media (max-width: 576px) {
            .hero-title, .section-title {
                font-size: 2.2rem;
            }
            
            .about-hero {
                padding: 8rem 1.5rem 5rem;
            }
            
            .mission-section, .team-section, .history-section, .cta-section {
                padding: 4rem 1.5rem;
            }
            
            .main-header {
                padding: 1rem;
                justify-content: center;
            }
            
            .logo-text {
                display: none;
            }
            
            .nav-links {
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="main-header">
        <div class="logo-container" onclick="window.location.href='{{ path('app_first_page') }}'">
            <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo">
            <span class="logo-text">ESPRIM CAREER</span>
        </div>
        <nav class="nav-links">
            <a href="{{ path('app_first_page') }}" class="nav-link">Home</a>
            <a href="{{ path('app_features') }}" class="nav-link">Features</a>
            <a href="#about" class="nav-link active">About</a>
            <a href="{{ path('app_contact') }}" class="nav-link">Contact</a>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="about-hero" id="about">
        <div class="hero-content">
            <h1 class="hero-title">About Esprit Career</h1>
            <p class="hero-subtitle">We're revolutionizing the way students and professionals find their dream jobs and internships.</p>
        </div>
    </section>

    <!-- Mission Section -->
    <section class="mission-section">
        <div class="section-container">
            <h2 class="section-title">Our Mission & Values</h2>
            <div class="mission-grid">
                <div class="mission-card">
                    <div class="mission-icon">
                        <i class="fas fa-bullseye"></i>
                    </div>
                    <h3 class="mission-title">Our Mission</h3>
                    <p class="mission-desc">To bridge the gap between talented individuals and top companies by providing a seamless, efficient, and transparent job search platform.</p>
                </div>
                
                <div class="mission-card">
                    <div class="mission-icon">
                        <i class="fas fa-eye"></i>
                    </div>
                    <h3 class="mission-title">Our Vision</h3>
                    <p class="mission-desc">To become the leading career platform that empowers professionals at every stage of their career journey.</p>
                </div>
                
                <div class="mission-card">
                    <div class="mission-icon">
                        <i class="fas fa-heart"></i>
                    </div>
                    <h3 class="mission-title">Our Values</h3>
                    <p class="mission-desc">Integrity, Innovation, User-Centric Approach, Diversity & Inclusion, and Continuous Improvement.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Team Section -->
    <section class="team-section">
        <div class="section-container">
            <h2 class="section-title">Meet Our Team</h2>
            <div class="team-grid">
                <div class="team-member">
                    <img src="{{ asset('img/achref.jpg') }}" alt="Achref Chaabene" class="member-photo">
                    <h3 class="member-name">Achref Chaabene</h3>
                    <p class="member-position">Software Engineering</p>
                    <div class="member-social">
                        <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                        <a href="#" class="social-icon"><i class="fas fa-envelope"></i></a>
                    </div>
                </div>
                
                <div class="team-member">
                    <img src="{{ asset('img/maher.jpg') }}" alt="Maher Sayedi" class="member-photo">
                    <h3 class="member-name">Maher Sayedi</h3>
                    <p class="member-position">Software Engineering</p>
                    <div class="member-social">
                        <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="social-icon"><i class="fab fa-github"></i></a>
                        <a href="#" class="social-icon"><i class="fas fa-envelope"></i></a>
                    </div>
                </div>
                
                <div class="team-member">
                    <img src="{{ asset('img/fedi.jpg') }}" alt="Fedi Limem" class="member-photo">
                    <h3 class="member-name">Fedi Limem</h3>
                    <p class="member-position">Software Engineering</p>
                    <div class="member-social">
                        <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                        <a href="#" class="social-icon"><i class="fas fa-envelope"></i></a>
                    </div>
                </div>
                
                <div class="team-member">
                    <img src="{{ asset('img/Mouhamed.jpg') }}" alt="Mouhamed Abidi" class="member-photo">
                    <h3 class="member-name">Mouhamed Abidi</h3>
                    <p class="member-position">Software Engineering</p>
                    <div class="member-social">
                        <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                        <a href="#" class="social-icon"><i class="fas fa-envelope"></i></a>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- History Section -->
    <section class="history-section">
        <div class="section-container">
            <h2 class="section-title">Our Journey</h2>
            <div class="timeline">
                <div class="timeline-item left">
                    <div class="timeline-content">
                        <div class="timeline-date">2018</div>
                        <h3 class="timeline-title">Foundation</h3>
                        <p class="timeline-text">Esprit Career was founded by John Doe with a vision to transform the job search experience for students and young professionals.</p>
                    </div>
                </div>
                
                <div class="timeline-item right">
                    <div class="timeline-content">
                        <div class="timeline-date">2019</div>
                        <h3 class="timeline-title">First Funding</h3>
                        <p class="timeline-text">Secured $2M in seed funding to develop our platform and launch our MVP with 50 partner companies.</p>
                    </div>
                </div>
                
                <div class="timeline-item left">
                    <div class="timeline-content">
                        <div class="timeline-date">2020</div>
                        <h3 class="timeline-title">Platform Launch</h3>
                        <p class="timeline-text">Officially launched our platform with AI-powered matching and saw 10,000 signups in the first 3 months.</p>
                    </div>
                </div>
                
                <div class="timeline-item right">
                    <div class="timeline-content">
                        <div class="timeline-date">2023</div>
                        <h3 class="timeline-title">Current Milestone</h3>
                        <p class="timeline-text">Now serving over 100,000 users with 5,000+ companies and an 85% success rate in job placements.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="cta-section">
        <div class="cta-content">
            <h2 class="cta-title">Join Our Growing Community</h2>
            <p class="cta-text">Whether you're looking for your next career opportunity or seeking top talent for your company, Esprit Career is here to help you succeed.</p>
            <a href="{{ path('app_register_choice') }}" class="btn btn-primary">Get Started Now</a>
        </div>
    </section>

    <!-- Footer -->
    <footer class="main-footer">
        <div class="footer-grid">
            <div class="footer-col">
                <div class="footer-logo">
                    <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo" style="height: 40px;">
                    <span class="footer-logo-text">ESPRIM CAREER</span>
                </div>
                <p class="footer-about">Connecting talented professionals with top companies worldwide. Our mission is to make the job search process seamless and efficient.</p>
                <div class="footer-social">
                    <a href="#" class="social-icon"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
                </div>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Quick Links</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="{{ path('app_first_page') }}">Home</a></li>
                    <li class="footer-link"><a href="{{ path('app_features') }}">Features</a></li>
                    <li class="footer-link"><a href="#about">About Us</a></li>
                    <li class="footer-link"><a href="{{ path('app_contact') }}">Contact</a></li>
                    <li class="footer-link"><a href="{{ path('app_login') }}">Login</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Resources</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="#">Career Advice</a></li>
                    <li class="footer-link"><a href="#">Resume Tips</a></li>
                    <li class="footer-link"><a href="#">Interview Prep</a></li>
                    <li class="footer-link"><a href="#">Salary Calculator</a></li>
                    <li class="footer-link"><a href="#">Blog</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Contact Us</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="mailto:contact@espritcareer.com">contact@espritcareer.com</a></li>
                    <li class="footer-link"><a href="tel:+1234567890">+1 (234) 567-890</a></li>
                    <li class="footer-link">123 Career Street, Tech City</li>
                </ul>
            </div>
        </div>
        
        <div class="footer-bottom">
            <p>&copy; 2023 Esprit Career. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Animation on scroll
        document.addEventListener('DOMContentLoaded', function() {
            const animateOnScroll = function() {
                const elements = document.querySelectorAll('.mission-card, .team-member, .timeline-item');
                
                elements.forEach(element => {
                    const elementPosition = element.getBoundingClientRect().top;
                    const screenPosition = window.innerHeight / 1.3;
                    
                    if (elementPosition < screenPosition) {
                        element.style.animationPlayState = 'running';
                    }
                });
            };
            
            // Run once on load
            animateOnScroll();
            
            // Run on scroll
            window.addEventListener('scroll', animateOnScroll);
            
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const targetId = this.getAttribute('href');
                    if (targetId === '#') return;
                    
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 100,
                            behavior: 'smooth'
                        });
                    }
                });
            });
            
            // Header scroll effect
            let lastScroll = 0;
            window.addEventListener('scroll', function() {
                const currentScroll = window.pageYOffset;
                const header = document.querySelector('.main-header');
                
                if (currentScroll <= 0) {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = 'none';
                } else if (currentScroll > lastScroll) {
                    header.style.transform = 'translateY(-100%)';
                } else {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.2)';
                }
                lastScroll = currentScroll;
            });
        });
    </script>
</body>
</html>

==================================================

Fichier: templates\first_page\contact.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\first_page\contact.html.twig
-----
{# templates/first_page/contact.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact - Esprit Career</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-red: #e63946;
            --dark-red: #c1121f;
            --light-gray: #f8f9fa;
            --medium-gray: #adb5bd;
            --dark-gray: #343a40;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-gray);
            color: var(--light-gray);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0px); }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Header */
        .main-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 100;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            animation: fadeIn 0.8s ease-out forwards;
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
        }

        .logo {
            height: 42px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        .logo:hover {
            transform: rotate(-5deg) scale(1.1);
        }

        .logo-text {
            font-size: 1.6rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .logo-container:hover .logo-text {
            letter-spacing: 1px;
        }

        .nav-links {
            display: flex;
            gap: 2.5rem;
        }

        .nav-link {
            color: var(--medium-gray);
            text-decoration: none;
            font-weight: 500;
            font-size: 1.05rem;
            transition: all 0.4s ease;
            position: relative;
        }

        .nav-link:hover {
            color: var(--light-gray);
        }

        .nav-link.active {
            color: var(--primary-red);
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-red);
            transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        /* Hero Section */
        .contact-hero {
            min-height: 50vh;
            display: flex;
            align-items: center;
            padding: 8rem 5rem 5rem;
            position: relative;
            overflow: hidden;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .hero-content {
            max-width: 800px;
            margin: 0 auto;
            text-align: center;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1.8rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: slideInLeft 0.8s ease-out forwards;
            animation-delay: 0.2s;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            line-height: 1.7;
            color: var(--medium-gray);
            margin-bottom: 3rem;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
            animation-delay: 0.4s;
        }

        /* Contact Section */
        .contact-section {
            padding: 6rem 5rem;
            background-color: #1a1a2e;
        }

        .section-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .section-title {
            text-align: center;
            font-size: 2.8rem;
            margin-bottom: 5rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
        }

        .contact-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 4rem;
        }

        .contact-info {
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .contact-info:nth-child(1) { animation-delay: 0.2s; }
        .contact-info:nth-child(2) { animation-delay: 0.4s; }

        .info-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .info-card:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .info-icon {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            color: var(--primary-red);
        }

        .info-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--light-gray);
        }

        .info-text {
            color: var(--medium-gray);
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        .info-link {
            color: var(--primary-red);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .info-link:hover {
            color: var(--light-gray);
            text-decoration: underline;
        }

        .contact-form {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 2.5rem;
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
            animation-delay: 0.6s;
        }

        .contact-form:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            color: var(--light-gray);
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 0.9rem 1.2rem;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: var(--light-gray);
            font-family: 'Poppins', sans-serif;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-red);
            background: rgba(255, 255, 255, 0.15);
        }

        textarea.form-control {
            min-height: 150px;
            resize: vertical;
        }

        .btn {
            padding: 0.9rem 2.2rem;
            border-radius: 50px;
            font-size: 1.05rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            display: inline-block;
            position: relative;
            overflow: hidden;
            border: none;
            cursor: pointer;
        }

        .btn-primary {
            background-color: var(--primary-red);
            color: white;
            box-shadow: var(--shadow);
            z-index: 1;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background-color: var(--dark-red);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .btn-primary:hover::before {
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(230, 57, 70, 0.4);
        }

        /* Map Section */
        .map-section {
            padding: 0 5rem 6rem;
            background-color: #1a1a2e;
        }

        .map-container {
            height: 400px;
            border-radius: 20px;
            overflow: hidden;
            border: 1px solid rgba(255, 255, 255, 0.08);
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
            animation-delay: 0.8s;
        }

        .map-container iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        /* FAQ Section */
        .faq-section {
            padding: 6rem 5rem;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .faq-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .faq-item {
            margin-bottom: 1.5rem;
            border-radius: 10px;
            overflow: hidden;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.08);
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .faq-item:nth-child(1) { animation-delay: 0.2s; }
        .faq-item:nth-child(2) { animation-delay: 0.4s; }
        .faq-item:nth-child(3) { animation-delay: 0.6s; }
        .faq-item:nth-child(4) { animation-delay: 0.8s; }
        .faq-item:nth-child(5) { animation-delay: 1s; }

        .faq-question {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .faq-question:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .faq-question h3 {
            font-size: 1.2rem;
            color: var(--light-gray);
        }

        .faq-toggle {
            width: 30px;
            height: 30px;
            background: var(--primary-red);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            transition: all 0.3s ease;
        }

        .faq-answer {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease;
            padding: 0 1.5rem;
        }

        .faq-answer p {
            color: var(--medium-gray);
            line-height: 1.7;
            padding: 1rem 0;
        }

        .faq-item.active .faq-answer {
            max-height: 500px;
        }

        .faq-item.active .faq-toggle {
            transform: rotate(180deg);
        }

        /* Footer */
        .main-footer {
            background-color: #0f0f1a;
            padding: 4rem 5rem 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.08);
        }

        .footer-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 3rem;
            margin-bottom: 3rem;
        }

        .footer-logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .footer-logo-text {
            font-size: 1.4rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .footer-about {
            color: var(--medium-gray);
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        .footer-title {
            font-size: 1.3rem;
            margin-bottom: 1.5rem;
            color: var(--light-gray);
        }

        .footer-links {
            list-style: none;
        }

        .footer-link {
            margin-bottom: 1rem;
        }

        .footer-link a {
            color: var(--medium-gray);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .footer-link a:hover {
            color: var(--primary-red);
            padding-left: 5px;
        }

        .footer-social {
            display: flex;
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .social-icon {
            color: var(--medium-gray);
            font-size: 1.3rem;
            transition: all 0.3s ease;
        }

        .social-icon:hover {
            color: var(--primary-red);
            transform: translateY(-3px);
        }

        .footer-bottom {
            text-align: center;
            padding-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            color: var(--medium-gray);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .hero-title, .section-title {
                font-size: 3rem;
            }
        }

        @media (max-width: 992px) {
            .contact-hero {
                padding: 8rem 3rem 5rem;
            }
            
            .contact-section, .map-section, .faq-section {
                padding: 5rem 3rem;
            }
            
            .contact-grid {
                grid-template-columns: 1fr;
            }
            
            .contact-info {
                order: 2;
            }
            
            .contact-form {
                order: 1;
            }
        }

        @media (max-width: 768px) {
            .hero-title, .section-title {
                font-size: 2.5rem;
            }
            
            .main-header {
                padding: 1.2rem 2rem;
            }
            
            .nav-links {
                gap: 1.5rem;
            }
            
            .logo-text {
                font-size: 1.4rem;
            }
        }

        @media (max-width: 576px) {
            .hero-title, .section-title {
                font-size: 2.2rem;
            }
            
            .contact-hero {
                padding: 8rem 1.5rem 5rem;
            }
            
            .contact-section, .map-section, .faq-section {
                padding: 4rem 1.5rem;
            }
            
            .map-section {
                padding: 0 1.5rem 4rem;
            }
            
            .main-header {
                padding: 1rem;
                justify-content: center;
            }
            
            .logo-text {
                display: none;
            }
            
            .nav-links {
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="main-header">
        <div class="logo-container" onclick="window.location.href='{{ path('app_first_page') }}'">
            <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo">
            <span class="logo-text">ESPRIM CAREER</span>
        </div>
        <nav class="nav-links">
            <a href="{{ path('app_first_page') }}" class="nav-link">Home</a>
            <a href="{{ path('app_features') }}" class="nav-link">Features</a>
            <a href="{{ path('app_about') }}" class="nav-link">About</a>
            <a href="#contact" class="nav-link active">Contact</a>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="contact-hero">
        <div class="hero-content">
            <h1 class="hero-title">Get In Touch</h1>
            <p class="hero-subtitle">We'd love to hear from you! Whether you have a question about our services, need assistance, or want to provide feedback, our team is ready to help.</p>
        </div>
    </section>

    <!-- Contact Section -->
    <section class="contact-section" id="contact">
        <div class="section-container">
            <h2 class="section-title">Contact Us</h2>
            <div class="contact-grid">
                <div class="contact-info">
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <h3 class="info-title">Email Us</h3>
                        <p class="info-text">For general inquiries or support, send us an email and we'll get back to you as soon as possible.</p>
                        <a href="mailto:contact@espritcareer.com" class="info-link">contact@espritcareer.com</a>
                    </div>
                    
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-phone-alt"></i>
                        </div>
                        <h3 class="info-title">Call Us</h3>
                        <p class="info-text">Prefer to speak with someone directly? Give us a call during our business hours.</p>
                        <a href="tel:+1234567890" class="info-link">+1 (234) 567-890</a>
                    </div>
                    
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-map-marker-alt"></i>
                        </div>
                        <h3 class="info-title">Visit Us</h3>
                        <p class="info-text">Our office is open Monday to Friday from 9 AM to 5 PM.</p>
                        <p class="info-text">123 Career Street<br>Tech City, TC 12345</p>
                    </div>
                </div>
                
                <form class="contact-form">
                    <div class="form-group">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text" id="name" class="form-control" placeholder="Your name" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" id="email" class="form-control" placeholder="Your email" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="subject" class="form-label">Subject</label>
                        <input type="text" id="subject" class="form-control" placeholder="Subject of your message">
                    </div>
                    
                    <div class="form-group">
                        <label for="message" class="form-label">Your Message</label>
                        <textarea id="message" class="form-control" placeholder="How can we help you?" required></textarea>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Send Message</button>
                </form>
            </div>
        </div>
    </section>

    <!-- Map Section -->
    <section class="map-section">
        <div class="map-container">
            <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3022.215209126327!2d-73.9878449241643!3d40.74844047138971!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c259a9b3117469%3A0xd134e199a405a163!2sEmpire%20State%20Building!5e0!3m2!1sen!2sus!4v1689876423581!5m2!1sen!2sus" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="faq-section">
        <div class="section-container">
            <h2 class="section-title">Frequently Asked Questions</h2>
            <div class="faq-container">
                <div class="faq-item">
                    <div class="faq-question">
                        <h3>How do I create an account on Esprit Career?</h3>
                        <div class="faq-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="faq-answer">
                        <p>Creating an account is simple! Click on the "Sign Up" button at the top right corner of the page, fill in your details, and verify your email address. Once verified, you can complete your profile and start exploring job opportunities.</p>
                    </div>
                </div>
                
                <div class="faq-item">
                    <div class="faq-question">
                        <h3>Is there a cost to use Esprit Career?</h3>
                        <div class="faq-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="faq-answer">
                        <p>No, Esprit Career is completely free for job seekers. Our platform is supported by companies who post job listings and recruit through our service.</p>
                    </div>
                </div>
                
                <div class="faq-item">
                    <div class="faq-question">
                        <h3>How can companies post job listings?</h3>
                        <div class="faq-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="faq-answer">
                        <p>Companies need to create an employer account. After registration and verification, you can post job listings through your dashboard. We offer various posting packages to suit different hiring needs.</p>
                    </div>
                </div>
                
                <div class="faq-item">
                    <div class="faq-question">
                        <h3>How do I reset my password?</h3>
                        <div class="faq-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="faq-answer">
                        <p>Click on "Forgot Password" on the login page, enter your registered email address, and we'll send you a link to reset your password. Make sure to check your spam folder if you don't see the email in your inbox.</p>
                    </div>
                </div>
                
                <div class="faq-item">
                    <div class="faq-question">
                        <h3>What types of jobs are available on Esprit Career?</h3>
                        <div class="faq-toggle">
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                    <div class="faq-answer">
                        <p>We list a wide variety of jobs across multiple industries including technology, finance, healthcare, education, and more. You can find full-time positions, part-time jobs, internships, and remote opportunities.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="main-footer">
        <div class="footer-grid">
            <div class="footer-col">
                <div class="footer-logo">
                    <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo" style="height: 40px;">
                    <span class="footer-logo-text">ESPRIM CAREER</span>
                </div>
                <p class="footer-about">Connecting talented professionals with top companies worldwide. Our mission is to make the job search process seamless and efficient.</p>
                <div class="footer-social">
                    <a href="#" class="social-icon"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
                </div>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Quick Links</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="{{ path('app_first_page') }}">Home</a></li>
                    <li class="footer-link"><a href="{{ path('app_features') }}">Features</a></li>
                    <li class="footer-link"><a href="{{ path('app_about') }}">About Us</a></li>
                    <li class="footer-link"><a href="#contact">Contact</a></li>
                    <li class="footer-link"><a href="{{ path('app_login') }}">Login</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Resources</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="#">Career Advice</a></li>
                    <li class="footer-link"><a href="#">Resume Tips</a></li>
                    <li class="footer-link"><a href="#">Interview Prep</a></li>
                    <li class="footer-link"><a href="#">Salary Calculator</a></li>
                    <li class="footer-link"><a href="#">Blog</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Contact Us</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="mailto:contact@espritcareer.com">contact@espritcareer.com</a></li>
                    <li class="footer-link"><a href="tel:+1234567890">+1 (234) 567-890</a></li>
                    <li class="footer-link">123 Career Street, Tech City</li>
                </ul>
            </div>
        </div>
        
        <div class="footer-bottom">
            <p>&copy; 2023 Esprit Career. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Animation on scroll
        document.addEventListener('DOMContentLoaded', function() {
            const animateOnScroll = function() {
                const elements = document.querySelectorAll('.contact-info, .contact-form, .map-container, .faq-item');
                
                elements.forEach(element => {
                    const elementPosition = element.getBoundingClientRect().top;
                    const screenPosition = window.innerHeight / 1.3;
                    
                    if (elementPosition < screenPosition) {
                        element.style.animationPlayState = 'running';
                    }
                });
            };
            
            // Run once on load
            animateOnScroll();
            
            // Run on scroll
            window.addEventListener('scroll', animateOnScroll);
            
            // FAQ toggle functionality
            const faqQuestions = document.querySelectorAll('.faq-question');
            faqQuestions.forEach(question => {
                question.addEventListener('click', () => {
                    const faqItem = question.parentElement;
                    faqItem.classList.toggle('active');
                    
                    // Close other open FAQs
                    faqQuestions.forEach(otherQuestion => {
                        if (otherQuestion !== question) {
                            otherQuestion.parentElement.classList.remove('active');
                        }
                    });
                });
            });
            
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const targetId = this.getAttribute('href');
                    if (targetId === '#') return;
                    
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 100,
                            behavior: 'smooth'
                        });
                    }
                });
            });
            
            // Header scroll effect
            let lastScroll = 0;
            window.addEventListener('scroll', function() {
                const currentScroll = window.pageYOffset;
                const header = document.querySelector('.main-header');
                
                if (currentScroll <= 0) {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = 'none';
                } else if (currentScroll > lastScroll) {
                    header.style.transform = 'translateY(-100%)';
                } else {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.2)';
                }
                lastScroll = currentScroll;
            });
            
            // Form submission
            const contactForm = document.querySelector('.contact-form');
            if (contactForm) {
                contactForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Here you would typically send the form data to your server
                    // For this example, we'll just show an alert
                    alert('Thank you for your message! We will get back to you soon.');
                    contactForm.reset();
                });
            }
        });
    </script>
</body>
</html>
==================================================

Fichier: templates\first_page\features.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\first_page\features.html.twig
-----
{# templates/first_page/features.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Features - Esprit Career</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-red: #e63946;
            --dark-red: #c1121f;
            --light-gray: #f8f9fa;
            --medium-gray: #adb5bd;
            --dark-gray: #343a40;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--dark-gray);
            color: var(--light-gray);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0px); }
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        /* Header */
        .main-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 100;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            animation: fadeIn 0.8s ease-out forwards;
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
        }

        .logo {
            height: 42px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        .logo:hover {
            transform: rotate(-5deg) scale(1.1);
        }

        .logo-text {
            font-size: 1.6rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .logo-container:hover .logo-text {
            letter-spacing: 1px;
        }

        .nav-links {
            display: flex;
            gap: 2.5rem;
        }

        .nav-link {
            color: var(--medium-gray);
            text-decoration: none;
            font-weight: 500;
            font-size: 1.05rem;
            transition: all 0.4s ease;
            position: relative;
        }

        .nav-link:hover {
            color: var(--light-gray);
        }

        .nav-link.active {
            color: var(--primary-red);
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-red);
            transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        /* Hero Section */
        .features-hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            padding: 8rem 5rem 5rem;
            position: relative;
            overflow: hidden;
        }

        .hero-content {
            max-width: 600px;
            z-index: 2;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1.8rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: slideInLeft 0.8s ease-out forwards;
            animation-delay: 0.2s;
        }

        .hero-subtitle {
            font-size: 1.2rem;
            line-height: 1.7;
            color: var(--medium-gray);
            margin-bottom: 3rem;
            max-width: 85%;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
            animation-delay: 0.4s;
        }

        /* Features Grid */
        .features-section {
            padding: 6rem 5rem;
            background-color: #1a1a2e;
        }

        .section-title {
            text-align: center;
            font-size: 2.8rem;
            margin-bottom: 5rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 3rem;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 20px;
            padding: 2.5rem;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            border: 1px solid rgba(255, 255, 255, 0.08);
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .feature-card:nth-child(1) { animation-delay: 0.2s; }
        .feature-card:nth-child(2) { animation-delay: 0.4s; }
        .feature-card:nth-child(3) { animation-delay: 0.6s; }
        .feature-card:nth-child(4) { animation-delay: 0.8s; }
        .feature-card:nth-child(5) { animation-delay: 1s; }
        .feature-card:nth-child(6) { animation-delay: 1.2s; }

        .feature-card:hover {
            transform: translateY(-10px);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .feature-icon {
            font-size: 2.5rem;
            margin-bottom: 1.5rem;
            color: var(--primary-red);
        }

        .feature-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--light-gray);
        }

        .feature-desc {
            color: var(--medium-gray);
            line-height: 1.7;
        }

        /* Stats Section */
        .stats-section {
            padding: 6rem 5rem;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 3rem;
            text-align: center;
        }

        .stat-item {
            opacity: 0;
            transform: translateY(30px);
            animation: fadeIn 0.6s ease-out forwards;
        }

        .stat-item:nth-child(1) { animation-delay: 0.2s; }
        .stat-item:nth-child(2) { animation-delay: 0.4s; }
        .stat-item:nth-child(3) { animation-delay: 0.6s; }
        .stat-item:nth-child(4) { animation-delay: 0.8s; }

        .stat-number {
            font-size: 3.5rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--primary-red), var(--dark-red));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 1.1rem;
            color: var(--medium-gray);
        }

        /* CTA Section */
        .cta-section {
            padding: 6rem 5rem;
            text-align: center;
            background-color: #1a1a2e;
        }

        .cta-content {
            max-width: 700px;
            margin: 0 auto;
        }

        .cta-title {
            font-size: 2.5rem;
            margin-bottom: 2rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .cta-text {
            color: var(--medium-gray);
            margin-bottom: 3rem;
            line-height: 1.7;
        }

        .btn {
            padding: 0.9rem 2.2rem;
            border-radius: 50px;
            font-size: 1.05rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            display: inline-block;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background-color: var(--primary-red);
            color: white;
            box-shadow: var(--shadow);
            z-index: 1;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background-color: var(--dark-red);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .btn-primary:hover::before {
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(230, 57, 70, 0.4);
        }

        /* Footer */
        .main-footer {
            background-color: #0f0f1a;
            padding: 4rem 5rem 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.08);
        }

        .footer-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 3rem;
            margin-bottom: 3rem;
        }

        .footer-logo {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .footer-logo-text {
            font-size: 1.4rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .footer-about {
            color: var(--medium-gray);
            line-height: 1.7;
            margin-bottom: 1.5rem;
        }

        .footer-title {
            font-size: 1.3rem;
            margin-bottom: 1.5rem;
            color: var(--light-gray);
        }

        .footer-links {
            list-style: none;
        }

        .footer-link {
            margin-bottom: 1rem;
        }

        .footer-link a {
            color: var(--medium-gray);
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .footer-link a:hover {
            color: var(--primary-red);
            padding-left: 5px;
        }

        .footer-social {
            display: flex;
            gap: 1.5rem;
            margin-top: 1.5rem;
        }

        .social-icon {
            color: var(--medium-gray);
            font-size: 1.3rem;
            transition: all 0.3s ease;
        }

        .social-icon:hover {
            color: var(--primary-red);
            transform: translateY(-3px);
        }

        .footer-bottom {
            text-align: center;
            padding-top: 2rem;
            border-top: 1px solid rgba(255, 255, 255, 0.05);
            color: var(--medium-gray);
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .hero-title, .section-title {
                font-size: 3rem;
            }
        }

        @media (max-width: 992px) {
            .features-hero {
                padding: 8rem 3rem 5rem;
                text-align: center;
            }
            
            .hero-content {
                max-width: 100%;
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            
            .hero-subtitle {
                max-width: 100%;
            }
            
            .features-section, .stats-section, .cta-section {
                padding: 5rem 3rem;
            }
        }

        @media (max-width: 768px) {
            .hero-title, .section-title {
                font-size: 2.5rem;
            }
            
            .main-header {
                padding: 1.2rem 2rem;
            }
            
            .nav-links {
                gap: 1.5rem;
            }
            
            .logo-text {
                font-size: 1.4rem;
            }
        }

        @media (max-width: 576px) {
            .hero-title, .section-title {
                font-size: 2.2rem;
            }
            
            .features-hero {
                padding: 8rem 1.5rem 5rem;
            }
            
            .features-section, .stats-section, .cta-section {
                padding: 4rem 1.5rem;
            }
            
            .features-grid {
                grid-template-columns: 1fr;
            }
            
            .main-header {
                padding: 1rem;
                justify-content: center;
            }
            
            .logo-text {
                display: none;
            }
            
            .nav-links {
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="main-header">
        <div class="logo-container" onclick="window.location.href='{{ path('app_first_page') }}'">
            <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo">
            <span class="logo-text">ESPRIM CAREER</span>
        </div>
        <nav class="nav-links">
            <a href="{{ path('app_first_page') }}" class="nav-link">Home</a>
            <a href="#features" class="nav-link active">Features</a>
            <a href="{{ path('app_about') }}" class="nav-link">About</a>
            <a href="{{ path('app_contact') }}" class="nav-link">Contact</a>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="features-hero">
        <div class="hero-content">
            <h1 class="hero-title">Powerful Features for Your Career</h1>
            <p class="hero-subtitle">Discover all the tools and features we offer to help you find the perfect job or internship opportunity.</p>
        </div>
    </section>

    <!-- Features Grid -->
    <section class="features-section" id="features">
        <h2 class="section-title">Our Key Features</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-search"></i>
                </div>
                <h3 class="feature-title">Advanced Job Search</h3>
                <p class="feature-desc">Filter jobs by location, salary, experience level and more to find exactly what you're looking for.</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-bell"></i>
                </div>
                <h3 class="feature-title">Job Alerts</h3>
                <p class="feature-desc">Get notified when new jobs matching your criteria are posted.</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <h3 class="feature-title">Resume Builder</h3>
                <p class="feature-desc">Create professional resumes with our easy-to-use builder tool.</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <h3 class="feature-title">Career Analytics</h3>
                <p class="feature-desc">Track your application progress and get insights to improve your chances.</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h3 class="feature-title">Company Reviews</h3>
                <p class="feature-desc">Read and write reviews about companies to make informed decisions.</p>
            </div>
            
            <div class="feature-card">
                <div class="feature-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <h3 class="feature-title">Direct Messaging</h3>
                <p class="feature-desc">Communicate directly with recruiters and hiring managers.</p>
            </div>
        </div>
    </section>

    <!-- Stats Section -->
    <section class="stats-section">
        <div class="stats-container">
            <div class="stat-item">
                <div class="stat-number">10,000+</div>
                <div class="stat-label">Job Listings</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">5,000+</div>
                <div class="stat-label">Companies</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">100,000+</div>
                <div class="stat-label">Active Users</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">85%</div>
                <div class="stat-label">Success Rate</div>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="cta-section">
        <div class="cta-content">
            <h2 class="cta-title">Ready to Boost Your Career?</h2>
            <p class="cta-text">Join thousands of professionals who found their dream jobs through Esprit Career. Create your free account today and start exploring opportunities.</p>
            <a href="{{ path('app_register_choice') }}" class="btn btn-primary">Get Started Now</a>
        </div>
    </section>

    <!-- Footer -->
    <footer class="main-footer">
        <div class="footer-grid">
            <div class="footer-col">
                <div class="footer-logo">
                    <img src="{{ asset('img/fxchat.png') }}" alt="Esprit Logo" class="logo" style="height: 40px;">
                    <span class="footer-logo-text">ESPRIM CAREER</span>
                </div>
                <p class="footer-about">Connecting talented professionals with top companies worldwide. Our mission is to make the job search process seamless and efficient.</p>
                <div class="footer-social">
                    <a href="#" class="social-icon"><i class="fab fa-facebook-f"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-twitter"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-linkedin-in"></i></a>
                    <a href="#" class="social-icon"><i class="fab fa-instagram"></i></a>
                </div>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Quick Links</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="{{ path('app_first_page') }}">Home</a></li>
                    <li class="footer-link"><a href="#features">Features</a></li>
                    <li class="footer-link"><a href="{{ path('app_about') }}">About Us</a></li>
                    <li class="footer-link"><a href="{{ path('app_contact') }}">Contact</a></li>
                    <li class="footer-link"><a href="{{ path('app_login') }}">Login</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Resources</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="#">Career Advice</a></li>
                    <li class="footer-link"><a href="#">Resume Tips</a></li>
                    <li class="footer-link"><a href="#">Interview Prep</a></li>
                    <li class="footer-link"><a href="#">Salary Calculator</a></li>
                    <li class="footer-link"><a href="#">Blog</a></li>
                </ul>
            </div>
            
            <div class="footer-col">
                <h3 class="footer-title">Contact Us</h3>
                <ul class="footer-links">
                    <li class="footer-link"><a href="mailto:contact@espritcareer.com">contact@espritcareer.com</a></li>
                    <li class="footer-link"><a href="tel:+1234567890">(+216) 23 443 748 <br> (+216) 28 313 903</a></li>
                    <li class="footer-link">tunisie , monastir</li>
                </ul>
            </div>
        </div>
        
        <div class="footer-bottom">
            <p>&copy; 2023 Esprit Career. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Animation on scroll
        document.addEventListener('DOMContentLoaded', function() {
            const animateOnScroll = function() {
                const elements = document.querySelectorAll('.feature-card, .stat-item');
                
                elements.forEach(element => {
                    const elementPosition = element.getBoundingClientRect().top;
                    const screenPosition = window.innerHeight / 1.3;
                    
                    if (elementPosition < screenPosition) {
                        element.style.animationPlayState = 'running';
                    }
                });
            };
            
            // Run once on load
            animateOnScroll();
            
            // Run on scroll
            window.addEventListener('scroll', animateOnScroll);
            
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const targetId = this.getAttribute('href');
                    if (targetId === '#') return;
                    
                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 100,
                            behavior: 'smooth'
                        });
                    }
                });
            });
            
            // Header scroll effect
            let lastScroll = 0;
            window.addEventListener('scroll', function() {
                const currentScroll = window.pageYOffset;
                const header = document.querySelector('.main-header');
                
                if (currentScroll <= 0) {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = 'none';
                } else if (currentScroll > lastScroll) {
                    header.style.transform = 'translateY(-100%)';
                } else {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.2)';
                }
                lastScroll = currentScroll;
            });
        });
    </script>
</body>
</html>
==================================================

Fichier: templates\first_page\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\first_page\index.html.twig
-----
{# templates/first_page/index.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ welcome_message }}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <script type="module" src="https://unpkg.com/@splinetool/viewer@1.9.89/build/spline-viewer.js"></script>
    <style>
        :root {
            --primary-red: #e63946;
            --dark-red: #c1121f;
            --light-gray: #f8f9fa;
            --medium-gray: #adb5bd;
            --dark-gray: #343a40;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body.first-page {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(to right, var(--dark-gray) 50%, #1a1a2e);
            color: var(--light-gray);
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Animation d'entrée */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes slideInLeft {
            from { opacity: 0; transform: translateX(-50px); }
            to { opacity: 1; transform: translateX(0); }
        }

        @keyframes float {
            0% { transform: translateY(0px); }
            50% { transform: translateY(-15px); }
            100% { transform: translateY(0px); }
        }

        /* Header animé */
        .main-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 1.5rem 3rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 100;
            background: rgba(26, 26, 46, 0.9);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.08);
            animation: fadeIn 0.8s ease-out forwards;
            opacity: 0;
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            cursor: pointer;
        }

        .logo {
            height: 42px;
            transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }

        .logo:hover {
            transform: rotate(-5deg) scale(1.1);
        }

        .logo-text {
            font-size: 1.6rem;
            font-weight: 700;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .logo-container:hover .logo-text {
            letter-spacing: 1px;
        }

        .nav-links {
            display: flex;
            gap: 2.5rem;
        }

        .nav-link {
            color: var(--medium-gray);
            text-decoration: none;
            font-weight: 500;
            font-size: 1.05rem;
            transition: all 0.4s ease;
            position: relative;
            opacity: 0;
            animation: fadeIn 0.6s ease-out forwards;
            animation-delay: 0.3s;
        }

        .nav-link:nth-child(1) { animation-delay: 0.3s; }
        .nav-link:nth-child(2) { animation-delay: 0.4s; }
        .nav-link:nth-child(3) { animation-delay: 0.5s; }

        .nav-link:hover {
            color: var(--light-gray);
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -6px;
            left: 0;
            width: 0;
            height: 2px;
            background: var(--primary-red);
            transition: width 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        .page-container {
            display: flex;
            min-height: 100vh;
            padding-top: 90px;
        }

        .content-left {
            flex: 1;
            padding: 4rem 5rem;
            max-width: 600px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            position: relative;
            z-index: 2;
        }

        h1 {
            font-size: 3.5rem;
            font-weight: 700;
            line-height: 1.2;
            margin-bottom: 1.8rem;
            background: linear-gradient(to right, var(--light-gray), var(--medium-gray));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            opacity: 0;
            animation: slideInLeft 0.8s ease-out forwards;
            animation-delay: 0.2s;
        }

        .subtitle {
            font-size: 1.2rem;
            line-height: 1.7;
            color: var(--medium-gray);
            margin-bottom: 3rem;
            max-width: 85%;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
            animation-delay: 0.4s;
        }

        .buttons {
            display: flex;
            gap: 1.8rem;
            opacity: 0;
            animation: fadeIn 0.8s ease-out forwards;
            animation-delay: 0.6s;
        }

        .btn {
            padding: 0.9rem 2.2rem;
            border-radius: 50px;
            font-size: 1.05rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
            display: inline-block;
            position: relative;
            overflow: hidden;
        }

        .btn-primary {
            background-color: var(--primary-red);
            color: white;
            box-shadow: var(--shadow);
            z-index: 1;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background-color: var(--dark-red);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .btn-primary:hover::before {
            width: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(230, 57, 70, 0.4);
        }

        .btn-secondary {
            border: 2px solid var(--medium-gray);
            color: var(--medium-gray);
            background: transparent;
        }

        .btn-secondary:hover {
            border-color: var(--light-gray);
            color: var(--light-gray);
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(255, 255, 255, 0.1);
        }

        .spline-right {
            flex: 1;
            position: relative;
            min-height: calc(100vh - 90px);
            overflow: hidden;
            opacity: 0;
            animation: fadeIn 1s ease-out forwards;
            animation-delay: 0.8s;
        }

        .spline-container {
            position: absolute;
            top: 0;
            right: 0;
            width: 100%;
            height: 100%;
            min-width: 700px;
            animation: float 6s ease-in-out infinite;
        }

        spline-viewer {
            width: 100%;
            height: 100%;
        }

        /* Effet de particules */
        .particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            pointer-events: none;
        }

        .particle {
            position: absolute;
            background: rgba(255, 255, 255, 0.6);
            border-radius: 50%;
            animation: float 3s infinite ease-in-out;
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            h1 {
                font-size: 3rem;
            }
            
            .spline-container {
                min-width: 600px;
            }
        }

        @media (max-width: 992px) {
            .page-container {
                flex-direction: column;
                background: linear-gradient(to bottom, var(--dark-gray), #1a1a2e);
            }
            
            .content-left {
                max-width: 100%;
                padding: 3rem 2rem;
                text-align: center;
                align-items: center;
            }
            
            .subtitle {
                max-width: 100%;
            }
            
            .buttons {
                justify-content: center;
            }
            
            .spline-right {
                min-height: 60vh;
                order: -1;
            }
            
            .spline-container {
                position: relative;
                min-width: 100%;
                animation: float 6s ease-in-out infinite;
            }
            
            .main-header {
                padding: 1.2rem 2rem;
            }
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 2.5rem;
            }
            
            .logo-text {
                font-size: 1.4rem;
            }
            
            .nav-links {
                gap: 1.5rem;
            }
        }

        @media (max-width: 576px) {
            h1 {
                font-size: 2.2rem;
            }
            
            .buttons {
                flex-direction: column;
                width: 100%;
            }
            
            .btn {
                width: 100%;
                text-align: center;
            }
            
            .logo-text {
                display: none;
            }
            
            .main-header {
                padding: 1rem;
                justify-content: center;
            }
        }
    </style>
</head>
<body class="first-page">
    <!-- Header animé -->
    <header class="main-header">
        <div class="logo-container" onclick="window.location.href='#'">
            <img src="img/fxchat.png" alt="Esprit Logo" class="img-fluid" style="max-height: 60px;">
            <span class="logo-text">ESPRIM CAREER</span>
        </div>
        <nav class="nav-links">
        <a href="{{ path('app_features') }}" class="nav-link">Features</a>
        <a href="{{ path('app_about') }}" class="nav-link">About</a>
        <a href="{{ path('app_contact') }}" class="nav-link">Contact</a>
        <a href="{{ path('app_login') }}" class="nav-link">Login</a>
    </nav>
    </header>

    <!-- Contenu principal -->
    <div class="page-container">
        <div class="content-left">
            <h1>{{ welcome_message }}</h1>
            <p class="subtitle">{{ subtitle }}</p>
            <div class="buttons">
                <a href="{{ path('app_login') }}" class="btn btn-primary">Get Started</a>
                <a href="{{ path('app_register_choice') }}" class="btn btn-secondary">Sign Up</a>
            </div>
        </div>
        
        <!-- Animation Spline avec effet de flottement -->
        <div class="spline-right">
            <div class="spline-container">
                <spline-viewer 
                    url="https://prod.spline.design/KroBZo5LO-sAUNKP/scene.splinecode"
                    loading-anim
                ></spline-viewer>
            </div>
        </div>
    </div>

    <!-- Script pour les particules animées -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Création des particules animées
            const particlesContainer = document.createElement('div');
            particlesContainer.className = 'particles';
            document.body.appendChild(particlesContainer);
            
            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                // Position aléatoire
                const posX = Math.random() * 100;
                const posY = Math.random() * 100;
                
                // Taille aléatoire
                const size = Math.random() * 5 + 2;
                
                // Animation aléatoire
                const delay = Math.random() * 5;
                const duration = Math.random() * 10 + 5;
                
                particle.style.left = ${posX}%;
                particle.style.top = ${posY}%;
                particle.style.width = ${size}px;
                particle.style.height = ${size}px;
                particle.style.animationDelay = ${delay}s;
                particle.style.animationDuration = ${duration}s;
                
                particlesContainer.appendChild(particle);
            }
            
            // Animation au scroll pour le header
            let lastScroll = 0;
            window.addEventListener('scroll', function() {
                const currentScroll = window.pageYOffset;
                const header = document.querySelector('.main-header');
                
                if (currentScroll <= 0) {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = 'none';
                } else if (currentScroll > lastScroll) {
                    header.style.transform = 'translateY(-100%)';
                } else {
                    header.style.transform = 'translateY(0)';
                    header.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.2)';
                }
                lastScroll = currentScroll;
            });
        });
    </script>
</body>
</html>
==================================================

Fichier: templates\job_seeker\applications.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\applications.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mes candidatures</title>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #d62828;
            --accent-color: #d62828;
            --dark: #6c757d;
            --medium-gray: #6c757d;
            --light-gray: #dee2e6;
            --white: #dee2e6;
            --light-color: #dee2e6;
            --light-bg: #dee2e6;
            --success: #28a745;
            --danger: #dc3545;
            --shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-bg);
            color: var(--dark);
            line-height: 1.6;
        }
        
        /* Application specific styles */
        .application-container {
            display: flex;
            min-height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background-color: var(--dark);
            color: var(--white);
            padding: 0;
            box-shadow: var(--shadow);
        }
        
        .application-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--light-bg);
        }
        
        .profile-section {
            text-align: center;
            padding: 2rem 1rem;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }
        
        .profile-img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 1rem;
            border: 3px solid var(--white);
            box-shadow: var(--shadow);
        }
        
        .profile-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.3rem;
        }
        
        .profile-email {
            font-size: 0.9rem;
            color: rgba(255, 255, 255, 0.8);
        }
        
        .nav-menu {
            padding: 1rem 0;
        }
        
        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.5rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }
        
        .nav-item i {
            margin-right: 0.8rem;
            width: 20px;
            text-align: center;
            font-size: 1.1rem;
        }
        
        .nav-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--white);
        }
        
        .nav-item.active {
            background-color: rgba(255, 255, 255, 0.15);
            color: var(--white);
            font-weight: 500;
            border-left: 4px solid var(--accent-color);
        }
        
        .badge {
            position: absolute;
            right: 15px;
            background-color: var(--accent-color);
            color: var(--dark);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .back-link {
            display: flex;
            align-items: center;
            color: var(--medium-gray);
            text-decoration: none;
            transition: var(--transition);
            font-weight: 500;
        }
        
        .back-link i {
            margin-right: 0.5rem;
        }
        
        .back-link:hover {
            color: var(--primary-color);
            transform: translateX(-5px);
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            animation: fadeIn 0.5s ease;
        }
        
        .alert-success {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
            border-left: 4px solid #28a745;
        }
        
        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-left: 4px solid #dc3545;
        }
        
        .applications-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }
        
        .applications-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark);
        }
        
        .applications-count {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            box-shadow: var(--shadow);
        }
        
        .status-tabs {
            display: flex;
            background-color: var(--white);
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
        }
        
        .status-tab {
            flex: 1;
            padding: 1rem;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            font-weight: 500;
            color: var(--medium-gray);
            border-bottom: 3px solid transparent;
        }
        
        .status-tab i {
            margin-right: 0.5rem;
        }
        
        .status-tab:hover {
            background-color: var(--light-color);
        }
        
        .status-tab.active {
            color: var(--primary-color);
            border-bottom-color: var(--primary-color);
            background-color: rgba(214, 40, 40, 0.05);
        }
        
        .application-card {
            background: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            overflow: hidden;
            animation: fadeIn 0.5s ease;
            transition: var(--transition);
        }
        
        .application-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 1.5rem;
            color: var(--white);
        }
        
        .application-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }
        
        .application-title {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }
        
        .application-company {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .application-company i {
            margin-right: 0.5rem;
        }
        
        .application-status {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-pending {
            background-color: var(--accent-color);
            color: var(--dark);
        }
        
        .status-accepted {
            background-color: var(--success);
            color: var(--white);
        }
        
        .status-rejected {
            background-color: var(--danger);
            color: var(--white);
        }
        
        .application-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .application-meta-item {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .application-meta-item i {
            margin-right: 0.5rem;
        }
        
        .application-footer {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--light-color);
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .application-date {
            font-size: 0.9rem;
            color: var(--medium-gray);
            display: flex;
            align-items: center;
        }
        
        .application-date i {
            margin-right: 0.5rem;
        }
        
        .application-actions {
            display: flex;
            gap: 0.8rem;
        }
        
        .btn-action {
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.9rem;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
        }
        
        .btn-action i {
            margin-right: 0.5rem;
        }
        
        .btn-action {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: var(--white);
            border: none;
            box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
        }
        
        .btn-action:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(52, 152, 219, 0.4);
        }
        
        .btn-withdraw {
            background: linear-gradient(135deg, var(--danger), #c0392b);
            box-shadow: 0 4px 10px rgba(220, 53, 69, 0.3);
        }
        
        .btn-withdraw:hover {
            box-shadow: 0 6px 15px rgba(220, 53, 69, 0.4);
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem 2rem;
            background-color: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
            animation: fadeIn 0.5s ease;
        }
        
        .empty-icon {
            font-size: 4rem;
            color: var(--light-gray);
            margin-bottom: 1.5rem;
        }
        
        .empty-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--dark);
        }
        
        .empty-text {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            max-width: 500px;
            margin-left: auto;
            margin-right: auto;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Responsive Design */
        @media (max-width: 992px) {
            .application-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                order: 2;
            }
            
            .application-content {
                order: 1;
            }
            
            .profile-section {
                padding: 1rem;
            }
            
            .profile-img {
                width: 60px;
                height: 60px;
            }
            
            .nav-menu {
                display: flex;
                flex-wrap: wrap;
                padding: 0.5rem;
            }
            
            .nav-item {
                flex: 1 0 auto;
                min-width: 120px;
                justify-content: center;
                padding: 0.8rem;
            }
            
            .nav-item i {
                margin-right: 0;
                margin-bottom: 0.3rem;
                font-size: 1.2rem;
            }
        }
        
        @media (max-width: 768px) {
            .application-header {
                flex-direction: column;
            }
            
            .application-status {
                margin-top: 1rem;
                align-self: flex-start;
            }
            
            .application-meta {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .application-footer {
                flex-direction: column;
                gap: 1rem;
                align-items: flex-start;
            }
            
            .application-actions {
                width: 100%;
            }
            
            .btn-action {
                flex: 1;
                justify-content: center;
            }
            
            .status-tabs {
                flex-wrap: wrap;
            }
            
            .status-tab {
                flex: 1 0 50%;
                padding: 0.8rem;
            }
        }
        
        @media (max-width: 576px) {
            .applications-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .applications-count {
                align-self: flex-start;
            }
            
            .status-tab {
                flex: 1 0 100%;
            }
        }
    </style>
</head>
<body>
<div class="application-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            <a href="{{ path('job_seeker_applications') }}" class="nav-item active">
                <i class="fas fa-paper-plane"></i> Mes Candidatures
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Messages
                {% if unread_messages_count is defined %}
                    {% set unread_count = unread_messages_count() %}
                    {% if unread_count > 0 %}
                        <span class="badge">{{ unread_count }}</span>
                    {% endif %}
                {% endif %}
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="application-content">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="applications-header">
            <h1 class="applications-title">Mes candidatures</h1>
            <div class="applications-count">{{ applications|length }} candidature(s)</div>
        </div>
        
        <div class="status-tabs">
            <div class="status-tab active" data-status="all">
                <i class="fas fa-list"></i> Toutes
            </div>
            <div class="status-tab" data-status="pending">
                <i class="fas fa-clock"></i> En attente
            </div>
            <div class="status-tab" data-status="accepted">
                <i class="fas fa-check-circle"></i> Acceptées
            </div>
            <div class="status-tab" data-status="rejected">
                <i class="fas fa-times-circle"></i> Rejetées
            </div>
        </div>
        
        <div class="application-list">
            {% if applications|length > 0 %}
                {% for application in applications %}
                    <div class="application-card" data-status="{{ application.status }}">
                        <div class="card-header">
                            <div class="application-header">
                                <div>
                                    <h3 class="application-title">{{ application.publication.title }}</h3>
                                    <div class="application-company">
                                        <i class="fas fa-building"></i> {{ application.publication.user.companyName ?? application.publication.user.username }}
                                    </div>
                                </div>
                                {% if application.status == 'pending' %}
                                    <span class="application-status status-pending">En attente</span>
                                {% elseif application.status == 'accepted' %}
                                    <span class="application-status status-accepted">Acceptée</span>
                                {% elseif application.status == 'rejected' %}
                                    <span class="application-status status-rejected">Rejetée</span>
                                {% endif %}
                            </div>
                            
                            <div class="application-meta">
                                <div class="application-meta-item">
                                    <i class="fas fa-map-marker-alt"></i> {{ application.publication.user.location ?? 'Non spécifié' }}
                                </div>
                                <div class="application-meta-item">
                                    <i class="fas fa-briefcase"></i> 
                                    {% if application.publication.category == 'job_offer' %}
                                        Offre d'emploi
                                    {% elseif application.publication.category == 'internship' %}
                                        Stage
                                    {% elseif application.publication.category == 'news' %}
                                        Actualité
                                    {% elseif application.publication.category == 'event' %}
                                        Événement
                                    {% endif %}
                                </div>
                                <div class="application-meta-item">
                                    <i class="far fa-calendar-alt"></i> 
                                    Publié le {{ application.publication.createdAt|date('d/m/Y') }}
                                </div>
                            </div>
                        </div>
                        
                        <div class="application-footer">
                            <div class="application-date">
                                <i class="fas fa-calendar-alt"></i> Postulé le {{ application.createdAt|date('d/m/Y') }}
                            </div>
                            <div class="application-actions">
                                <a href="{{ path('job_seeker_job_details', {'id': application.publication.id}) }}" class="btn-action">
                                    <i class="fas fa-eye"></i> Voir l'offre
                                </a>
                                {% if application.status == 'pending' %}
                                    <a href="#" class="btn-action btn-withdraw" data-id="{{ application.id }}">
                                        <i class="fas fa-times"></i> Retirer
                                    </a>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="empty-state">
                    <div class="empty-icon">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <h3 class="empty-title">Aucune candidature</h3>
                    <p class="empty-text">Vous n'avez pas encore postulé à des offres d'emploi. Parcourez les offres disponibles pour commencer votre recherche.</p>
                    <a href="{{ path('job_seeker_jobs_index') }}" class="btn-action">Parcourir les offres</a>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filtrage par statut
        const statusTabs = document.querySelectorAll('.status-tab');
        const applicationCards = document.querySelectorAll('.application-card');
        
        statusTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Mettre à jour l'onglet actif
                statusTabs.forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                
                // Filtrer les candidatures
                const status = this.getAttribute('data-status');
                
                applicationCards.forEach(card => {
                    if (status === 'all' || card.getAttribute('data-status') === status) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            });
        });
        
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll('.application-card');
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    setTimeout(() => {
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    }, index * 100);
                }
            });
        };
        
        // Initial state for animation
        const animatedItems = document.querySelectorAll('.application-card');
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });
        
        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);
        
        // Gestion du retrait de candidature
        const withdrawButtons = document.querySelectorAll('.btn-withdraw');
        
        withdrawButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                if (confirm('Êtes-vous sûr de vouloir retirer cette candidature ?')) {
                    const applicationId = this.getAttribute('data-id');
                    window.location.href = `/job-seeker/applications/${applicationId}/withdraw`;
                }
            });
        });
    });
</script>
</body>
</html>
==================================================

Fichier: templates\job_seeker\application_details.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\application_details.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Détails de la candidature{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .application-details-container {
            display: flex;
            min-height: 100vh;
        }
        
        .application-sidebar {
            width: 250px;
            background-color: #DB0C0CFF;
            color: white;
            padding: 20px 0;
        }
        
        .application-content {
            flex: 1;
            padding: 30px;
            background-color: #DB0C0CFF;
        }
        
        .profile-section {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        
        .profile-img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
        }
        
        .profile-name {
            font-size: 18px;
            margin-bottom: 5px;
        }
        
        .profile-email {
            font-size: 14px;
            color: rgba(255,255,255,0.7);
            margin-bottom: 0;
        }
        
        .nav-menu {
            padding: 20px 0;
        }
        
        .nav-item {
            display: block;
            padding: 12px 20px;
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: all 0.3s;
        }
        
        .nav-item:hover {
            background-color: rgba(255,255,255,0.1);
            color: white;
        }
        
        .nav-item.active {
            background-color: #DB0C0CFF;
            color: white;
        }
        
        .nav-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        .application-detail-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 25px;
            margin-bottom: 20px;
        }
        
        .application-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
        }
        
        .application-title {
            font-size: 24px;
            font-weight: bold;
            margin: 0;
        }
        
        .application-status {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .status-pending {
            background-color: #f39c12;
            color: white;
        }
        
        .status-accepted {
            background-color: #2ecc71;
            color: white;
        }
        
        .status-rejected {
            background-color: #e74c3c;
            color: white;
        }
        
        .application-info {
            margin-bottom: 25px;
        }
        
        .info-row {
            display: flex;
            margin-bottom: 15px;
        }
        
        .info-label {
            width: 150px;
            font-weight: bold;
            color: #555;
        }
        
        .info-value {
            flex: 1;
        }
        
        .application-message {
            background-color: #f9f9f9;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .message-header {
            font-weight: bold;
            margin-bottom: 10px;
            color: #333;
        }
        
        .message-content {
            white-space: pre-line;
            color: #555;
        }
        
        .job-details {
            margin-top: 30px;
        }
        
        .job-details h3 {
            font-size: 20px;
            margin-bottom: 15px;
            color: #333;
        }
        
        .job-description {
            white-space: pre-line;
            color: #555;
            line-height: 1.6;
        }
        
        .back-link {
            display: inline-block;
            margin-top: 20px;
            color: #DB0C0CFF;
            text-decoration: none;
        }
        
        .back-link i {
            margin-right: 5px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="application-details-container">
    <!-- Sidebar -->
    <div class="application-sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('job_seeker_profile_edit') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Modifier Profil
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            <a href="{{ path('job_seeker_applications') }}" class="nav-item active">
                <i class="fas fa-paper-plane"></i> Mes Candidatures
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="application-content">
        <a href="{{ path('job_seeker_applications') }}" class="back
==================================================

Fichier: templates\job_seeker\application_new.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\application_new.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Nouvelle candidature{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .application-form-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 30px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .publication-info {
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .publication-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .publication-company {
            font-size: 18px;
            color: #666;
            margin-bottom: 15px;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-label {
            font-weight: bold;
            margin-bottom: 8px;
            display: block;
        }
        
        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        .form-help {
            font-size: 14px;
            color: #666;
            margin-top: 5px;
        }
        
        .btn-submit {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .btn-submit:hover {
            background-color: #2980b9;
        }
        
        .btn-cancel {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-right: 10px;
        }
        
        .btn-cancel:hover {
            background-color: #c0392b;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-5 mb-5">
    <div class="application-form-container">
        <h1 class="mb-4">Postuler à une offre</h1>
        
        <div class="publication-info">
            <div class="publication-title">{{ publication.title }}</div>
            <div class="publication-company">{{ publication.user.companyName ?? publication.user.username }}</div>
            <div class="publication-category">Catégorie: {{ publication.category }}</div>
        </div>
        
        {{ form_start(form) }}
            <div class="form-group">
                {{ form_label(form.message, 'Message de motivation', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.message, {'attr': {'class': 'form-control'}}) }}
                {{ form_errors(form.message) }}
            </div>
            
            <div class="form-group">
                {{ form_label(form.resume, 'CV (PDF)', {'label_attr': {'class': 'form-label'}}) }}
                {{ form_widget(form.resume, {'attr': {'class': '
==================================================

Fichier: templates\job_seeker\apply.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\apply.html.twig
-----
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Postuler - {{ publication.title }}</title>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #f77f00;
            --accent-color: #fcbf49;
            --dark: #003049;
            --medium-gray: #6c757d;
            --light-gray: #dee2e6;
            --white: #ffffff;
            --light-color: #f8f9fa;
            --light-bg: #f5f5f5;
            --success: #28a745;
            --danger: #dc3545;
            --shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-bg);
            color: var(--dark);
            line-height: 1.6;
        }
        
        /* Application specific styles */
        .application-container {
            display: flex;
            min-height: 100vh;
        }
        
        .application-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }
        
        .back-link {
            display: flex;
            align-items: center;
            color: var(--medium-gray);
            text-decoration: none;
            transition: var(--transition);
            font-weight: 500;
        }
        
        .back-link i {
            margin-right: 0.5rem;
        }
        
        .back-link:hover {
            color: var(--primary-color);
            transform: translateX(-5px);
        }
        
        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            animation: fadeIn 0.5s ease;
        }
        
        .alert-success {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
            border-left: 4px solid #28a745;
        }
        
        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border-left: 4px solid #dc3545;
        }
        
        .application-card {
            background: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            overflow: hidden;
            animation: fadeIn 0.5s ease;
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            color: var(--white);
            position: relative;
        }
        
        .application-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        
        .company-info {
            display: flex;
            align-items: center;
        }
        
        .company-logo {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1rem;
            border: 2px solid var(--white);
        }
        
        .company-name {
            font-weight: 500;
        }
        
        .progress-steps {
            display: flex;
            justify-content: space-between;
            padding: 1.5rem;
            background-color: var(--light-color);
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .step {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
            position: relative;
        }
        
        .step:not(:last-child)::after {
            content: '';
            position: absolute;
            top: 20px;
            right: -50%;
            width: 100%;
            height: 2px;
            background-color: var(--medium-gray);
            z-index: 0;
        }
        
        .step.active:not(:last-child)::after,
        .step.completed:not(:last-child)::after {
            background-color: var(--primary-color);
        }
        
        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--medium-gray);
            color: var(--white);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
        }
        
        .step.active .step-number {
            background-color: var(--primary-color);
            box-shadow: 0 0 0 5px rgba(214, 40, 40, 0.2);
        }
        
        .step.completed .step-number {
            background-color: var(--success);
        }
        
        .step-label {
            font-size: 0.9rem;
            color: var(--medium-gray);
            font-weight: 500;
            text-align: center;
        }
        
        .step.active .step-label {
            color: var(--primary-color);
            font-weight: 600;
        }
        
        .step.completed .step-label {
            color: var(--success);
        }
        
        .application-form {
            padding: 2rem;
        }
        
        .form-section {
            margin-bottom: 2rem;
        }
        
        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1.5rem;
            color: var(--dark);
            display: flex;
            align-items: center;
        }
        
        .section-title i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }
        
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }
        
        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            transition: var(--transition);
        }
        
        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.1);
        }
        
        .form-text {
            font-size: 0.8rem;
            color: var(--medium-gray);
            margin-top: 0.5rem;
        }
        
        .file-upload {
            border: 2px dashed rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
        }
        
        .file-upload:hover {
            border-color: var(--primary-color);
            background-color: rgba(214, 40, 40, 0.05);
        }
        
        .file-upload i {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .file-upload-title {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .file-upload-subtitle {
            font-size: 0.8rem;
            color: var(--medium-gray);
        }
        
        .form-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .btn {
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
        }
        
        .btn i {
            margin-right: 0.5rem;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }
        
        .btn-outline {
            background-color: transparent;
            color: var(--medium-gray);
            border: 1px solid rgba(0, 0, 0, 0.1);
        }
        
        .btn-outline:hover {
            background-color: var(--light-color);
            color: var(--dark);
            transform: translateY(-3px);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Responsive Design */
        @media (max-width: 576px) {
            .card-header {
                padding: 1.5rem;
            }
            
            .progress-steps {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
            
            .step {
                width: 100%;
                flex-direction: row;
                justify-content: flex-start;
                align-items: center;
            }
            
            .step-number {
                margin-right: 1rem;
                margin-bottom: 0;
            }
            
            .step:not(:last-child)::after {
                display: none;
            }
            
            .form-actions {
                flex-direction: column-reverse;
                gap: 1rem;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="application-container">
    <div class="application-content">
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }}">
                    {{ message }}
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="application-card">
            <div class="card-header">
                <h1 class="application-title">Postuler à : {{ publication.title }}</h1>
                <div class="company-info">
                    {% if publication.user.profileImage %}
                        <img src="{{ asset(publication.user.profileImage) }}" alt="Logo" class="company-logo">
                    {% else %}
                        <div class="company-logo" style="background-color: #f0f0f0; display: flex; align-items: center; justify-content: center;">
                            <i class="fas fa-building" style="color: #aaa;"></i>
                        </div>
                    {% endif %}
                    <span class="company-name">{{ publication.user.companyName ?? publication.user.username }}</span>
                </div>
            </div>
            
            <div class="progress-steps">
                <div class="step completed">
                    <div class="step-number"><i class="fas fa-check"></i></div>
                    <div class="step-label">Consulter l'offre</div>
                </div>
                <div class="step active">
                    <div class="step-number">2</div>
                    <div class="step-label">Postuler</div>
                </div>
                <div class="step">
                    <div class="step-number">3</div>
                    <div class="step-label">Confirmation</div>
                </div>
            </div>
            
            {{ form_start(form, {'attr': {'class': 'application-form'}}) }}
            
            <div class="form-section">
                <h3 class="section-title"><i class="fas fa-edit"></i> Lettre de motivation</h3>
                
                <div class="form-group">
                    {{ form_label(form.message, 'Pourquoi postulez-vous ?', {'label_attr': {'class': 'form-label'}}) }}
                    {{ form_widget(form.message, {'attr': {
                        'class': 'form-control',
                        'placeholder': 'Expliquez en quelques mots pourquoi vous êtes le candidat idéal...'
                    }}) }}
                    <small class="text-muted">Minimum 150 caractères</small>
                </div>
            </div>
            
            <div class="form-section">
                <h3 class="section-title"><i class="fas fa-file-pdf"></i> Votre CV</h3>
                
                <div class="form-group">
                    {{ form_label(form.resumeFile, 'Téléchargez votre CV', {'label_attr': {'class': 'form-label'}}) }}
                    <div class="file-upload">
                        <i class="fas fa-cloud-upload-alt"></i>
                        <h4 class="file-upload-title">Glissez votre fichier ici</h4>
                        <p class="file-upload-subtitle">ou cliquez pour parcourir vos fichiers (PDF uniquement, max 2MB)</p>
                        {{ form_widget(form.resumeFile, {'attr': {'class': 'd-none'}}) }}
                    </div>
                    {{ form_errors(form.resumeFile) }}
                </div>
            </div>
            
            <div class="form-actions">
                <a href="{{ path('job_seeker_job_details', {'id': publication.id}) }}" class="btn btn-outline">
                    <i class="fas fa-times"></i> Annuler
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Envoyer ma candidature
                </button>
            </div>
            
            {{ form_end(form) }}
        </div>
    </div>
</div>

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Custom JS -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation au chargement
        document.body.classList.add('loaded');
        
        // Gestion du style du fichier uploadé
        const fileInput = document.getElementById('application_form_resumeFile');
        const fileUpload = document.querySelector('.file-upload');
        
        if (fileInput && fileUpload) {
            fileInput.addEventListener('change', function() {
                if (this.files.length > 0) {
                    const fileName = this.files[0].name;
                    fileUpload.innerHTML = `
                        <i class="fas fa-file-pdf" style="color: var(--success);"></i>
                        <h4 class="file-upload-title">${fileName}</h4>
                        <p class="file-upload-subtitle">Fichier sélectionné</p>
                    `;
                    fileUpload.style.borderColor = 'var(--success)';
                    fileUpload.style.backgroundColor = 'rgba(40, 167, 69, 0.05)';
                }
            });
            
            // Drag and drop
            fileUpload.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileUpload.style.borderColor = 'var(--primary-color)';
                fileUpload.style.backgroundColor = 'rgba(214, 40, 40, 0.05)';
            });
            
            fileUpload.addEventListener('dragleave', () => {
                fileUpload.style.borderColor = 'var(--light-gray)';
                fileUpload.style.background = 'var(--light-bg)';
            });
            
            fileUpload.addEventListener('drop', (e) => {
                e.preventDefault();
                fileInput.files = e.dataTransfer.files;
                const event = new Event('change');
                fileInput.dispatchEvent(event);
            });
        }
        
        // Animation du bouton de soumission
        const form = document.querySelector('.application-form');
        const submitBtn = form.querySelector('.btn-primary');
        
        form.addEventListener('submit', function() {
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Envoi en cours...';
            submitBtn.disabled = true;
        });
        
        // Animation des éléments au chargement
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.application-card, .form-section, .form-group'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.application-card, .form-section, .form-group'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Trigger animations
        setTimeout(animateElements, 100);
    });
</script>
</body>
</html>



==================================================

Fichier: templates\job_seeker\cv_builder.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\cv_builder.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}CV Builder{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .cv-container {
            display: flex;
            min-height: calc(100vh - 80px);
            background-color: var(--light-gray);
        }

        .cv-sidebar {
            width: 300px;
            background-color: white;
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }

        .cv-preview {
            flex: 1;
            padding: 2rem;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            overflow-y: auto;
        }

        .cv-paper {
            width: 210mm;
            min-height: 297mm;
            background: white;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            padding: 2rem;
        }

        .cv-header {
            display: flex;
            justify-content: space-between;
            border-bottom: 2px solid var(--primary-red);
            padding-bottom: 1rem;
            margin-bottom: 1.5rem;
        }

        .cv-name {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark-gray);
        }

        .cv-title {
            color: var(--primary-red);
            font-size: 1.2rem;
        }

        .cv-section {
            margin-bottom: 1.5rem;
        }

        .section-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-red);
            border-bottom: 1px solid #eee;
            padding-bottom: 0.3rem;
            margin-bottom: 0.8rem;
        }

        .cv-item {
            margin-bottom: 1rem;
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            font-weight: 600;
        }

        .item-date {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        .sidebar-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--dark-gray);
        }

        .template-option {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .template-option:hover {
            border-color: var(--primary-red);
        }

        .template-option.active {
            border-color: var(--primary-red);
            background-color: rgba(230, 57, 70, 0.05);
        }

        .template-preview {
            width: 100%;
            height: 120px;
            background-color: #f5f5f5;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--medium-gray);
        }

        .btn-download {
            background-color: var(--primary-red);
            color: white;
            width: 100%;
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            margin-top: 1rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="cv-container">
    <!-- CV Sidebar -->
    <div class="cv-sidebar">
        <h3 class="sidebar-title">CV Templates</h3>
        
        <div class="template-option active">
            <div class="template-preview">Modern Red</div>
            <div>Modern Design</div>
        </div>
        
        <div class="template-option">
            <div class="template-preview">Classic</div>
            <div>Classic Design</div>
        </div>
        
        <div class="template-option">
            <div class="template-preview">Creative</div>
            <div>Creative Design</div>
        </div>
        
        <h3 class="sidebar-title" style="margin-top: 2rem;">Sections</h3>
        
        <div class="form-group">
            <label class="form-label">Include Sections:</label>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="section-summary" checked>
                <label class="form-check-label" for="section-summary">Professional Summary</label>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="section-experience" checked>
                <label class="form-check-label" for="section-experience">Work Experience</label>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="section-education" checked>
                <label class="form-check-label" for="section-education">Education</label>
            </div>
            <div class="form-check">
                <input type="checkbox" class="form-check-input" id="section-skills" checked>
                <label class="form-check-label" for="section-skills">Skills</label>
            </div>
        </div>
        
        <button class="btn-download">
            <i class="fas fa-download"></i> Download CV
        </button>
    </div>
    
    <!-- CV Preview -->
    <div class="cv-preview">
        <div class="cv-paper">
            <div class="cv-header">
                <div>
                    <h1 class="cv-name">John Doe</h1>
                    <div class="cv-title">Senior Software Developer</div>
                </div>
                <div style="text-align: right;">
                    <div>john.doe@example.com</div>
                    <div>(123) 456-7890</div>
                    <div>New York, USA</div>
                </div>
            </div>
            
            <div class="cv-section">
                <h2 class="section-title">PROFESSIONAL SUMMARY</h2>
                <p>Experienced software developer with 5+ years of experience in web application development. 
                Specialized in JavaScript frameworks and cloud technologies. Passionate about creating efficient, 
                scalable and user-friendly applications.</p>
            </div>
            
            <div class="cv-section">
                <h2 class="section-title">WORK EXPERIENCE</h2>
                
                <div class="cv-item">
                    <div class="item-header">
                        <div>Senior Developer, Tech Solutions Inc.</div>
                        <div class="item-date">2018 - Present</div>
                    </div>
                    <ul>
                        <li>Led a team of 5 developers to build a SaaS platform</li>
                        <li>Implemented CI/CD pipeline reducing deployment time by 40%</li>
                        <li>Mentored junior developers and conducted code reviews</li>
                    </ul>
                </div>
                
                <div class="cv-item">
                    <div class="item-header">
                        <div>Software Developer, WebApps LLC</div>
                        <div class="item-date">2015 - 2018</div>
                    </div>
                    <ul>
                        <li>Developed and maintained 10+ web applications</li>
                        <li>Collaborated with UX team to improve user experience</li>
                        <li>Reduced application load time by 30% through optimization</li>
                    </ul>
                </div>
            </div>
            
            <div class="cv-section">
                <h2 class="section-title">EDUCATION</h2>
                <div class="cv-item">
                    <div class="item-header">
                        <div>Master of Computer Science, University of Technology</div>
                        <div class="item-date">2013 - 2015</div>
                    </div>
                </div>
            </div>
            
            <div class="cv-section">
                <h2 class="section-title">SKILLS</h2>
                <div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
                    <span style="background: #f0f0f0; padding: 0.3rem 0.8rem; border-radius: 20px;">JavaScript</span>
                    <span style="background: #f0f0f0; padding: 0.3rem 0.8rem; border-radius: 20px;">React</span>
                    <span style="background: #f0f0f0; padding: 0.3rem 0.8rem; border-radius: 20px;">Node.js</span>
                    <span style="background: #f0f0f0; padding: 0.3rem 0.8rem; border-radius: 20px;">AWS</span>
                    <span style="background: #f0f0f0; padding: 0.3rem 0.8rem; border-radius: 20px;">Docker</span>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\job_seeker\edit_profile.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\edit_profile.html.twig
-----
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modifier mon profil</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 2rem;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        /* Profile Edit Cards */
        .profile-edit-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .profile-card {
            background: var(--white);
            border-radius: 15px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
            height: fit-content;
        }

        .profile-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            padding: 1.5rem;
            position: relative;
        }

        .card-header h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0;
        }

        .card-body {
            padding: 2rem;
        }

        /* Profile Image Upload */
        .profile-image-container {
            text-align: center;
        }

        .profile-image-preview {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 5px solid var(--white);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 1.5rem;
            transition: var(--transition);
        }

        .profile-image-preview:hover {
            transform: scale(1.05);
        }

        .file-upload-container {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .file-upload-input {
            opacity: 0;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
            z-index: 2;
        }

        .file-upload-btn {
            background: var(--light-color);
            border: 2px dashed var(--medium-gray);
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            color: var(--medium-gray);
            transition: var(--transition);
            position: relative;
            z-index: 1;
        }

        .file-upload-btn i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .file-upload-container:hover .file-upload-btn {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .upload-help-text {
            font-size: 0.8rem;
            color: var(--medium-gray);
            margin-top: 0.5rem;
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            transition: var(--transition);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.1);
            outline: none;
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        /* Buttons */
        .btn {
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            display: inline-block;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        .btn-success {
            background: linear-gradient(135deg, #28a745, #218838);
            color: var(--white);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
        }

        .btn-success:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
        }

        .btn-block {
            display: block;
            width: 100%;
        }

        /* Flash Messages */
        .flash-messages {
            margin-bottom: 2rem;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-success {
            background-color: rgba(40, 167, 69, 0.1);
            border-left: 4px solid #28a745;
            color: #218838;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border-left: 4px solid #dc3545;
            color: #c82333;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-edit-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .card-body {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}?v={{ random() }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('job_seeker_profile_edit') }}" class="nav-item active">
                <i class="fas fa-user-edit"></i> Modifier Profil
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <h1 class="page-title">Modifier mon profil</h1>
        
        <!-- Flash Messages -->
        <div class="flash-messages">
            {% for label, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ label }}">
                        {{ message }}
                    </div>
                {% endfor %}
            {% endfor %}
        </div>
        
        <div class="profile-edit-grid">
            <!-- Profile Image Card -->
            <div class="profile-card">
                <div class="card-header">
                    <h3><i class="fas fa-camera"></i> Photo de profil</h3>
                </div>
                <div class="card-body">
                    <div class="profile-image-container">
                        {% if app.user.profileImage %}
                            <img src="{{ asset(app.user.profileImage) }}?v={{ random() }}" alt="Photo de profil" class="profile-image-preview">
                        {% else %}
                            <img src="{{ asset('img/fxchat.png') }}" alt="Photo de profil par défaut" class="profile-image-preview">
                        {% endif %}
                        
                        <form action="{{ path('job_seeker_image_upload') }}" method="post" enctype="multipart/form-data">
                            <div class="file-upload-container">
                                <input type="file" id="profile_image" name="profile_image" class="file-upload-input" accept="image/*" required>
                                <div class="file-upload-btn">
                                    <i class="fas fa-cloud-upload-alt"></i>
                                    <div>Cliquez ou glissez une image ici</div>
                                </div>
                            </div>
                            <p class="upload-help-text">JPG, PNG ou GIF. Max 2MB.</p>
                            <button type="submit" class="btn btn-primary btn-block">
                                <i class="fas fa-save"></i> Mettre à jour la photo
                            </button>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- Profile Information Card -->
            <div class="profile-card">
                <div class="card-header">
                    <h3><i class="fas fa-user-edit"></i> Informations personnelles</h3>
                </div>
                <div class="card-body">
                    {{ form_start(form, {'attr': {'class': 'profile-form'}}) }}
                        {% for field in form %}
                            <div class="form-group">
                                {{ form_label(field, null, {'label_attr': {'class': 'form-label'}}) }}
                                {{ form_widget(field, {'attr': {'class': 'form-control'}}) }}
                                {{ form_errors(field) }}
                            </div>
                        {% endfor %}
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-check"></i> Enregistrer les modifications
                        </button>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Prévisualisation de l'image
        const fileInput = document.getElementById('profile_image');
        const imagePreview = document.querySelector('.profile-image-preview');
        const uploadBtn = document.querySelector('.file-upload-btn');
        
        fileInput.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    uploadBtn.innerHTML = '<i class="fas fa-check"></i><div>Image sélectionnée</div>';
                    uploadBtn.style.borderColor = '#28a745';
                    uploadBtn.style.color = '#28a745';
                }
                
                reader.readAsDataURL(this.files[0]);
            }
        });
        
        // Animation des éléments
        const animateElements = function() {
            const elements = document.querySelectorAll('.profile-card');
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 100);
            });
        };
        
        // Initial state for animation
        const animatedItems = document.querySelectorAll('.profile-card');
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });
        
        // Trigger animations
        window.addEventListener('load', animateElements);
    });
</script>
</body>

==================================================

Fichier: templates\job_seeker\home.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\home.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Job Seeker Dashboard{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Style spécial pour le bouton Chatbot */
        .nav-item.chatbot-item {
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1.5rem;
            border-left: 3px solid var(--white);
        }

        .nav-item.chatbot-item:hover {
            background-color: rgba(255, 255, 255, 0.25);
        }

        .nav-item.chatbot-item i {
            color: #ffcc00;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary-color);
            font-size: 1.2rem;
        }

        .stat-info h3 {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.2rem;
            color: var(--dark);
        }

        .stat-info p {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        /* Section Titles */
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 2rem 0 1.5rem;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title i {
            color: var(--primary-color);
        }

        /* Quick Actions */
        .quick-actions {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .action-btn {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1.5rem;
            background: var(--white);
            border-radius: 10px;
            box-shadow: var(--shadow);
            transition: var(--transition);
            text-decoration: none;
            color: var(--dark);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .action-btn i {
            font-size: 1.8rem;
            margin-bottom: 0.8rem;
            color: var(--primary-color);
        }

        .action-btn span {
            font-weight: 500;
            text-align: center;
        }

        .action-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            color: var(--primary-color);
        }

        /* Recent Activities */
        .recent-activities {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
        }

        .activity-item {
            display: flex;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .activity-item:last-child {
            border-bottom: none;
        }

        .activity-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: var(--primary-color);
            font-size: 1rem;
        }

        .activity-title {
            font-weight: 500;
            margin-bottom: 0.3rem;
        }

        .activity-date {
            color: var(--medium-gray);
            font-size: 0.8rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .quick-actions {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .quick-actions {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item active">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content - Style inspiré du register-panel -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Welcome back, {{ app.user.username }}!</h1>
            <p class="welcome-subtitle">Here's what's happening with your job search today</p>
            <a href="{{ path('job_seeker_profile_index') }}" class="btn-primary">Complete Your Profile</a>
        </div>
        
        <h2 class="section-title"><i class="fas fa-chart-line"></i> Your Stats</h2>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-briefcase"></i>
                </div>
                <div class="stat-info">
                    <h3>12</h3>
                    <p>Jobs Applied</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="stat-info">
                    <h3>3</h3>
                    <p>Upcoming Interviews</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-envelope"></i>
                </div>
                <div class="stat-info">
                    <h3>5</h3>
                    <p>New Messages</p>
                </div>
            </div>
            
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-heart"></i>
                </div>
                <div class="stat-info">
                    <h3>8</h3>
                    <p>Saved Jobs</p>
                </div>
            </div>
        </div>
        
        <h2 class="section-title"><i class="fas fa-bolt"></i> Quick Actions</h2>
        <div class="quick-actions">
            <a href="" class="action-btn">
                <i class="fas fa-file-alt"></i>
                <span>Create New CV</span>
            </a>
            
            <a href="" class="action-btn">
                <i class="fas fa-search"></i>
                <span>Search Jobs</span>
            </a>
            
            <a href="" class="action-btn">
                <i class="fas fa-comments"></i>
                <span>Prepare Interview</span>
            </a>
            
            <a href="" class="action-btn">
                <i class="fas fa-chart-line"></i>
                <span>Improve Skills</span>
            </a>
        </div>
        
        <h2 class="section-title"><i class="fas fa-clock"></i> Recent Activities</h2>
        <div class="recent-activities">
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-briefcase"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Applied for Senior Developer at TechCorp</div>
                    <div class="activity-date">2 hours ago</div>
                </div>
            </div>
            
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-comments"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Interview scheduled with HR Manager</div>
                    <div class="activity-date">Yesterday, 3:45 PM</div>
                </div>
            </div>
            
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-envelope"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Received message from Recruiter</div>
                    <div class="activity-date">Yesterday, 10:30 AM</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.stat-card, .action-btn, .activity-item'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.stat-card, .action-btn, .activity-item'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = ${index * 0.1}s;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);

        // Check for new messages (example - you would replace this with real logic)
        function checkForNewMessages() {
            // Simuler des nouvelles notifications
            const hasNewMessages = Math.random() > 0.5;
            const chatbotBadge = document.getElementById('chatbot-badge');
            
            if (hasNewMessages) {
                chatbotBadge.classList.remove('d-none');
            } else {
                chatbotBadge.classList.add('d-none');
            }
        }

        // Check for messages every 30 seconds
        setInterval(checkForNewMessages, 30000);
        checkForNewMessages(); // Initial check
    });
</script>
</body>
</html>

==================================================

Fichier: templates\job_seeker\image_upload.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\image_upload.html.twig
-----
<form action="{{ path('job_seeker_image_upload') }}" method="post" enctype="multipart/form-data" class="image-upload-form">
    <div class="form-group">
        <label for="profile_image">Choisir une image de profil</label>
        <input type="file" id="profile_image" name="profile_image" class="form-control-file" accept="image/*" required>
    </div>
    <button type="submit" class="btn btn-primary">Télécharger</button>
</form>
==================================================

Fichier: templates\job_seeker\interviews.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interviews.html.twig
-----
<div class="profile-section">
    {% if app.user.profileImage %}
        <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
    {% else %}
        <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
    {% endif %}
    <h3 class="profile-name">{{ app.user.username }}</h3>
    <p class="profile-email">{{ app.user.email }}</p>
</div>
==================================================

Fichier: templates\job_seeker\interview_ai_session.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_ai_session.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Interview Session</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .interview-container {
            max-width: 900px;
            margin: 0 auto;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .interview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .interview-info {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 20px;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .info-item {
            background: var(--white);
            padding: 15px;
            border-radius: 10px;
            font-size: 14px;
            box-shadow: var(--shadow);
            flex: 1;
            min-width: 150px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .info-item i {
            font-size: 24px;
            margin-bottom: 10px;
            color: var(--primary-color);
        }

        .question-container {
            background: var(--white);
            border-radius: 12px;
            box-shadow: var(--shadow);
            padding: 25px;
            margin-bottom: 30px;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .question-number {
            font-size: 14px;
            color: var(--medium-gray);
            margin-bottom: 10px;
        }

        .question-text {
            font-size: 22px;
            font-weight: 500;
            margin-bottom: 20px;
        }

        .video-container {
            position: relative;
            width: 100%;
            height: 400px;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 20px;
            box-shadow: var(--shadow);
        }

        #userVideo {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .timer {
            font-size: 24px;
            font-weight: bold;
            color: var(--dark);
            background: var(--light-color);
            padding: 10px 20px;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }

        .control-buttons {
            display: flex;
            gap: 15px;
        }

        .btn-control {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            border: none;
            transition: var(--transition);
            box-shadow: var(--shadow);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn-control i {
            margin-right: 8px;
        }

        .btn-record {
            background: var(--primary-color);
            color: var(--white);
        }

        .btn-record:hover {
            background: var(--secondary-color);
            transform: translateY(-3px);
        }

        .btn-next {
            background: #007bff;
            color: var(--white);
        }

        .btn-next:hover {
            background: #0069d9;
            transform: translateY(-3px);
        }

        .btn-finish {
            background: #28a745;
            color: var(--white);
        }

        .btn-finish:hover {
            background: #218838;
            transform: translateY(-3px);
        }

        .feedback-container {
            background: var(--light-color);
            border-radius: 12px;
            padding: 25px;
            margin-top: 20px;
            display: none;
            box-shadow: var(--shadow);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .feedback-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .feedback-title i {
            margin-right: 10px;
            font-size: 20px;
        }

        .feedback-content {
            font-size: 15px;
            line-height: 1.6;
            padding: 15px;
            background: var(--white);
            border-radius: 8px;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .interview-info {
                flex-direction: column;
            }
        }

        @media (max-width: 576px) {
            .interview-info {
                grid-template-columns: 1fr;
            }
            
            .control-buttons {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="interview-container">
            <div class="interview-header">
                <h1>AI Interview Session</h1>
                <a href="{{ path('job_seeker_interviews_mock_interview') }}" class="btn-control btn-record">
                    <i class="fas fa-times"></i> Exit Interview
                </a>
            </div>
            
            <div class="interview-info">
                <div class="info-item">
                    <i class="fas fa-tag"></i>
                    <span>Type: {{ type|capitalize }}</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-chart-line"></i>
                    <span>Difficulty: {{ difficulty|capitalize }}</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-clock"></i>
                    <span>Duration: {{ duration }} minutes</span>
                </div>
                <div class="info-item">
                    <i class="fas fa-question-circle"></i>
                    <span>Questions: {{ questions|length }}</span>
                </div>
            </div>
            
            <div id="questionContainer" class="question-container">
                <div class="question-number">Question <span id="currentQuestionNum">1</span> of {{ questions|length }}</div>
                <div id="questionText" class="question-text">{{ questions[0].text }}</div>
                
                <div class="video-container">
                    <video id="userVideo" autoplay muted></video>
                </div>
                
                <div class="controls">
                    <div class="timer" id="timer">00:00</div>
                    <div class="control-buttons">
                        <button id="recordButton" class="btn-control btn-record">
                            <i class="fas fa-microphone"></i> Start Recording
                        </button>
                        <button id="nextButton" class="btn-control btn-next" disabled>
                            <i class="fas fa-arrow-right"></i> Next Question
                        </button>
                        <button id="finishButton" class="btn-control btn-finish" style="display: none;">
                            <i class="fas fa-check"></i> Finish Interview
                        </button>
                    </div>
                </div>
                
                <div id="feedbackContainer" class="feedback-container">
                    <div class="feedback-title">
                        <i class="fas fa-robot"></i> AI Feedback
                    </div>
                    <div id="feedbackContent" class="feedback-content">
                        Your answer will be analyzed here...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.interview-container, .interview-header, .interview-info, .question-container, .controls, .feedback-container'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 200);
            });
        };

        // Trigger animations
        setTimeout(animateElements, 300);

        // Variables
        const questions = {{ questions|json_encode|raw }};
        let currentQuestionIndex = 0;
        let mediaRecorder;
        let audioChunks = [];
        let isRecording = false;
        let timerInterval;
        let seconds = 0;
        let stream;
        
        // Elements
        const questionText = document.getElementById('questionText');
        const currentQuestionNum = document.getElementById('currentQuestionNum');
        const recordButton = document.getElementById('recordButton');
        const nextButton = document.getElementById('nextButton');
        const finishButton = document.getElementById('finishButton');
        const timer = document.getElementById('timer');
        const userVideo = document.getElementById('userVideo');
        const feedbackContainer = document.getElementById('feedbackContainer');
        const feedbackContent = document.getElementById('feedbackContent');
        
        // Setup camera
        async function setupCamera() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                userVideo.srcObject = stream;
                
                // Setup media recorder
                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = function(e) {
                    audioChunks.push(e.data);
                };
                
                mediaRecorder.onstop = function() {
                    // Process recording
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    
                    // Simulate AI feedback (in a real app, you'd send this to your backend)
                    setTimeout(() => {
                        generateFeedback();
                    }, 1500);
                };
            } catch (error) {
                console.error('Error accessing camera:', error);
                alert('Please allow camera and microphone access to continue with the interview.');
            }
        }
        
        // Start setup
        setupCamera();
        
        // Record button
        recordButton.addEventListener('click', function() {
            if (!isRecording) {
                // Start recording
                audioChunks = [];
                mediaRecorder.start();
                isRecording = true;
                
                // Update UI
                recordButton.innerHTML = '<i class="fas fa-stop"></i> Stop Recording';
                recordButton.classList.add('recording');
                
                // Start timer
                seconds = 0;
                timer.textContent = '00:00';
                timerInterval = setInterval(() => {
                    seconds++;
                    const minutes = Math.floor(seconds / 60);
                    const remainingSeconds = seconds % 60;
                    timer.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
                }, 1000);
            } else {
                // Stop recording
                mediaRecorder.stop();
                isRecording = false;
                
                // Update UI
                recordButton.innerHTML = '<i class="fas fa-microphone"></i> Start Recording';
                recordButton.classList.remove('recording');
                
                // Stop timer
                clearInterval(timerInterval);
                
                // Enable next button
                nextButton.disabled = false;
            }
        });
        
        // Next button
        nextButton.addEventListener('click', function() {
            currentQuestionIndex++;
            
            if (currentQuestionIndex < questions.length) {
                // Show next question
                updateQuestion();
                
                // Reset UI
                nextButton.disabled = true;
                feedbackContainer.style.display = 'none';
            } else {
                // End of interview
                finishInterview();
            }
        });
        
        // Finish button
        finishButton.addEventListener('click', function() {
            // Redirect to results page (in a real app)
            window.location.href = '{{ path('job_seeker_interviews_mock_interview') }}';
        });
        
        // Update question
        function updateQuestion() {
            const question = questions[currentQuestionIndex];
            questionText.textContent = question.text;
            currentQuestionNum.textContent = currentQuestionIndex + 1;
            
            // Show finish button on last question
            if (currentQuestionIndex === questions.length - 1) {
                nextButton.style.display = 'none';
                finishButton.style.display = 'block';
            }
        }
        
        // Generate feedback
        function generateFeedback() {
            // Sample feedback templates
            const feedbackTemplates = [
                "Your answer was clear and structured. You provided good examples to support your points. To improve, consider adding more specific details about the outcomes of your actions.",
                "You demonstrated good communication skills in your response. Your answer could be strengthened by more clearly connecting your experience to the specific requirements of the role.",
                "Your answer showed your problem-solving abilities. For improvement, try to be more concise and focus on the most relevant aspects of your experience.",
                "You provided a thoughtful response with good examples. To enhance your answer, consider using the STAR method (Situation, Task, Action, Result) more explicitly.",
                "Your answer highlighted your relevant skills well. To make it even stronger, quantify your achievements with specific metrics or results when possible."
            ];
            
            // Select random feedback
            const feedback = feedbackTemplates[Math.floor(Math.random() * feedbackTemplates.length)];
            
            // Display feedback
            feedbackContent.textContent = feedback;
            feedbackContainer.style.display = 'block';
        }
        
        // Finish interview
        function finishInterview() {
            // In a real app, you would save the interview results to the database
            alert('Interview completed! Redirecting to summary...');
            window.location.href = '{{ path('job_seeker_interviews_mock_interview') }}';
        }
    });
</script>
==================================================

Fichier: templates\job_seeker\interview_behavioral_questions.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_behavioral_questions.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Behavioral Interview Questions{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.8rem;
            font-size: 1.2rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .page-header {
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--dark);
            position: relative;
            display: inline-block;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .page-subtitle {
            color: var(--medium-gray);
            font-size: 1.1rem;
            margin-top: 1rem;
        }

        /* Question cards */
        .questions-container {
            margin-top: 2rem;
        }

        .question-card {
            background-color: var(--white);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border-left: 4px solid var(--accent-color);
            opacity: 0;
            transform: translateY(20px);
        }

        .question-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .question-category {
            display: inline-block;
            background-color: var(--accent-color);
            color: var(--white);
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }

        .question-text {
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        .card-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            padding: 0.6rem 1.2rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
        }

        .btn-outline {
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline:hover {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .back-button {
            margin-bottom: 1.5rem;
        }

        .btn-back {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.6rem 1.2rem;
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
            border-radius: 5px;
            font-weight: 600;
            text-decoration: none;
            transition: var(--transition);
        }

        .btn-back:hover {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .btn-save {
            background-color: transparent;
            border: none;
            color: var(--medium-gray);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-save:hover {
            color: var(--primary-color);
        }

        .btn-save.saved {
            color: var(--primary-color);
        }

        .action-btn {
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateY(20px);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">Behavioral Interview Questions</h1>
            <p class="page-subtitle">Practice these common behavioral questions to prepare for your interviews.</p>
        </div>

        <div class="back-button">
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-back">
                <i class="fas fa-arrow-left"></i> Back to Interviews
            </a>
        </div>

        <div class="action-btn">
            <a href="{{ path('job_seeker_interview_saved_questions') }}" class="btn btn-outline">
                <i class="fas fa-bookmark"></i> View My Saved Questions
            </a>
        </div>

        <div class="questions-container">
            {% for question in questions %}
            <div class="question-card">
                {% if question.subCategory is defined %}
                    <span class="question-category">{{ question.subCategory }}</span>
                {% elseif question.category is defined %}
                    <span class="question-category">{{ question.category }}</span>
                {% else %}
                    <span class="question-category">General</span>
                {% endif %}
                
                <p class="question-text">{{ question.text }}</p>
                
                <div class="card-actions">
                    <a href="{{ path('job_seeker_interview_practice_question', {'id': question.id}) }}" class="btn btn-primary">
                        <i class="fas fa-microphone"></i> Practice
                    </a>
                    
                    <button class="btn-save {% if question.is_saved is defined and question.is_saved %}saved{% endif %}" data-id="{{ question.id }}">
                        <i class="fas {% if question.is_saved is defined and question.is_saved %}fa-bookmark{% else %}fa-bookmark-o{% endif %}"></i>
                        {% if question.is_saved is defined and question.is_saved %}Saved{% else %}Save{% endif %}
                    </button>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.page-header, .action-btn, .question-card'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.page-header, .action-btn, .question-card'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = `${index * 0.1}s`;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);

        // Save/unsave functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionId = this.getAttribute('data-id');
                const isSaved = this.classList.contains('saved');
                
                // Toggle saved state
                if (isSaved) {
                    this.classList.remove('saved');
                    this.innerHTML = '<i class="fas fa-bookmark-o"></i> Save';
                } else {
                    this.classList.add('saved');
                    this.innerHTML = '<i class="fas fa-bookmark"></i> Saved';
                }
                
                // Here you would make an AJAX call to save/unsave the question
                console.log(`Question ${questionId} is now ${isSaved ? 'unsaved' : 'saved'}`);
            });
        });
    });
</script>
</body>
</html>



==================================================

Fichier: templates\job_seeker\interview_common_questions.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_common_questions.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Common Interview Questions{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.1rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            display: inline-block;
            background: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: background 0.3s ease;
            text-align: center;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
        }

        .btn-secondary {
            display: inline-block;
            background: var(--light-color);
            color: var(--dark);
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: center;
            border: 1px solid var(--medium-gray);
        }

        .btn-secondary:hover {
            background: var(--medium-gray);
            color: var(--white);
        }

        /* Questions Container */
        .questions-container {
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        .questions-filter {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 0.5rem 1rem;
            background: var(--light-color);
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }
        
        .filter-btn.active {
            background: var(--primary-color);
            color: white;
        }
        
        .questions-list {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .question-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            opacity: 0;
            transform: translateY(20px);
        }
        
        .question-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }
        
        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .question-text {
            font-size: 1.2rem;
            color: var(--dark);
        }
        
        .question-difficulty {
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .question-difficulty.easy {
            background: #e6f7e6;
            color: #28a745;
        }
        
        .question-difficulty.medium {
            background: #fff3cd;
            color: #856404;
        }
        
        .question-difficulty.hard {
            background: #f8d7da;
            color: #721c24;
        }
        
        .question-tips, .question-example {
            margin-bottom: 1rem;
        }
        
        .question-tips h4, .question-example h4 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }
        
        .question-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .btn-practice, .btn-save {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }
        
        .btn-practice {
            background: var(--primary-color);
            color: white;
        }
        
        .btn-practice:hover {
            background: var(--secondary-color);
        }
        
        .btn-save {
            background: var(--light-color);
            color: var(--dark);
        }
        
        .btn-save:hover {
            background: var(--medium-gray);
            color: white;
        }
        
        .no-questions {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            box-shadow: var(--shadow);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .question-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .question-actions {
                flex-direction: column;
            }
        }

        @media (max-width: 576px) {
            .questions-filter {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Common Interview Questions</h1>
            <p class="welcome-subtitle">Practice answering these frequently asked questions to prepare for your interviews</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <div class="questions-container">
            <div class="questions-filter">
                <button class="filter-btn active" data-filter="all">All Questions</button>
                <button class="filter-btn" data-filter="general">General</button>
                <button class="filter-btn" data-filter="experience">Experience</button>
                <button class="filter-btn" data-filter="skills">Skills</button>
                <button class="filter-btn" data-filter="motivation">Motivation</button>
            </div>
            
            <div class="questions-list">
                {% if questions|length > 0 %}
                    {% for question in questions %}
                        <div class="question-card" data-category="{{ question.subCategory }}" data-id="{{ question.id|default(loop.index) }}">
                            <div class="question-header">
                                <h3 class="question-text">{{ question.text }}</h3>
                                <div class="question-difficulty {{ question.difficulty }}">
                                    {{ question.difficulty|capitalize }}
                                </div>
                            </div>
                            
                            <div class="question-tips">
                                <h4>Tips for answering:</h4>
                                <p>{{ question.tips }}</p>
                            </div>
                            
                            <div class="question-example">
                                <h4>Example answer:</h4>
                                <p>{{ question.exampleAnswer }}</p>
                            </div>
                            
                            <div class="card-actions">
                                <a href="{{ path('job_seeker_interview_practice_question', {'id': question.id|default(loop.index)}) }}" class="btn btn-primary">
                                    <i class="fas fa-microphone"></i> Practice
                                </a>
                                
                                <button class="btn-save {% if question.is_saved is defined and question.is_saved %}saved{% endif %}" data-id="{{ question.id|default(loop.index) }}">
                                    <i class="fas {% if question.is_saved is defined and question.is_saved %}fa-bookmark{% else %}fa-bookmark-o{% endif %}"></i>
                                    {% if question.is_saved is defined and question.is_saved %}Saved{% else %}Save{% endif %}
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> No questions available at the moment.
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            // Animer le conteneur de questions
            const questionsContainer = document.querySelector('.questions-container');
            questionsContainer.style.opacity = '1';
            questionsContainer.style.transform = 'translateY(0)';
            
            // Animer les cartes de questions avec un délai séquentiel
            const questionCards = document.querySelectorAll('.question-card');
            questionCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        };

        // Exécuter l'animation après un court délai
        setTimeout(animateElements, 300);

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const questionCards = document.querySelectorAll('.question-card');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                const filter = this.getAttribute('data-filter');
                
                // Show/hide questions based on filter
                questionCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                        // Réanimer les cartes visibles
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    } else {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        setTimeout(() => {
                            card.style.display = 'none';
                        }, 300);
                    }
                });
            });
        });
        
        // Practice button functionality
        const practiceButtons = document.querySelectorAll('.btn-practice');
        practiceButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionId = questionCard.getAttribute('data-id');
                
                // Rediriger vers la page de pratique avec l'ID de la question
                window.location.href = `/job-seeker/interviews/practice/${questionId}`;
            });
        });
        
        // Save button functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionText = questionCard.querySelector('.question-text').textContent;
                
                // Here you would implement saving to the user's list
                alert(`Question saved to your list: ${questionText}`);
                // In a real implementation, you would make an AJAX call to save this to the user's profile
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            // Animer le conteneur de questions
            const questionsContainer = document.querySelector('.questions-container');
            questionsContainer.style.opacity = '1';
            questionsContainer.style.transform = 'translateY(0)';
            
            // Animer les cartes de questions avec un délai séquentiel
            const questionCards = document.querySelectorAll('.question-card');
            questionCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        };

        // Exécuter l'animation après un court délai
        setTimeout(animateElements, 300);

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const questionCards = document.querySelectorAll('.question-card');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                const filter = this.getAttribute('data-filter');
                
                // Show/hide questions based on filter
                questionCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                        // Réanimer les cartes visibles
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    } else {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        setTimeout(() => {
                            card.style.display = 'none';
                        }, 300);
                    }
                });
            });
        });
        
        // Practice button functionality
        const practiceButtons = document.querySelectorAll('.btn-practice');
        practiceButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionId = questionCard.getAttribute('data-id');
                
                // Rediriger vers la page de pratique avec l'ID de la question
                window.location.href = `/job-seeker/interviews/practice/${questionId}`;
            });
        });
        
        // Save button functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionText = questionCard.querySelector('.question-text').textContent;
                
                // Here you would implement saving to the user's list
                alert(`Question saved to your list: ${questionText}`);
                // In a real implementation, you would make an AJAX call to save this to the user's profile
            });
        });
    });
</script>

<style>
    .questions-container {
        margin-top: 2rem;
    }
    
    .questions-filter {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }
    
    .filter-btn {
        padding: 0.5rem 1rem;
        background: var(--light-color);
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Poppins', sans-serif;
    }
    
    .filter-btn.active {
        background: var(--primary-color);
        color: white;
    }
    
    .questions-list {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .question-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        opacity: 0;
        transform: translateY(20px);
    }
    
    .question-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }
    
    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    
    .question-text {
        font-size: 1.2rem;
        color: var(--dark);
    }
    
    .question-difficulty {
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }
    
    .question-difficulty.easy {
        background: #e6f7e6;
        color: #28a745;
    }
    
    .question-difficulty.medium {
        background: #fff3cd;
        color: #856404;
    }
    
    .question-difficulty.hard {
        background: #f8d7da;
        color: #721c24;
    }
    
    .question-tips, .question-example {
        margin-bottom: 1rem;
    }
    
    .question-tips h4, .question-example h4 {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        color: var(--dark);
    }
    
    .question-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .btn-practice, .btn-save {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        font-family: 'Poppins', sans-serif;
    }
    
    .btn-practice {
        background: var(--primary-color);
        color: white;
    }
    
    .btn-practice:hover {
        background: var(--secondary-color);
    }
    
    .btn-save {
        background: var(--light-color);
        color: var(--dark);
    }
    
    .btn-save:hover {
        background: var(--medium-gray);
        color: white;
    }
    
    .no-questions {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .dashboard-container {
            flex-direction: column;
        }
        
        .sidebar {
            width: 100%;
            border-radius: 0;
            padding: 1.5rem;
        }
        
        .main-content {
            padding: 1.5rem;
        }
        
        .profile-img {
            width: 100px;
            height: 100px;
        }
        
        .welcome-card {
            padding: 1.5rem;
        }
        
        .question-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .question-actions {
            flex-direction: column;
        }
    }

    @media (max-width: 576px) {
        .questions-filter {
            justify-content: center;
        }
    }
</style>



==================================================

Fichier: templates\job_seeker\interview_company_research.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_company_research.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Company Research</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
        }

        .nav-item i {
            margin-right: 1rem;
            font-size: 1.2rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            border-radius: 50%;
            padding: 0.2rem 0.5rem;
            font-size: 0.8rem;
            margin-left: auto;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--white);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            text-align: center;
        }

        .welcome-title {
            font-size: 1.8rem;
            color: var(--dark);
            margin-bottom: 1rem;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: var(--white);
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            font-weight: 500;
            transition: var(--transition);
            border: none;
            cursor: pointer;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-3px);
        }

        .btn-secondary {
            background: var(--medium-gray);
            color: var(--white);
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            font-weight: 500;
            transition: var(--transition);
            border: none;
            cursor: pointer;
        }

        .btn-secondary:hover {
            background: #95a5a6;
            transform: translateY(-3px);
        }

        /* Research Cards */
        .research-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .research-card {
            background: var(--white);
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            text-align: center;
            opacity: 0;
            transform: translateY(20px);
        }

        .research-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        }

        .research-icon {
            font-size: 2.5rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .research-title {
            font-size: 1.3rem;
            color: var(--dark);
            margin-bottom: 1rem;
        }

        .research-desc {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        /* Content Section Styles */
        .content-section {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .content-section h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .content-section h4 {
            color: var(--dark);
            margin: 1.5rem 0 0.5rem;
        }

        .content-section p {
            margin-bottom: 1rem;
            line-height: 1.6;
        }

        .content-section ul {
            margin-left: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .content-section li {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .research-container {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .research-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Conversations
            </a>
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Company Research</h1>
            <p class="welcome-subtitle">Learn how to research companies effectively for your interviews</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <div class="research-container">
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-building"></i>
                </div>
                <h3 class="research-title">Company Basics</h3>
                <p class="research-desc">Learn how to find essential information about a company's history, mission, and values.</p>
                <a href="#company-basics" class="btn-primary" onclick="showContent('company-basics')">Start Learning</a>
            </div>
            
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <h3 class="research-title">Financial Analysis</h3>
                <p class="research-desc">Understand how to research a company's financial health and market position.</p>
                <a href="#financial-analysis" class="btn-primary" onclick="showContent('financial-analysis')">Start Learning</a>
            </div>
            
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-users"></i>
                </div>
                <h3 class="research-title">Company Culture</h3>
                <p class="research-desc">Discover techniques to learn about a company's culture and work environment.</p>
                <a href="#company-culture" class="btn-primary" onclick="showContent('company-culture')">Start Learning</a>
            </div>
            
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-newspaper"></i>
                </div>
                <h3 class="research-title">Recent News</h3>
                <p class="research-desc">Learn how to stay updated with the latest news and developments about a company.</p>
                <a href="#recent-news" class="btn-primary" onclick="showContent('recent-news')">Start Learning</a>
            </div>
            
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-handshake"></i>
                </div>
                <h3 class="research-title">Networking Insights</h3>
                <p class="research-desc">Discover how to connect with current or former employees to gain insider knowledge.</p>
                <a href="#networking-insights" class="btn-primary" onclick="showContent('networking-insights')">Start Learning</a>
            </div>
            
            <div class="research-card">
                <div class="research-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <h3 class="research-title">Questions to Ask</h3>
                <p class="research-desc">Prepare intelligent questions to ask during your interview based on your research.</p>
                <a href="#questions-to-ask" class="btn-primary" onclick="showContent('questions-to-ask')">Start Learning</a>
            </div>
        </div>
        
        <!-- Content sections that will be shown/hidden -->
        <div id="content-sections" style="display: none; margin-top: 2rem;">
            <div id="company-basics" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Company Basics</h2>
                    <div style="text-align: left;">
                        <h3>How to Research Company Basics</h3>
                        <p>Understanding a company's basics is the foundation of effective interview preparation. Here's how to do it:</p>
                        
                        <h4>1. Visit the Company Website</h4>
                        <p>Start with the company's official website. Look for:</p>
                        <ul>
                            <li>About Us page - for company history and founding story</li>
                            <li>Mission and Vision statements - to understand their purpose and goals</li>
                            <li>Leadership team - to learn about key executives</li>
                            <li>Products/Services - to understand what they offer</li>
                        </ul>
                        
                        <h4>2. Check Social Media Profiles</h4>
                        <p>Company social media accounts often reveal their brand voice, culture, and recent initiatives:</p>
                        <ul>
                            <li>LinkedIn - for professional updates and company milestones</li>
                            <li>Twitter - for real-time news and engagement with customers</li>
                            <li>Instagram/Facebook - for culture and behind-the-scenes glimpses</li>
                        </ul>
                        
                        <h4>3. Use Wikipedia and Company Databases</h4>
                        <p>For established companies, Wikipedia often has comprehensive information about their history and notable events. Business databases like Crunchbase can provide founding dates, funding rounds, and acquisition history.</p>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
            
            <div id="financial-analysis" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Financial Analysis</h2>
                    <div style="text-align: left;">
                        <h3>How to Research Company Finances</h3>
                        <p>Understanding a company's financial health can give you valuable insights for your interview:</p>
                        
                        <h4>1. Public Companies</h4>
                        <p>For publicly traded companies:</p>
                        <ul>
                            <li>Annual Reports (10-K) and Quarterly Reports (10-Q) - available on the company's investor relations page</li>
                            <li>Earnings calls transcripts - to understand recent performance and future outlook</li>
                            <li>Financial news sites like Bloomberg, Yahoo Finance, or Google Finance</li>
                        </ul>
                        
                        <h4>2. Private Companies</h4>
                        <p>For private companies, information may be limited, but you can check:</p>
                        <ul>
                            <li>Crunchbase - for funding rounds and investors</li>
                            <li>News articles about funding or revenue milestones</li>
                            <li>Industry reports that might mention the company</li>
                        </ul>
                        
                        <h4>3. Key Financial Metrics to Understand</h4>
                        <p>Familiarize yourself with basic metrics like:</p>
                        <ul>
                            <li>Revenue growth - Is the company growing?</li>
                            <li>Profitability - Is the company making money?</li>
                            <li>Market share - How does it compare to competitors?</li>
                        </ul>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
            
            <div id="company-culture" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Company Culture</h2>
                    <div style="text-align: left;">
                        <h3>How to Research Company Culture</h3>
                        <p>Understanding a company's culture helps you determine if you'll be a good fit:</p>
                        
                        <h4>1. Review Company Values</h4>
                        <p>Most companies list their values on their website. Pay attention to:</p>
                        <ul>
                            <li>Core values and how they're described</li>
                            <li>How prominently they feature these values</li>
                            <li>Examples of how they put values into practice</li>
                        </ul>
                        
                        <h4>2. Check Employee Reviews</h4>
                        <p>Sites that provide insider perspectives:</p>
                        <ul>
                            <li>Glassdoor - for employee reviews and ratings</li>
                            <li>Indeed - for workplace reviews</li>
                            <li>LinkedIn - for employee posts about the company</li>
                        </ul>
                        
                        <h4>3. Look for Culture Indicators</h4>
                        <p>Other places to find culture clues:</p>
                        <ul>
                            <li>Company blog posts about internal events</li>
                            <li>Social media showing office life and team activities</li>
                            <li>Awards like "Best Places to Work"</li>
                        </ul>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
            
            <div id="recent-news" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Recent News</h2>
                    <div style="text-align: left;">
                        <h3>How to Stay Updated with Company News</h3>
                        <p>Being aware of recent developments shows your interest and preparation:</p>
                        
                        <h4>1. Set Up Google Alerts</h4>
                        <p>Create alerts for:</p>
                        <ul>
                            <li>The company name</li>
                            <li>Key products or services</li>
                            <li>Names of top executives</li>
                        </ul>
                        
                        <h4>2. Follow Industry News Sources</h4>
                        <p>Depending on the industry, check relevant sources:</p>
                        <ul>
                            <li>Tech: TechCrunch, The Verge, WIRED</li>
                            <li>Finance: Bloomberg, Wall Street Journal, Financial Times</li>
                            <li>Healthcare: STAT News, Modern Healthcare</li>
                            <li>General business: Forbes, Business Insider, Harvard Business Review</li>
                        </ul>
                        
                        <h4>3. Check Press Releases</h4>
                        <p>Most companies have a "Press" or "News" section on their website with recent announcements about:</p>
                        <ul>
                            <li>New products or services</li>
                            <li>Partnerships and acquisitions</li>
                            <li>Leadership changes</li>
                            <li>Company milestones</li>
                        </ul>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
            
            <div id="networking-insights" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Networking Insights</h2>
                    <div style="text-align: left;">
                        <h3>How to Network for Company Insights</h3>
                        <p>Connecting with current or former employees can provide invaluable insider information:</p>
                        
                        <h4>1. Use LinkedIn Strategically</h4>
                        <p>LinkedIn is your best resource for professional networking:</p>
                        <ul>
                            <li>Search for current and former employees</li>
                            <li>Look for 2nd-degree connections who might introduce you</li>
                            <li>Join industry or company-specific groups</li>
                        </ul>
                        
                        <h4>2. Craft Thoughtful Outreach Messages</h4>
                        <p>When reaching out to connections:</p>
                        <ul>
                            <li>Be specific about why you're contacting them</li>
                            <li>Mention shared connections or interests</li>
                            <li>Ask for a brief conversation, not a job</li>
                            <li>Prepare specific questions about the company culture and work environment</li>
                        </ul>
                        
                        <h4>3. Attend Industry Events</h4>
                        <p>Look for opportunities to meet employees in person:</p>
                        <ul>
                            <li>Industry conferences and meetups</li>
                            <li>Company-sponsored events</li>
                            <li>Alumni networking events</li>
                        </ul>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
            
            <div id="questions-to-ask" class="content-section">
                <div class="welcome-card">
                    <h2 class="welcome-title">Questions to Ask</h2>
                    <div style="text-align: left;">
                        <h3>Preparing Intelligent Questions Based on Research</h3>
                        <p>Asking thoughtful questions demonstrates your interest and preparation:</p>
                        
                        <h4>1. Company Strategy Questions</h4>
                        <ul>
                            <li>"I read about your recent expansion into [market]. How does this align with the company's long-term vision?"</li>
                            <li>"Your CEO mentioned [specific initiative] in the last earnings call. How is this affecting your team's priorities?"</li>
                            <li>"I noticed your company values emphasize [value]. Can you share how this manifests in day-to-day operations?"</li>
                        </ul>
                        
                        <h4>2. Role-Specific Questions</h4>
                        <ul>
                            <li>"How does this role contribute to the company's mission of [mission statement]?"</li>
                            <li>"I saw that your team recently launched [product/feature]. What was your team's role in that process?"</li>
                            <li>"How might the recent announcement about [news item] affect the priorities for this position?"</li>
                        </ul>
                        
                        <h4>3. Culture and Growth Questions</h4>
                        <ul>
                            <li>"I read that [company] was recognized for [award/achievement]. What aspects of the company culture contributed to this success?"</li>
                            <li>"How has the company's approach to [relevant topic] evolved since you joined?"</li>
                            <li>"What learning and development opportunities are available for someone in this role?"</li>
                        </ul>
                        
                        <a href="#" class="btn-secondary" onclick="hideContent()"><i class="fas fa-arrow-left"></i> Back to Research Topics</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.research-card'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.research-card'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = `${index * 0.1}s`;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);
        
        // Function to show content sections
        window.showContent = function(sectionId) {
            // Hide all content sections
            document.querySelectorAll('.content-section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Show the content container
            document.getElementById('content-sections').style.display = 'block';
            
            // Show the selected section
            document.getElementById(sectionId).style.display = 'block';
            
            // Scroll to the content
            document.getElementById(sectionId).scrollIntoView({
                behavior: 'smooth'
            });
        };
        
        // Function to hide content sections
        window.hideContent = function() {
            document.getElementById('content-sections').style.display = 'none';
            
            // Scroll back to the research cards
            document.querySelector('.research-container').scrollIntoView({
                behavior: 'smooth'
            });
        };
    });
</script>
</body>
</html>



==================================================

Fichier: templates\job_seeker\interview_index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_index.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Interview Preparation{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.1rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            display: inline-block;
            background: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: background 0.3s ease;
            text-align: center;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
        }

        /* Progress Overview */
        .progress-overview {
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        .progress-bar-container {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }
        
        .progress-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .progress-bar {
            height: 20px;
            background: var(--light-color);
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: var(--primary-color);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: width 0.5s ease;
        }
        
        .progress-text {
            color: white;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        /* Preparation Categories */
        .preparation-categories {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .category-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            opacity: 0;
            transform: translateY(20px);
        }
        
        .category-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .category-icon {
            width: 60px;
            height: 60px;
            background: var(--light-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }
        
        .category-icon i {
            font-size: 1.5rem;
            color: var(--primary-color);
        }
        
        .category-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .category-desc {
            color: var(--medium-gray);
            margin-bottom: 1rem;
            flex-grow: 1;
        }
        
        .category-progress {
            margin-bottom: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .preparation-categories {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        @media (max-width: 576px) {
            .preparation-categories {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Interview Preparation</h1>
            <p class="welcome-subtitle">Prepare for your interviews with our comprehensive tools and resources</p>
        </div>
        
        <div class="progress-overview">
            <div class="progress-bar-container">
                <div class="progress-label">Overall Progress</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: {{ progress.totalProgress }}%;">
                        <span class="progress-text">{{ progress.totalProgress }}%</span>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="preparation-categories">
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <h3 class="category-title">Common Questions</h3>
                <p class="category-desc">Practice answering frequently asked interview questions</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.commonQuestionsProgress }}%;">
                            <span class="progress-text">{{ progress.commonQuestionsProgress }}%</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_common_questions') }}" class="btn-primary">Start Practicing</a>
            </div>
            
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-code"></i>
                </div>
                <h3 class="category-title">Technical Challenges</h3>
                <p class="category-desc">Solve coding problems and technical challenges</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.technicalChallengesProgress }}%;">
                            <span class="progress-text">{{ progress.technicalChallengesProgress }}%</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_technical_challenges') }}" class="btn-primary">Solve Challenges</a>
            </div>
            
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-user-tie"></i>
                </div>
                <h3 class="category-title">Behavioral Questions</h3>
                <p class="category-desc">Practice answering behavioral and situational questions</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.behavioralQuestionsProgress }}%;">
                            <span class="progress-text">{{ progress.behavioralQuestionsProgress }}%</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_behavioral_questions') }}" class="btn-primary">Start Practicing</a>
            </div>
            
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-video"></i>
                </div>
                <h3 class="category-title">Mock Interviews</h3>
                <p class="category-desc">Practice with realistic interview simulations</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.mockInterviewCompleted ? 100 : 0 }}%;">
                            <span class="progress-text">{{ progress.mockInterviewCompleted ? '1/1' : '0/1' }}</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_mock_interview') }}" class="btn-primary">Start Mock Interview</a>
            </div>
            
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-building"></i>
                </div>
                <h3 class="category-title">Company Research</h3>
                <p class="category-desc">Learn how to research companies effectively</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.companyResearchProgress }}%;">
                            <span class="progress-text">{{ progress.companyResearchProgress }}%</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_company_research') }}" class="btn-primary">Start Learning</a>
            </div>
            
            <div class="category-card">
                <div class="category-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <h3 class="category-title">Salary Negotiation</h3>
                <p class="category-desc">Learn effective salary negotiation techniques</p>
                <div class="category-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: {{ progress.salaryNegotiationProgress }}%;">
                            <span class="progress-text">{{ progress.salaryNegotiationProgress }}%</span>
                        </div>
                    </div>
                </div>
                <a href="{{ path('job_seeker_interviews_salary_negotiation') }}" class="btn-primary">Start Learning</a>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.progress-overview, .category-card'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        };

        // Exécuter l'animation après un court délai
        setTimeout(animateElements, 300);

        // Animation au scroll
        window.addEventListener('scroll', function() {
            const elements = document.querySelectorAll(
                '.category-card:not([style*="opacity: 1"])'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    setTimeout(() => {
                        element.style.opacity = '1';
                        element.style.transform = 'translateY(0)';
                    }, 100 * index);
                }
            });
        });
    });
</script>
</body>
</html>






==================================================

Fichier: templates\job_seeker\interview_mock.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_mock.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Mock Interviews | Interview Preparation{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.1rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content styles */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-secondary {
            display: inline-block;
            background: var(--light-color);
            color: var(--dark);
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: center;
            border: 1px solid var(--medium-gray);
        }

        .btn-secondary:hover {
            background: var(--medium-gray);
            color: var(--white);
        }

        /* Mock Interview styles */
        .mock-interview-container {
            margin-top: 2rem;
        }

        .mock-options {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .mock-option-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .mock-option-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .mock-option-card.premium {
            border: 2px solid #ffd700;
        }

        .mock-option-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #ffd700;
            color: var(--dark);
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
        }

        .mock-option-icon {
            width: 60px;
            height: 60px;
            background: var(--light-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .mock-option-icon i {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .mock-option-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .mock-option-desc {
            color: var(--medium-gray);
            margin-bottom: 1rem;
        }

        .mock-option-features {
            list-style: none;
            margin-bottom: 1.5rem;
        }

        .mock-option-features li {
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
        }

        .mock-option-features li i {
            color: var(--primary-color);
            margin-right: 0.5rem;
        }

        .btn-start-mock {
            padding: 0.75rem 1rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.3s ease;
            font-family: 'Poppins', sans-serif;
            margin-top: auto;
        }

        .btn-start-mock:hover {
            background: var(--secondary-color);
        }

        .btn-start-mock.premium {
            background: #ffd700;
            color: var(--dark);
        }

        .btn-start-mock.premium:hover {
            background: #e6c200;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
        }

        .section-title i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .recent-mocks {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .recent-mock-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        .recent-mock-card:hover {
            transform: translateY(-5px);
        }

        .recent-mock-info {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .recent-mock-type {
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .recent-mock-type i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .recent-mock-date {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        .recent-mock-stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .mock-stat {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .stat-label {
            font-size: 0.8rem;
            color: var(--medium-gray);
            margin-bottom: 0.25rem;
        }

        .stat-value {
            font-weight: 600;
        }

        .recent-mock-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-view-recording, .btn-view-feedback {
            flex: 1;
            padding: 0.5rem;
            text-align: center;
            border-radius: 5px;
            text-decoration: none;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-view-recording {
            background: var(--light-color);
            color: var(--dark);
        }

        .btn-view-recording:hover {
            background: var(--medium-gray);
            color: white;
        }

        .btn-view-feedback {
            background: var(--primary-color);
            color: white;
        }

        .btn-view-feedback:hover {
            background: var(--secondary-color);
        }

        .no-mocks {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            box-shadow: var(--shadow);
            grid-column: 1 / -1;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: var(--white);
            margin: 5% auto;
            padding: 2rem;
            border-radius: 12px;
            width: 80%;
            max-width: 800px;
            box-shadow: var(--shadow);
            position: relative;
        }

        .close-modal {
            position: absolute;
            top: 1rem;
            right: 1.5rem;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .interview-setup {
            margin-top: 1.5rem;
        }

        .interview-setup h3 {
            margin-bottom: 1rem;
        }

        .interview-types, .difficulty-options {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .interview-type-btn, .difficulty-option-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--medium-gray);
            border-radius: 5px;
            background: var(--light-color);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .interview-type-btn.active, .difficulty-option-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .duration-slider {
            margin-bottom: 1.5rem;
        }

        .slider {
            width: 100%;
            margin-bottom: 0.5rem;
        }

        .camera-preview {
            margin: 1.5rem 0;
            position: relative;
            width: 100%;
            height: 300px;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
        }

        #cameraPreview {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .camera-controls {
            position: absolute;
            bottom: 1rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 1rem;
        }

        .camera-controls button {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(0, 0, 0, 0.5);
            border: none;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .camera-controls button:hover {
            background: rgba(0, 0, 0, 0.7);
        }

        #startAiInterview {
            width: 100%;
            padding: 1rem;
            font-size: 1.1rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .mock-options, .recent-mocks {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                width: 95%;
                padding: 1.5rem;
            }
            
            .interview-types, .difficulty-options {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'job_seeker/_sidebar.html.twig' with {'active': 'interviews'} %}
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Mock Interviews</h1>
            <p class="welcome-subtitle">Practice with realistic interview simulations and get feedback to improve your performance</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <div class="mock-interview-container">
            <div class="mock-options">
                <div class="mock-option-card">
                    <div class="mock-option-icon">
                        <i class="fas fa-robot"></i>
                    </div>
                    <h3 class="mock-option-title">AI-Powered Interview</h3>
                    <p class="mock-option-desc">Practice with our AI interviewer that adapts to your responses and provides instant feedback.</p>
                    <ul class="mock-option-features">
                        <li><i class="fas fa-check"></i> Available 24/7</li>
                        <li><i class="fas fa-check"></i> Instant feedback</li>
                        <li><i class="fas fa-check"></i> Multiple interview types</li>
                        <li><i class="fas fa-check"></i> Voice recognition</li>
                    </ul>
                    <button class="btn-start-mock" data-type="ai">Start AI Interview</button>
                </div>
                
                <div class="mock-option-card">
                    <div class="mock-option-icon">
                        <i class="fas fa-video"></i>
                    </div>
                    <h3 class="mock-option-title">Self-Recording Session</h3>
                    <p class="mock-option-desc">Record yourself answering interview questions and review your performance.</p>
                    <ul class="mock-option-features">
                        <li><i class="fas fa-check"></i> Practice at your own pace</li>
                        <li><i class="fas fa-check"></i> Review and self-assess</li>
                        <li><i class="fas fa-check"></i> Customizable questions</li>
                        <li><i class="fas fa-check"></i> Save recordings for later</li>
                    </ul>
                    <button class="btn-start-mock" data-type="self">Start Recording Session</button>
                </div>
                
                <div class="mock-option-card premium">
                    <div class="mock-option-badge">Premium</div>
                    <div class="mock-option-icon">
                        <i class="fas fa-user-tie"></i>
                    </div>
                    <h3 class="mock-option-title">Expert Interview Coach</h3>
                    <p class="mock-option-desc">Schedule a mock interview with a professional career coach for personalized feedback.</p>
                    <ul class="mock-option-features">
                        <li><i class="fas fa-check"></i> Industry-specific experts</li>
                        <li><i class="fas fa-check"></i> Detailed personalized feedback</li>
                        <li><i class="fas fa-check"></i> Career advice and tips</li>
                        <li><i class="fas fa-check"></i> Follow-up session included</li>
                    </ul>
                    <button class="btn-start-mock premium" data-type="expert">Schedule with Expert</button>
                </div>
            </div>
            
            <h2 class="section-title"><i class="fas fa-history"></i> Recent Mock Interviews</h2>
            
            <div class="recent-mocks">
                {% if recentMocks is defined and recentMocks|length > 0 %}
                    {% for mock in recentMocks %}
                        <div class="recent-mock-card">
                            <div class="recent-mock-info">
                                <div class="recent-mock-type">
                                    {% if mock.type == 'ai' %}
                                        <i class="fas fa-robot"></i> AI Interview
                                    {% elseif mock.type == 'self' %}
                                        <i class="fas fa-video"></i> Self Recording
                                    {% else %}
                                        <i class="fas fa-user-tie"></i> Expert Session
                                    {% endif %}
                                </div>
                                <div class="recent-mock-date">{{ mock.date|date('M d, Y') }}</div>
                            </div>
                            <div class="recent-mock-stats">
                                <div class="mock-stat">
                                    <span class="stat-label">Duration</span>
                                    <span class="stat-value">{{ mock.duration }} min</span>
                                </div>
                                <div class="mock-stat">
                                    <span class="stat-label">Questions</span>
                                    <span class="stat-value">{{ mock.questionCount }}</span>
                                </div>
                                <div class="mock-stat">
                                    <span class="stat-label">Score</span>
                                    <span class="stat-value">{{ mock.score }}%</span>
                                </div>
                            </div>
                            <div class="recent-mock-actions">
                                <a href="#" class="btn-view-recording">View Recording</a>
                                <a href="#" class="btn-view-feedback">View Feedback</a>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="no-mocks">
                        <p>You haven't completed any mock interviews yet. Start your first one today!</p>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- AI Interview Modal -->
<div id="aiInterviewModal" class="modal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2>AI-Powered Mock Interview</h2>
        
        <div class="interview-setup">
            <h3>Choose Interview Type</h3>
            <div class="interview-types">
                <button class="interview-type-btn active" data-type="general">General</button>
                <button class="interview-type-btn" data-type="technical">Technical</button>
                <button class="interview-type-btn" data-type="behavioral">Behavioral</button>
            </div>
            
            <h3>Interview Duration</h3>
            <div class="duration-slider">
                <input type="range" min="5" max="30" value="15" class="slider" id="durationSlider">
                <span id="durationValue">15 minutes</span>
            </div>
            
            <h3>Difficulty Level</h3>
            <div class="difficulty-options">
                <button class="difficulty-option-btn" data-difficulty="easy">Easy</button>
                <button class="difficulty-option-btn active" data-difficulty="medium">Medium</button>
                <button class="difficulty-option-btn" data-difficulty="hard">Hard</button>
            </div>
            
            <div class="camera-preview">
                <video id="cameraPreview" autoplay muted></video>
                <div class="camera-controls">
                    <button id="toggleCamera"><i class="fas fa-video"></i></button>
                    <button id="toggleMic"><i class="fas fa-microphone"></i></button>
                </div>
            </div>
            
            <button id="startAiInterview" class="btn-primary">Start Interview</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Modal functionality
        const aiModal = document.getElementById('aiInterviewModal');
        const startAiButtons = document.querySelectorAll('.btn-start-mock[data-type="ai"]');
        const closeModal = document.querySelector('.close-modal');
        
        // Add event listener for self-recording session buttons
        const startSelfButtons = document.querySelectorAll('.btn-start-mock[data-type="self"]');
        startSelfButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Redirect to the self-recording session page
                window.location.href = "{{ path('job_seeker_interviews_self_recording') }}";
            });
        });
        
        startAiButtons.forEach(button => {
            button.addEventListener('click', function() {
                aiModal.style.display = 'block';
                setupCamera();
            });
        });
        
        closeModal.addEventListener('click', function() {
            aiModal.style.display = 'none';
            stopCamera();
        });
        
        window.addEventListener('click', function(event) {
            if (event.target == aiModal) {
                aiModal.style.display = 'none';
                stopCamera();
            }
        });
        
        // Interview type selection
        const interviewTypeButtons = document.querySelectorAll('.interview-type-btn');
        interviewTypeButtons.forEach(button => {
            button.addEventListener('click', function() {
                interviewTypeButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        // Difficulty selection
        const difficultyButtons = document.querySelectorAll('.difficulty-option-btn');
        difficultyButtons.forEach(button => {
            button.addEventListener('click', function() {
                difficultyButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });
        
        // Ajout des fonctions manquantes pour la caméra
        let stream = null;
        
        function setupCamera() {
            const cameraPreview = document.getElementById('cameraPreview');
            
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                    .then(function(mediaStream) {
                        stream = mediaStream;
                        cameraPreview.srcObject = mediaStream;
                        cameraPreview.play();
                    })
                    .catch(function(error) {
                        console.error('Could not access camera:', error);
                        alert('Please allow camera access to continue with the interview.');
                    });
            } else {
                alert('Your browser does not support camera access. Please use a modern browser.');
            }
        }
        
        function stopCamera() {
            if (stream) {
                stream.getTracks().forEach(track => {
                    track.stop();
                });
                stream = null;
            }
        }
        
        // Contrôles de caméra et micro
        const toggleCamera = document.getElementById('toggleCamera');
        const toggleMic = document.getElementById('toggleMic');
        
        toggleCamera.addEventListener('click', function() {
            if (stream) {
                const videoTrack = stream.getVideoTracks()[0];
                videoTrack.enabled = !videoTrack.enabled;
                this.innerHTML = videoTrack.enabled ? 
                    '<i class="fas fa-video"></i>' : 
                    '<i class="fas fa-video-slash"></i>';
            }
        });
        
        toggleMic.addEventListener('click', function() {
            if (stream) {
                const audioTrack = stream.getAudioTracks()[0];
                audioTrack.enabled = !audioTrack.enabled;
                this.innerHTML = audioTrack.enabled ? 
                    '<i class="fas fa-microphone"></i>' : 
                    '<i class="fas fa-microphone-slash"></i>';
            }
        });
        
        // Slider de durée
        const durationSlider = document.getElementById('durationSlider');
        const durationValue = document.getElementById('durationValue');
        
        durationSlider.addEventListener('input', function() {
            durationValue.textContent = this.value + ' minutes';
        });
        
        // Bouton de démarrage d'interview
        const startAiInterview = document.getElementById('startAiInterview');
        
        startAiInterview.addEventListener('click', function() {
            const interviewType = document.querySelector('.interview-type-btn.active').getAttribute('data-type');
            const difficulty = document.querySelector('.difficulty-option-btn.active').getAttribute('data-difficulty');
            const duration = durationSlider.value;
            
            // Rediriger vers la page d'interview avec les paramètres
            window.location.href = `/job-seeker/interviews/ai-interview?type=${interviewType}&difficulty=${difficulty}&duration=${duration}`;
        });
    });
</script>




==================================================

Fichier: templates\job_seeker\interview_practice_question.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_practice_question.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Practice Behavioral Question</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            color: var(--white);
            font-size: 1.5rem;
            margin-top: 1rem;
            font-weight: 600;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 10px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.2rem;
            width: 24px;
            text-align: center;
        }

        .nav-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .practice-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }
        
        .question-card {
            background-color: var(--light-color);
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 2rem;
            border-left: 4px solid var(--primary-color);
        }
        
        .question-text {
            font-size: 1.25rem;
            font-weight: 500;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }
        
        .question-category {
            display: inline-block;
            background-color: var(--primary-color);
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }
        
        .recording-controls {
            display: flex;
            align-items: center;
            margin: 2rem 0;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }
        
        .btn-record {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }
        
        .btn-record:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }
        
        .btn-record.recording {
            background: linear-gradient(135deg, #dc3545, #c81f2d);
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(220, 53, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(220, 53, 69, 0);
            }
        }
        
        .timer {
            font-size: 1.5rem;
            font-weight: 600;
            margin-left: 1.5rem;
            color: var(--primary-color);
        }
        
        .feedback-section {
            background-color: var(--light-color);
            padding: 1.5rem;
            border-radius: 8px;
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }
        
        .feedback-section h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-size: 1.2rem;
        }
        
        #feedbackContent {
            background-color: var(--white);
            padding: 1rem;
            border-radius: 8px;
            box-shadow: var(--shadow);
        }
        
        .tips-section {
            background-color: var(--light-color);
            padding: 1.5rem;
            border-radius: 8px;
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }
        
        .tips-section h3 {
            color: var(--primary-color);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .tips-section h3 i {
            color: var(--primary-color);
        }
        
        .tips-list {
            list-style-type: none;
            padding-left: 0;
        }
        
        .tips-list li {
            margin-bottom: 0.8rem;
            padding-left: 1.5rem;
            position: relative;
        }
        
        .tips-list li:before {
            content: "•";
            color: var(--primary-color);
            font-weight: bold;
            position: absolute;
            left: 0;
        }
        
        .action-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }
        
        .btn-primary, .btn-secondary {
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }
        
        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }
        
        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }
        
        .btn-secondary {
            background-color: var(--light-color);
            color: var(--dark);
            border: none;
        }
        
        .btn-secondary:hover {
            background-color: var(--medium-gray);
            color: var(--white);
            transform: translateY(-2px);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .practice-container {
                padding: 1.5rem;
            }
        }

        @media (max-width: 576px) {
            .recording-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .timer {
                margin-left: 0;
                margin-bottom: 1rem;
                text-align: center;
            }
            
            .action-buttons {
                flex-direction: column;
                gap: 1rem;
            }
            
            .btn-primary, .btn-secondary {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="practice-container">
            <h1 class="mb-4">Practice Your Answer</h1>
            
            <div class="question-card">
                <span class="question-category">{{ question.category }}</span>
                <p class="question-text">{{ question.text }}</p>
            </div>
            
            <div class="recording-controls">
                <button id="recordButton" class="btn-record">
                    <i class="fas fa-microphone"></i> Start Recording
                </button>
                <div id="timer" class="timer">00:00</div>
            </div>
            
            <form id="practiceForm" action="{{ path('job_seeker_interview_practice_question', {'id': question.id}) }}" method="post" style="display: none;">
                <input type="hidden" name="recording_url" id="recordingUrl" value="">
                <input type="hidden" name="feedback" id="feedbackInput" value="">
                
                <div class="feedback-section">
                    <h3><i class="fas fa-robot"></i> AI Feedback</h3>
                    <div id="feedbackContent">
                        <p>Your answer will be analyzed here...</p>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <a href="{{ path('job_seeker_interview_behavioral_questions') }}" class="btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Questions
                    </a>
                    <button type="submit" class="btn-primary">
                        <i class="fas fa-save"></i> Save Practice Session
                    </button>
                </div>
            </form>
            
            <div class="tips-section">
                <h3><i class="fas fa-lightbulb"></i> Tips for Answering Behavioral Questions</h3>
                <ul class="tips-list">
                    <li>Use the STAR method: Situation, Task, Action, Result</li>
                    <li>Be specific and provide concrete examples</li>
                    <li>Focus on your individual contribution, even when discussing team efforts</li>
                    <li>Keep your answer concise and relevant</li>
                    <li>Practice your delivery, but avoid sounding rehearsed</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.practice-container, .recording-controls, .feedback-section, .tips-section, .action-buttons'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 200);
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.practice-container, .recording-controls, .feedback-section, .tips-section, .action-buttons'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
        });

        // Trigger animations
        window.addEventListener('load', animateElements);

        // Fonctionnalité d'enregistrement
        const recordButton = document.getElementById('recordButton');
        const timerElement = document.getElementById('timer');
        const practiceForm = document.getElementById('practiceForm');
        const feedbackContent = document.getElementById('feedbackContent');
        const feedbackInput = document.getElementById('feedbackInput');
        
        let isRecording = false;
        let timerInterval;
        let seconds = 0;
        let mediaRecorder;
        let audioChunks = [];
        
        recordButton.addEventListener('click', function() {
            if (!isRecording) {
                // Démarrer l'enregistrement
                startRecording();
            } else {
                // Arrêter l'enregistrement
                stopRecording();
            }
        });
        
        function startRecording() {
            // Demander l'accès au microphone
            navigator.mediaDevices.getUserMedia({ audio: true })
                .then(stream => {
                    mediaRecorder = new MediaRecorder(stream);
                    
                    mediaRecorder.ondataavailable = function(e) {
                        audioChunks.push(e.data);
                    };
                    
                    mediaRecorder.onstop = function() {
                        // Créer un blob audio à partir des chunks
                        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                        
                        // Simuler l'analyse de l'IA (dans une application réelle, vous enverriez l'audio à un serveur)
                        setTimeout(() => {
                            // Afficher le formulaire avec le feedback
                            practiceForm.style.display = 'block';
                            
                            // Exemple de feedback (à remplacer par une vraie analyse)
                            const feedback = "Your answer demonstrates good structure using the STAR method. You provided a clear situation and explained your actions well. To improve, consider adding more specific metrics about the results you achieved.";
                            
                            feedbackContent.innerHTML = `<p>${feedback}</p>`;
                            feedbackInput.value = feedback;
                            
                            // Créer une URL pour l'audio enregistré
                            const audioUrl = URL.createObjectURL(audioBlob);
                            document.getElementById('recordingUrl').value = audioUrl;
                            
                            // Ajouter un lecteur audio
                            const audioElement = document.createElement('audio');
                            audioElement.src = audioUrl;
                            audioElement.controls = true;
                            audioElement.style.width = '100%';
                            audioElement.style.marginTop = '1rem';
                            
                            feedbackContent.appendChild(audioElement);
                        }, 1500);
                    };
                    
                    // Démarrer l'enregistrement
                    mediaRecorder.start();
                    audioChunks = [];
                    isRecording = true;
                    
                    // Mettre à jour l'interface
                    recordButton.innerHTML = '<i class="fas fa-stop"></i> Stop Recording';
                    recordButton.classList.add('recording');
                    
                    // Démarrer le timer
                    seconds = 0;
                    timerElement.textContent = '00:00';
                    timerInterval = setInterval(() => {
                        seconds++;
                        const minutes = Math.floor(seconds / 60);
                        const remainingSeconds = seconds % 60;
                        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
                    }, 1000);
                })
                .catch(error => {
                    console.error('Error accessing microphone:', error);
                    alert('Please allow microphone access to record your answer.');
                });
        }
        
        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                // Arrêter l'enregistrement
                mediaRecorder.stop();
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
                
                // Arrêter le timer
                clearInterval(timerInterval);
                
                // Mettre à jour l'interface
                isRecording = false;
                recordButton.innerHTML = '<i class="fas fa-microphone"></i> Start Recording';
                recordButton.classList.remove('recording');
            }
        }
    });
</script>


==================================================

Fichier: templates\job_seeker\interview_prep.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_prep.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Interview Preparation | Job Seeker Dashboard{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Style spécial pour le bouton Chatbot */
        .nav-item.chatbot-item {
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1.5rem;
            border-left: 3px solid var(--white);
        }

        .nav-item.chatbot-item:hover {
            background-color: rgba(255, 255, 255, 0.25);
        }

        .nav-item.chatbot-item i {
            color: #ffcc00;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Interview Specific Styles */
        .upcoming-interview {
            background-color: rgba(214, 40, 40, 0.1);
            border-left: 4px solid var(--primary-color);
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: var(--transition);
        }

        .upcoming-interview:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.2);
        }

        .interview-info h3 {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: var(--dark);
        }

        .interview-info p {
            color: var(--medium-gray);
            margin-bottom: 0.5rem;
        }

        .interview-info strong {
            color: var(--dark);
            font-weight: 600;
        }

        .btn-start {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
            white-space: nowrap;
        }

        .btn-start:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Section Titles */
        .section-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 2rem 0 1.5rem;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title i {
            color: var(--primary-color);
        }

        /* Preparation Categories */
        .prep-categories {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .prep-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.8rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            flex-direction: column;
        }

        .prep-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            border-color: var(--primary-color);
        }

        .prep-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background-color: rgba(214, 40, 40, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1.5rem;
            color: var(--primary-color);
            font-size: 1.5rem;
        }

        .prep-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.8rem;
            color: var(--dark);
        }

        .prep-desc {
            color: var(--medium-gray);
            font-size: 0.95rem;
            margin-bottom: 1.5rem;
            flex-grow: 1;
        }

        .prep-link {
            color: var(--primary-color);
            font-weight: 500;
            text-decoration: none;
            display: flex;
            align-items: center;
            transition: var(--transition);
        }

        .prep-link i {
            margin-left: 8px;
            transition: var(--transition);
        }

        .prep-link:hover {
            color: var(--secondary-color);
        }

        .prep-link:hover i {
            transform: translateX(5px);
        }

        /* Progress Section */
        .progress-section {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .progress-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--dark);
        }

        .progress-bar {
            height: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
            margin-bottom: 1rem;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
            border-radius: 5px;
            width: 65%;
            transition: width 0.5s ease;
        }

        .progress-text {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .upcoming-interview {
                flex-direction: column;
                text-align: center;
                gap: 1.5rem;
            }
            
            .btn-start {
                width: 100%;
            }
        }

        @media (max-width: 768px) {
            .prep-categories {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            }
        }

        @media (max-width: 576px) {
            .prep-categories {
                grid-template-columns: 1fr;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item chatbot-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content - Style inspiré du register-panel -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Interview Preparation</h1>
            <p class="welcome-subtitle">Get ready to impress your interviewers with our comprehensive preparation resources</p>
            <a href="#" class="btn-primary">Start Practice Session</a>
        </div>
        
        <div class="upcoming-interview">
            <div class="interview-info">
                <h3>Upcoming Interview</h3>
                <p><strong>Company:</strong> Tech Solutions Inc.</p>
                <p><strong>Date:</strong> June 15, 2023 at 2:00 PM</p>
                <p><strong>Position:</strong> Senior Developer</p>
                <p><strong>Type:</strong> Technical + Behavioral</p>
            </div>
            <button class="btn-start">Start Preparation</button>
        </div>
        
        <div class="progress-section">
            <div class="progress-title">Your Preparation Progress</div>
            <div class="progress-bar">
                <div class="progress-fill"></div>
            </div>
            <div class="progress-text">You've completed 65% of your preparation checklist</div>
        </div>
        
        <h2 class="section-title"><i class="fas fa-th-large"></i> Preparation Categories</h2>
        <div class="prep-categories">
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <h4 class="prep-title">Common Questions</h4>
                <p class="prep-desc">Practice the most frequently asked interview questions in your field with our curated list and sample answers.</p>
                <a href="{{ path('job_seeker_interviews_common_questions') }}" class="prep-link">Start Practicing <i class="fas fa-arrow-right"></i></a>
            </div>
            
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-code"></i>
                </div>
                <h4 class="prep-title">Technical Challenges</h4>
                <p class="prep-desc">Solve coding problems and technical challenges specifically designed for developer roles.</p>
                <a href="{{ path('job_seeker_interviews_technical_challenges') }}" class="prep-link">View Challenges <i class="fas fa-arrow-right"></i></a>
            </div>
            
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-video"></i>
                </div>
                <h4 class="prep-title">Mock Interviews</h4>
                <p class="prep-desc">Record yourself answering questions and get feedback from our AI or human experts.</p>
                <a href="{{ path('job_seeker_interviews_mock_interview') }}" class="prep-link">Start Mock Interview <i class="fas fa-arrow-right"></i></a>
            </div>
            
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-building"></i>
                </div>
                <h4 class="prep-title">Company Research</h4>
                <p class="prep-desc">Learn about companies you're interviewing with, their culture, and recent news.</p>
                <a href="{{ path('job_seeker_interviews_company_research') }}" class="prep-link">Research Companies <i class="fas fa-arrow-right"></i></a>
            </div>
            
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-user-tie"></i>
                </div>
                <h4 class="prep-title">Behavioral Questions</h4>
                <p class="prep-desc">Prepare for behavioral and situational questions using the STAR method.</p>
                <a href="{{ path('job_seeker_interviews_behavioral_questions') }}" class="prep-link">Practice Now <i class="fas fa-arrow-right"></i></a>
            </div>
            
            <div class="prep-card">
                <div class="prep-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <h4 class="prep-title">Salary Negotiation</h4>
                <p class="prep-desc">Learn how to negotiate your salary and benefits package effectively.</p>
                <a href="{{ path('job_seeker_interviews_salary_negotiation') }}" class="prep-link">Learn Strategies <i class="fas fa-arrow-right"></i></a>
            </div>
        </div>
        
        <h2 class="section-title"><i class="fas fa-clock"></i> <a href="{{ path('job_seeker_interviews_recent_sessions') }}">Recent Practice Sessions</a></h2>
        <div class="recent-activities">
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-question-circle"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Practiced 15 common interview questions</div>
                    <div class="activity-date">Today, 10:30 AM | Score: 85%</div>
                </div>
            </div>
            
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-code"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Completed 3 technical challenges</div>
                    <div class="activity-date">Yesterday, 3:45 PM | Score: 78%</div>
                </div>
            </div>
            
            <div class="activity-item">
                <div class="activity-icon">
                    <i class="fas fa-video"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">Recorded mock interview session</div>
                    <div class="activity-date">Yesterday, 10:30 AM | Score: 72%</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.prep-card, .upcoming-interview, .activity-item, .progress-section'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.prep-card, .upcoming-interview, .activity-item, .progress-section'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = ${index * 0.1}s;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);

        // Animate progress bar
        const progressFill = document.querySelector('.progress-fill');
        if (progressFill) {
            setTimeout(() => {
                progressFill.style.width = '65%';
            }, 300);
        }

        // Check for new messages (example - you would replace this with real logic)
        function checkForNewMessages() {
            const hasNewMessages = Math.random() > 0.5;
            const messageBadge = document.querySelector('.nav-item:nth-child(5) .badge');
            
            if (hasNewMessages) {
                messageBadge.style.display = 'flex';
            } else {
                messageBadge.style.display = 'none';
            }
        }

        // Check for messages every 30 seconds
        setInterval(checkForNewMessages, 30000);
        checkForNewMessages(); // Initial check
    });
</script>
</body>
</html>
==================================================

Fichier: templates\job_seeker\interview_salary_negotiation.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_salary_negotiation.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Salary Negotiation | Interview Preparation{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.1rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content styles */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-secondary {
            display: inline-block;
            background: var(--light-color);
            color: var(--dark);
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: center;
            border: 1px solid var(--medium-gray);
        }

        .btn-secondary:hover {
            background: var(--medium-gray);
            color: var(--white);
        }

        /* Salary Negotiation specific styles */
        .negotiation-container {
            margin-top: 2rem;
        }

        .negotiation-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
        }

        .section-title i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .negotiation-steps {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .step-card {
            background: var(--light-color);
            border-radius: 10px;
            padding: 1.5rem;
            position: relative;
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .step-card:hover {
            transform: translateY(-5px);
        }

        .step-number {
            position: absolute;
            top: 0;
            right: 0;
            background: var(--primary-color);
            color: white;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            border-radius: 0 10px 0 10px;
        }

        .step-title {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            padding-right: 2.5rem;
        }

        .step-description {
            color: var(--dark);
            font-size: 0.95rem;
        }

        .tips-list {
            list-style: none;
            margin-top: 1.5rem;
        }

        .tips-list li {
            margin-bottom: 1rem;
            padding-left: 1.5rem;
            position: relative;
        }

        .tips-list li:before {
            content: '\f0da';
            font-family: 'Font Awesome 5 Free';
            font-weight: 900;
            position: absolute;
            left: 0;
            color: var(--primary-color);
        }

        .calculator-section {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .calculator-form {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--medium-gray);
            border-radius: 5px;
            font-family: 'Poppins', sans-serif;
        }

        .calculator-result {
            background: var(--light-color);
            padding: 1.5rem;
            border-radius: 10px;
            margin-top: 1.5rem;
            display: none;
        }

        .result-title {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .result-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 1rem;
        }

        .result-explanation {
            color: var(--medium-gray);
        }

        .btn-calculate {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }

        .btn-calculate:hover {
            background: var(--secondary-color);
        }

        .resources-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .resource-card {
            background: var(--light-color);
            border-radius: 10px;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            transition: transform 0.3s ease;
        }

        .resource-card:hover {
            transform: translateY(-5px);
        }

        .resource-icon {
            width: 50px;
            height: 50px;
            background: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
        }

        .resource-icon i {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .resource-title {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
        }

        .resource-description {
            color: var(--medium-gray);
            margin-bottom: 1rem;
            flex-grow: 1;
        }

        .btn-resource {
            display: inline-block;
            background: white;
            color: var(--dark);
            padding: 0.5rem 1rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: center;
            border: 1px solid var(--medium-gray);
        }

        .btn-resource:hover {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .negotiation-steps, .resources-list {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'job_seeker/_sidebar.html.twig' with {'active': 'interviews'} %}
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Salary Negotiation</h1>
            <p class="welcome-subtitle">Learn effective strategies to negotiate your compensation package and maximize your value</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <!-- Moved calculator section to top of page -->
        <div class="calculator-section">
            <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
            <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
            
            <div class="calculator-form">
                <div class="form-group">
                    <label for="position">Position</label>
                    <input type="text" id="position" placeholder="e.g., Software Developer">
                </div>
                
                <div class="form-group">
                    <label for="experience">Years of Experience</label>
                    <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                </div>
                
                <div class="form-group">
                    <label for="location">Location</label>
                    <input type="text" id="location" placeholder="e.g., New York">
                </div>
                
                <div class="form-group">
                    <label for="industry">Industry</label>
                    <input type="text" id="industry" placeholder="e.g., Technology">
                </div>
            </div>
            
            <!-- Added calculate button -->
            <button id="calculateButton" class="btn-calculate">
                <i class="fas fa-calculator"></i> Calculate Salary Range
            </button>
            
            <div class="calculator-result" id="calculatorResult">
                <h3 class="result-title">Estimated Salary Range</h3>
                <div class="result-value" id="salaryRange">$0 - $0</div>
                <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
            </div>
        </div>
        
        <div class="negotiation-container">
            <div class="negotiation-section" id="introduction">
                <h2 class="section-title"><i class="fas fa-info-circle"></i> Introduction to Salary Negotiation</h2>
                <p>Negotiating your salary is a critical part of the job search process. Research shows that failing to negotiate your starting salary can cost you up to $500,000 over the course of your career. This guide will help you prepare for salary discussions and maximize your compensation package.</p>
                
                <div class="negotiation-steps">
                    <div class="step-card">
                        <div class="step-number">1</div>
                        <h3 class="step-title">Research Market Rates</h3>
                        <p class="step-description">Before any negotiation, research salary ranges for your position, industry, and location using resources like Glassdoor, PayScale, and industry reports.</p>
                    </div>
                    
                    <div class="step-card">
                        <div class="step-number">2</div>
                        <h3 class="step-title">Know Your Value</h3>
                        <p class="step-description">Identify your unique skills, experiences, and achievements that make you valuable to the employer and justify your desired compensation.</p>
                    </div>
                    
                    <div class="step-card">
                        <div class="step-number">3</div>
                        <h3 class="step-title">Consider the Full Package</h3>
                        <p class="step-description">Look beyond base salary to benefits, bonuses, stock options, flexible work arrangements, and professional development opportunities.</p>
                    </div>
                    
                    <div class="step-card">
                        <div class="step-number">4</div>
                        <h3 class="step-title">Practice Your Pitch</h3>
                        <p class="step-description">Rehearse your negotiation conversation, including how you'll respond to pushback or difficult questions.</p>
                    </div>
                </div>
            </div>
            
            <div class="negotiation-section" id="tips">
                <h2 class="section-title"><i class="fas fa-lightbulb"></i> Key Negotiation Strategies</h2>
                
                <ul class="tips-list">
                    <li><strong>Let them make the first offer.</strong> If possible, avoid being the first to name a number. When asked about salary expectations, you can redirect by asking about their budget for the role.</li>
                    <li><strong>Use a salary range.</strong> When you do share your expectations, provide a range with your target salary at the lower end.</li>
                    <li><strong>Focus on value, not need.</strong> Base your negotiation on the value you bring to the company, not on your personal financial needs.</li>
                    <li><strong>Be collaborative, not adversarial.</strong> Frame the negotiation as finding a solution that works for both parties.</li>
                    <li><strong>Get it in writing.</strong> Once you've reached an agreement, request a written offer that includes all the details you've negotiated.</li>
                    <li><strong>Don't rush.</strong> It's acceptable to ask for time to consider an offer. Use this time to evaluate all aspects of the package.</li>
                    <li><strong>Practice silence.</strong> After stating your case, resist the urge to fill silence. Let the other party respond.</li>
                </ul>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">
                    <h3 class="result-title">Estimated Salary Range</h3>
                    <div class="result-value" id="salaryRange">$0 - $0</div>
                    <p class="result-explanation" id="resultExplanation">Complete the form and click calculate to see your estimated salary range.</p>
                </div>
            </div>
            
            <div class="calculator-section">
                <h2 class="section-title"><i class="fas fa-calculator"></i> Salary Calculator</h2>
                <p>Use this calculator to determine a target salary range based on your experience, skills, and market data.</p>
                
                <div class="calculator-form">
                    <div class="form-group">
                        <label for="position">Position</label>
                        <input type="text" id="position" placeholder="e.g., Software Developer">
                    </div>
                    
                    <div class="form-group">
                        <label for="experience">Years of Experience</label>
                        <input type="number" id="experience" min="0" max="50" placeholder="e.g., 5">
                    </div>
                    
                    <div class="form-group">
                        <label for="location">Location</label>
                        <input type="text" id="location" placeholder="e.g., New York">
                    </div>
                    
                    <div class="form-group">
                        <label for="industry">Industry</label>
                        <input type="text" id="industry" placeholder="e.g., Technology">
                    </div>
                </div>
                
                <div class="calculator-result" id="calculatorResult">

==================================================

Fichier: templates\job_seeker\interview_saved_questions.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_saved_questions.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}My Saved Questions{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.8rem;
            font-size: 1.2rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .page-header {
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--dark);
            position: relative;
            display: inline-block;
        }

        .page-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .page-subtitle {
            color: var(--medium-gray);
            font-size: 1.1rem;
            margin-top: 1rem;
        }

        /* Question cards */
        .question-card {
            background-color: var(--white);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border-left: 4px solid var(--accent-color);
            opacity: 0;
            transform: translateY(20px);
        }

        .question-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .question-category {
            display: inline-block;
            background-color: var(--accent-color);
            color: var(--white);
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }

        .question-text {
            font-size: 1.1rem;
            margin-bottom: 1.5rem;
            line-height: 1.6;
        }

        .card-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            padding: 0.6rem 1.2rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
        }

        .btn-outline-primary {
            background-color: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background-color: var(--primary-color);
            color: var(--white);
        }

        .btn-remove {
            background-color: var(--accent-color);
            color: var(--white);
        }

        .btn-remove:hover {
            background-color: var(--secondary-color);
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }

        .alert-info {
            background-color: rgba(13, 202, 240, 0.1);
            border-left: 4px solid #0dcaf0;
            color: #055160;
        }

        .alert a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 600;
        }

        .alert a:hover {
            text-decoration: underline;
        }

        .back-button {
            margin-bottom: 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            transition: var(--transition);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
        }

        @media (max-width: 768px) {
            .row {
                display: block;
            }
            
            .col-md-6 {
                width: 100%;
            }
        }

        @media (max-width: 576px) {
            .main-content {
                padding: 1rem;
            }
            
            .card-actions {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-start;
            }
            
            .btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="page-header">
            <h1 class="page-title">My Saved Questions</h1>
            <p class="page-subtitle">Here are the interview questions you've saved for practice.</p>
        </div>
        
        <div class="back-button">
            <a href="{{ path('job_seeker_interview_behavioral_questions') }}" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left"></i> Back to All Questions
            </a>
        </div>
        
        {% if questions is empty %}
            <div class="alert alert-info">
                <i class="fas fa-info-circle"></i> You haven't saved any questions yet. 
                <a href="{{ path('job_seeker_interview_behavioral_questions') }}">Browse questions</a> and save some to practice later.
            </div>
        {% else %}
            <div class="row">
                {% for question in questions %}
                    <div class="col-md-6 mb-4">
                        <div class="question-card">
                            <span class="question-category">{{ question.category }}</span>
                            <p class="question-text">{{ question.text }}</p>
                            <div class="card-actions">
                                <a href="{{ path('job_seeker_interview_practice_question', {'id': question.id}) }}" class="btn btn-primary">
                                    <i class="fas fa-microphone"></i> Practice
                                </a>
                                <button class="btn btn-remove" data-id="{{ question.id }}">
                                    <i class="fas fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.page-header, .back-button, .alert, .question-card'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.page-header, .back-button, .alert, .question-card'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = `${index * 0.1}s`;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);

        // Fonctionnalité pour supprimer les questions sauvegardées
        const removeButtons = document.querySelectorAll('.btn-remove');
        
        removeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionId = this.getAttribute('data-id');
                const card = this.closest('.col-md-6');
                
                if (confirm('Are you sure you want to remove this question from your saved list?')) {
                    // Appel AJAX pour désauvegarder la question
                    fetch(`/job-seeker/interviews/save-question/${questionId}`, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Animation de suppression
                            card.style.opacity = '0';
                            card.style.transform = 'translateY(-20px)';
                            
                            setTimeout(() => {
                                // Supprimer la carte de la question
                                card.remove();
                                
                                // Vérifier s'il reste des questions
                                const remainingCards = document.querySelectorAll('.question-card');
                                if (remainingCards.length === 0) {
                                    // Afficher un message s'il n'y a plus de questions
                                    const container = document.querySelector('.main-content');
                                    const rowElement = document.querySelector('.row');
                                    
                                    const alertElement = document.createElement('div');
                                    alertElement.className = 'alert alert-info';
                                    alertElement.innerHTML = `
                                        <i class="fas fa-info-circle"></i> You haven't saved any questions yet. 
                                        <a href="{{ path('job_seeker_interview_behavioral_questions') }}">Browse questions</a> and save some to practice later.
                                    `;
                                    
                                    // Animation pour le nouvel élément d'alerte
                                    alertElement.style.opacity = '0';
                                    alertElement.style.transform = 'translateY(20px)';
                                    
                                    container.replaceChild(alertElement, rowElement);
                                    
                                    setTimeout(() => {
                                        alertElement.style.opacity = '1';
                                        alertElement.style.transform = 'translateY(0)';
                                        alertElement.style.transition = 'all 0.5s ease';
                                    }, 100);
                                }
                                
                                // Afficher un message de confirmation
                                const toast = document.createElement('div');
                                toast.className = 'toast-notification';
                                toast.innerHTML = data.message;
                                document.body.appendChild(toast);
                                
                                setTimeout(() => {
                                    toast.style.opacity = '1';
                                    toast.style.transform = 'translateY(0)';
                                }, 100);
                                
                                setTimeout(() => {
                                    toast.style.opacity = '0';
                                    toast.style.transform = 'translateY(-20px)';
                                    
                                    setTimeout(() => {
                                        toast.remove();
                                    }, 500);
                                }, 3000);
                            }, 500);
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while removing the question');
                    });
                }
            });
        });
    });
</script>
</body>
</html>
==================================================

Fichier: templates\job_seeker\interview_self_recording.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_self_recording.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Self Recording Session | Interview Preparation</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar styles */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
            z-index: 1;
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: -1;
        }

        .profile-section {
            position: relative;
            text-align: center;
            margin-bottom: 2rem;
            z-index: 1;
        }

        .profile-img {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: white;
            font-size: 1.2rem;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            color: white;
            text-decoration: none;
            transition: var(--transition);
            font-weight: 500;
        }

        .nav-item i {
            margin-right: 0.75rem;
            width: 20px;
            text-align: center;
        }

        .nav-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        /* Recording specific styles */
        .recording-container {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        .video-container {
            width: 100%;
            height: 400px;
            background: #000;
            border-radius: 10px;
            overflow: hidden;
            margin-bottom: 1.5rem;
        }
        
        #videoPreview {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        .timer {
            font-size: 1.5rem;
            font-weight: 600;
            background: rgba(0, 0, 0, 0.05);
            padding: 0.5rem 1rem;
            border-radius: 5px;
        }

        .question-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .welcome-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .welcome-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
        }

        .btn-secondary {
            background: var(--light-color);
            color: var(--dark);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
        }

        .btn-record {
            background: var(--accent-color);
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .btn-record.recording {
            background: #dc3545;
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .main-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}?v={{ random() }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_home' %}active{% endif %}">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_profile_index' %}active{% endif %}">
                <i class="fas fa-user"></i> Mon Profil
            </a>
            <a href="{{ path('job_seeker_profile_edit') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_profile_edit' %}active{% endif %}">
                <i class="fas fa-user-edit"></i> Modifier Profil
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item {% if app.request.get('_route') starts with 'job_seeker_jobs' %}active{% endif %}">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            <a href="{{ path('job_seeker_applications_index') }}" class="nav-item {% if app.request.get('_route') starts with 'job_seeker_applications' %}active{% endif %}">
                <i class="fas fa-file-alt"></i> Mes Candidatures
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item {% if app.request.get('_route') starts with 'job_seeker_interviews' %}active{% endif %}">
                <i class="fas fa-comments"></i> Préparation Entretiens
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item {% if app.request.get('_route') starts with 'conversation' %}active{% endif %}">
                <i class="fas fa-envelope"></i> Messagerie
            </a>
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Self Recording Session</h1>
            <p class="welcome-subtitle">Record yourself answering interview questions at your own pace</p>
            <a href="{{ path('job_seeker_interviews_mock_interview') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Mock Interviews</a>
        </div>
        
        <div class="recording-container">
            <h2>Practice Question</h2>
            <div class="question-card">
                <p id="currentQuestion">Tell me about yourself and your experience.</p>
                <button id="nextQuestion" class="btn-secondary">Next Question <i class="fas fa-arrow-right"></i></button>
            </div>
            
            <div class="video-container">
                <video id="videoPreview" autoplay muted></video>
            </div>
            
            <div class="controls">
                <div class="timer" id="timer">00:00</div>
                <button id="recordButton" class="btn-record">
                    <i class="fas fa-video"></i> Start Recording
                </button>
                <button id="finishButton" class="btn-primary" style="display: none;">
                    <i class="fas fa-check"></i> Finish Session
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.welcome-card, .recording-container, .question-card, .controls'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 100); // Force immediate animation
            });
        };

        // Call animation immediately
        animateElements();
        
        // Sample questions
        const questions = [
            "Tell me about yourself and your experience.",
            "What are your greatest strengths?",
            "What do you consider to be your weaknesses?",
            "Why are you interested in working for our company?",
            "Where do you see yourself in 5 years?",
            "Describe a difficult work situation and how you overcame it.",
            "Why should we hire you?",
            "What is your salary expectation?",
            "Do you have any questions for us?"
        ];
        
        let currentQuestionIndex = 0;
        let mediaRecorder;
        let recordedChunks = [];
        let isRecording = false;
        let timerInterval;
        let seconds = 0;
        let stream;
        
        const videoPreview = document.getElementById('videoPreview');
        const recordButton = document.getElementById('recordButton');
        const timer = document.getElementById('timer');
        const nextQuestionBtn = document.getElementById('nextQuestion');
        const currentQuestionElement = document.getElementById('currentQuestion');
        const finishButton = document.getElementById('finishButton');
        
        // Setup camera
        async function setupCamera() {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                videoPreview.srcObject = stream;
            } catch (error) {
                console.error('Error accessing camera:', error);
                alert('Please allow camera and microphone access to continue with the recording session.');
            }
        }
        
        // Start setup
        setupCamera();
        
        // Record button
        recordButton.addEventListener('click', function() {
            if (!isRecording) {
                // Start recording
                startRecording();
            } else {
                // Stop recording
                stopRecording();
            }
        });
        
        // Next question button
        nextQuestionBtn.addEventListener('click', function() {
            currentQuestionIndex = (currentQuestionIndex + 1) % questions.length;
            currentQuestionElement.textContent = questions[currentQuestionIndex];
        });
        
        // Finish button
        finishButton.addEventListener('click', function() {
            if (isRecording) {
                stopRecording();
            }
            alert('Session completed! You can review your recordings.');
            // Here you would typically redirect to a review page
        });
        
        function startRecording() {
            if (!stream) {
                alert('Camera access is required for recording.');
                return;
            }
            
            mediaRecorder = new MediaRecorder(stream);
            recordedChunks = [];
            
            mediaRecorder.ondataavailable = function(e) {
                if (e.data.size > 0) {
                    recordedChunks.push(e.data);
                }
            };
            
            mediaRecorder.onstop = function() {
                // Create video blob
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                const url = URL.createObjectURL(blob);
                
                // Here you could save the recording or provide download
                console.log('Recording finished, video URL:', url);
                
                // Show finish button after first recording
                finishButton.style.display = 'block';
            };
            
            // Start recording
            mediaRecorder.start();
            isRecording = true;
            
            // Update UI
            recordButton.innerHTML = '<i class="fas fa-stop"></i> Stop Recording';
            recordButton.classList.add('recording');
            
            // Start timer
            seconds = 0;
            timer.textContent = '00:00';
            timerInterval = setInterval(() => {
                seconds++;
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                timer.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
            }, 1000);
        }
        
        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                // Stop recording
                mediaRecorder.stop();
                isRecording = false;
                
                // Update UI
                recordButton.innerHTML = '<i class="fas fa-video"></i> Start Recording';
                recordButton.classList.remove('recording');
                
                // Stop timer
                clearInterval(timerInterval);
            }
        }
    });
</script>
</body>
</html>





==================================================

Fichier: templates\job_seeker\interview_technical_challenges.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\interview_technical_challenges.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Technical Challenges | Interview Preparation{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: white;
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            color: white;
            text-decoration: none;
            padding: 0.8rem 1rem;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item:hover, .nav-item.active {
            background: rgba(255, 255, 255, 0.1);
        }

        .nav-item i {
            margin-right: 0.8rem;
            font-size: 1.2rem;
        }

        .badge {
            background-color: var(--white);
            color: var(--primary-color);
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: bold;
            margin-left: auto;
        }

        /* Main content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .welcome-card {
            background: white;
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow);
            position: relative;
            overflow: hidden;
        }

        .welcome-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 150px;
            height: 150px;
            background: radial-gradient(circle, var(--accent-color) 0%, transparent 70%);
            opacity: 0.2;
            border-radius: 50%;
            transform: translate(30%, -30%);
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            margin-bottom: 1rem;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
            max-width: 80%;
        }

        .btn-primary {
            display: inline-flex;
            align-items: center;
            padding: 0.8rem 1.5rem;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.2);
        }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(214, 40, 40, 0.3);
        }

        .btn-secondary {
            display: inline-flex;
            align-items: center;
            padding: 0.6rem 1.2rem;
            background: var(--light-color);
            color: var(--dark);
            border: none;
            border-radius: 8px;
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }

        .btn-secondary:hover {
            background: #e0e0e0;
            transform: translateY(-3px);
        }

        .btn-secondary i {
            margin-right: 0.5rem;
        }

        /* Challenges specific styles */
        .challenges-container {
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }

        .challenges-filter, .difficulty-filter {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .filter-btn, .difficulty-btn {
            padding: 0.5rem 1rem;
            background: var(--light-color);
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }
        
        .filter-btn.active {
            background: var(--primary-color);
            color: white;
        }
        
        .difficulty-btn {
            font-size: 0.8rem;
            padding: 0.3rem 0.8rem;
        }
        
        .difficulty-btn.active[data-difficulty="easy"] {
            background: #28a745;
            color: white;
        }
        
        .difficulty-btn.active[data-difficulty="medium"] {
            background: #ffc107;
            color: white;
        }
        
        .difficulty-btn.active[data-difficulty="hard"] {
            background: #dc3545;
            color: white;
        }
        
        .challenges-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }
        
        .challenge-card {
            background: white;
            border-radius: 15px;
            padding: 1.8rem;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
            transition: all 0.4s ease;
            opacity: 0;
            transform: translateY(20px);
            border-left: 5px solid transparent;
            position: relative;
            overflow: hidden;
        }

        .challenge-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: radial-gradient(circle, var(--light-color) 0%, transparent 70%);
            opacity: 0.5;
            border-radius: 50%;
            transform: translate(30%, -30%);
        }
        
        .challenge-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            border-left: 5px solid var(--primary-color);
        }
        
        .challenge-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .challenge-title {
            font-size: 1.2rem;
            font-weight: 600;
        }
        
        .challenge-difficulty {
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.7rem;
            font-weight: 600;
        }
        
        .challenge-difficulty.easy {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        
        .challenge-difficulty.medium {
            background: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }
        
        .challenge-difficulty.hard {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }
        
        .challenge-description {
            margin-bottom: 1.5rem;
            color: var(--medium-gray);
        }
        
        .challenge-meta {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            font-size: 0.8rem;
            color: var(--medium-gray);
        }
        
        .challenge-meta i {
            margin-right: 0.3rem;
        }
        
        .challenge-actions {
            display: flex;
            gap: 1rem;
        }
        
        .btn-solve, .btn-save {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
        }
        
        .btn-solve {
            background: var(--primary-color);
            color: white;
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.2);
        }
        
        .btn-save {
            background: var(--light-color);
            color: var(--dark);
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
        }
        
        .btn-solve:hover {
            background: var(--secondary-color);
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(214, 40, 40, 0.3);
        }
        
        .btn-save:hover {
            background: #e0e0e0;
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
        }
        
        .no-challenges {
            text-align: center;
            padding: 3rem;
            background: white;
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .challenges-filter {
                overflow-x: auto;
                padding-bottom: 1rem;
                justify-content: flex-start;
                width: 100%;
            }
        }

        @media (max-width: 576px) {
            .challenge-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.8rem;
            }
            
            .challenge-actions {
                flex-direction: column;
                width: 100%;
            }
            
            .btn-solve, .btn-save {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user"></i> My Profile
            </a>
            
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Find Jobs
            </a>
            
            <a href="{{ path('job_seeker_applications_index') }}" class="nav-item">
                <i class="fas fa-heart"></i> My Applications
            </a>
            
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interview Prep
            </a>
            
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content - Style inspiré du register-panel -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Technical Challenges</h1>
            <p class="welcome-subtitle">Solve coding problems and technical challenges to prepare for technical interviews</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <div class="challenges-container">
            <div class="challenges-filter">
                <button class="filter-btn active" data-filter="all">All Challenges</button>
                <button class="filter-btn" data-filter="algorithms">Algorithms</button>
                <button class="filter-btn" data-filter="data-structures">Data Structures</button>
                <button class="filter-btn" data-filter="system-design">System Design</button>
                <button class="filter-btn" data-filter="database">Database</button>
            </div>
            
            <div class="difficulty-filter">
                <span>Difficulty:</span>
                <button class="difficulty-btn" data-difficulty="easy">Easy</button>
                <button class="difficulty-btn active" data-difficulty="medium">Medium</button>
                <button class="difficulty-btn" data-difficulty="hard">Hard</button>
            </div>
            
            <div class="challenges-list">
                {% if challenges|length > 0 %}
                    {% for challenge in challenges %}
                        <div class="challenge-card" data-category="{{ challenge.category }}" data-difficulty="{{ challenge.difficulty }}">
                            <div class="challenge-header">
                                <h3 class="challenge-title">{{ challenge.title }}</h3>
                                <div class="challenge-difficulty {{ challenge.difficulty }}">
                                    {{ challenge.difficulty|capitalize }}
                                </div>
                            </div>
                            
                            <div class="challenge-description">
                                <p>{{ challenge.description }}</p>
                            </div>
                            
                            <div class="challenge-meta">
                                <span class="challenge-time"><i class="fas fa-clock"></i> {{ challenge.estimatedTime }} min</span>
                                <span class="challenge-success-rate"><i class="fas fa-chart-line"></i> {{ challenge.successRate }}% success rate</span>
                            </div>
                            
                            <div class="challenge-actions">
                                <a href="{{ path('job_seeker_interviews_challenge_solve', {'id': challenge.id}) }}" class="btn-solve">Solve Challenge</a>
                                <button class="btn-save">Save for Later</button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="no-challenges">
                        <p>No technical challenges available at the moment. Please check back later.</p>
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            // Animate challenges container
            const challengesContainer = document.querySelector('.challenges-container');
            challengesContainer.style.opacity = '1';
            challengesContainer.style.transform = 'translateY(0)';
            
            // Animate challenge cards with sequential delay
            const challengeCards = document.querySelectorAll('.challenge-card');
            challengeCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, index * 100);
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll('.challenge-card');
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Trigger animations
        setTimeout(animateElements, 300);

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const difficultyButtons = document.querySelectorAll('.difficulty-btn');
        const challengeCards = document.querySelectorAll('.challenge-card');
        
        // Filter by category
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                // Add active class to clicked button
                this.classList.add('active');
                
                const filter = this.getAttribute('data-filter');
                
                // Show/hide cards based on filter
                challengeCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
                
                // Re-animate visible cards
                setTimeout(() => {
                    const visibleCards = document.querySelectorAll('.challenge-card[style="display: block"]');
                    visibleCards.forEach((card, index) => {
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, index * 100);
                    });
                }, 100);
            });
        });
        
        // Filter by difficulty
        difficultyButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Toggle active class
                this.classList.toggle('active');
                
                // Get all active difficulties
                const activeDifficulties = [];
                difficultyButtons.forEach(btn => {
                    if (btn.classList.contains('active')) {
                        activeDifficulties.push(btn.getAttribute('data-difficulty'));
                    }
                });
                
                // If no difficulties are selected, show all
                if (activeDifficulties.length === 0) {
                    challengeCards.forEach(card => {
                        card.style.display = 'block';
                    });
                } else {
                    // Show/hide cards based on difficulty
                    challengeCards.forEach(card => {
                        if (activeDifficulties.includes(card.getAttribute('data-difficulty'))) {
                            card.style.display = 'block';
                        } else {
                            card.style.display = 'none';
                        }
                    });
                }
                
                // Re-animate visible cards
                setTimeout(() => {
                    const visibleCards = document.querySelectorAll('.challenge-card[style="display: block"]');
                    visibleCards.forEach((card, index) => {
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, index * 100);
                    });
                }, 100);
            });
        });
        
        // Save for later functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const card = this.closest('.challenge-card');
                const challengeTitle = card.querySelector('.challenge-title').textContent;
                
                // Toggle saved state
                if (this.classList.contains('saved')) {
                    this.classList.remove('saved');
                    this.textContent = 'Save for Later';
                    this.style.background = 'var(--light-color)';
                    this.style.color = 'var(--dark)';
                    
                    // Show notification
                    alert(`${challengeTitle} removed from saved challenges`);
                } else {
                    this.classList.add('saved');
                    this.textContent = 'Saved';
                    this.style.background = '#28a745';
                    this.style.color = 'white';
                    
                    // Show notification
                    alert(`${challengeTitle} saved for later`);
                }
            });
        });
    });
</script>
</body>
</html>



==================================================

Fichier: templates\job_seeker\jobs.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\jobs.html.twig
-----
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        <!-- Reste du contenu inchangé -->
    </div>
    <!-- Reste du contenu inchangé -->
</div>
==================================================

Fichier: templates\job_seeker\job_details.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\job_details.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}{{ publication.title }}{% endblock %}

{% block body %}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .job-details-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .jobs-sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .jobs-sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item.chatbot-item {
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1.5rem;
            border-left: 3px solid var(--white);
        }

        .nav-item.chatbot-item i {
            color: #ffcc00;
        }

        /* Job Details Content */
        .job-details-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .job-header {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .job-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .job-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .company-info {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .company-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark);
        }

        .job-location {
            display: flex;
            align-items: center;
            color: var(--medium-gray);
            font-size: 0.95rem;
        }

        .job-location i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .job-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin-top: 1rem;
        }

        .job-meta-item {
            display: flex;
            align-items: center;
            background-color: rgba(214, 40, 40, 0.1);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            color: var(--primary-color);
        }

        .job-meta-item i {
            margin-right: 0.5rem;
        }

        .job-content {
            background: var(--white);
            border-radius: 12px;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            line-height: 1.8;
        }

        .job-content h2 {
            font-size: 1.5rem;
            font-weight: 600;
            margin: 1.5rem 0 1rem;
            color: var(--dark);
        }

        .job-content h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 1.2rem 0 0.8rem;
            color: var(--dark);
        }

        .job-content p {
            margin-bottom: 1rem;
        }

        .job-content ul, .job-content ol {
            margin-left: 1.5rem;
            margin-bottom: 1rem;
        }

        .job-content li {
            margin-bottom: 0.5rem;
        }

        .job-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2rem;
        }

        .btn-back {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.5rem;
            background-color: var(--light-color);
            color: var(--dark);
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            transition: var(--transition);
        }

        .btn-back i {
            margin-right: 0.5rem;
        }

        .btn-back:hover {
            background-color: #e0e0e0;
            transform: translateX(-5px);
        }

        .btn-apply {
            display: flex;
            align-items: center;
            padding: 0.8rem 1.5rem;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border-radius: 8px;
            text-decoration: none;
            font-weight: 600;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-apply i {
            margin-right: 0.5rem;
        }

        .btn-apply:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .job-details-container {
                flex-direction: column;
            }
            
            .jobs-sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .job-details-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .job-header {
                padding: 1.5rem;
            }
            
            .job-actions {
                flex-direction: column;
                gap: 1rem;
            }
            
            .btn-back, .btn-apply {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="job-details-container">
    <!-- Sidebar -->
    <div class="jobs-sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Tableau de bord
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-user-edit"></i> Mon profil
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-file-alt"></i> Mon CV
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item active">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            <a href="{{ path('job_seeker_applications') }}" class="nav-item">
                <i class="fas fa-paper-plane"></i> Mes candidatures
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
            </a>
            
            <!-- Bouton Chatbot dans la navigation -->
            <a href="{{ path('chatbot') }}" class="nav-item chatbot-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Déconnexion
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="job-details-content">
        <div class="job-header">
            <h1 class="job-title">{{ publication.title }}</h1>
            <div class="company-info">
                <span class="company-name">{{ publication.user.companyName ?? publication.user.username }}</span>
                <span class="job-location">
                    <i class="fas fa-map-marker-alt"></i> 
                    {{ publication.user.location ?? 'Non spécifié' }}
                </span>
            </div>
            
            <div class="job-meta">
                <div class="job-meta-item">
                    <i class="fas fa-briefcase"></i> 
                    {% if publication.category == 'job_offer' %}
                        Offre d'emploi
                    {% elseif publication.category == 'internship' %}
                        Stage
                    {% elseif publication.category == 'news' %}
                        Actualité
                    {% elseif publication.category == 'event' %}
                        Événement
                    {% endif %}
                </div>
                <div class="job-meta-item">
                    <i class="far fa-calendar-alt"></i> 
                    Publié le {{ publication.createdAt|date('d/m/Y') }}
                </div>
            </div>
        </div>
        
        <div class="job-content">
            {{ publication.content|raw }}
        </div>
        
        <div class="job-actions">
            <a href="{{ path('job_seeker_jobs_index') }}" class="btn-back">
                <i class="fas fa-arrow-left"></i> Retour aux offres
            </a>
            
            {% if publication.category in ['job_offer', 'internship'] %}
                <a href="{{ path('job_seeker_jobs_apply', {'id': publication.id}) }}" class="btn-apply">
                    <i class="fas fa-paper-plane"></i> Postuler
                </a>
            {% endif %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.job-header, .job-content, .job-actions'
            );
            
            elements.forEach((element, index) => {
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, index * 200);
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.job-header, .job-content, .job-actions'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
    });
</script>
</body>
</html>
{% endblock %}




==================================================

Fichier: templates\job_seeker\job_search.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\job_search.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Recherche d'emploi{% endblock %}

{% block body %}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item.chatbot-item {
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1.5rem;
            border-left: 3px solid var(--white);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        /* Job Search Specific Styles */
        .search-header {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .search-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .search-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .search-form {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .search-input {
            flex: 1;
            padding: 0.8rem 1.2rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
        }

        .search-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .search-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        .search-results {
            font-size: 0.9rem;
            color: var(--medium-gray);
        }

        .filter-section {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .filter-group {
            flex: 1;
            min-width: 200px;
        }

        .filter-title {
            font-weight: 600;
            margin-bottom: 0.8rem;
            color: var(--dark);
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 2rem;
        }

        .filter-option {
            padding: 0.8rem 1.5rem;
            background-color: #f5f5f5;
            border-radius: 30px;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            color: #333;
            font-weight: 500;
            border: none;
        }

        .filter-option:hover {
            background-color: #e0e0e0;
        }

        .filter-option.active {
            background-color: #dc3545;
            color: white;
        }

        .job-list {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .job-card {
            background-color: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border: 1px solid rgba(0, 0, 0, 0.05);
            opacity: 0;
            transform: translateY(20px);
        }

        .job-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .job-header {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #f0f0f0;
        }

        .job-company {
            display: flex;
            align-items: center;
        }

        .company-logo {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            margin-right: 1rem;
            border: 1px solid #eee;
        }

        .company-info h3 {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.3rem;
            color: var(--dark);
        }

        .company-info p {
            font-size: 0.9rem;
            color: var(--medium-gray);
        }

        .job-status {
            padding: 0.4rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .job-status.pending {
            background-color: #fff8e1;
            color: #ffa000;
        }

        .job-status.rejected {
            background-color: #ffebee;
            color: #d32f2f;
        }

        .job-status.not-applied {
            background-color: #e8f5e9;
            color: #388e3c;
        }

        .job-content {
            padding: 1.5rem;
        }

        .job-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .job-meta-item {
            display: flex;
            align-items: center;
            font-size: 0.9rem;
            color: var(--medium-gray);
        }

        .job-meta-item i {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }

        .job-description {
            font-size: 0.95rem;
            line-height: 1.6;
            color: var(--dark);
            margin-bottom: 1rem;
        }

        .job-footer {
            padding: 1rem 1.5rem;
            background-color: #f9f9f9;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .job-date {
            font-size: 0.85rem;
            color: var(--medium-gray);
        }

        .job-actions {
            display: flex;
            gap: 0.8rem;
        }

        .btn-save {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: white;
            border: 1px solid #eee;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            color: var(--medium-gray);
        }

        .btn-save:hover, .btn-save.saved {
            background-color: #ffebee;
            color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .btn-view, .btn-apply {
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-size: 0.9rem;
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            display: flex;
            align-items: center;
        }

        .btn-view i, .btn-apply i {
            margin-right: 0.5rem;
        }

        .btn-view {
            background-color: #f0f0f0;
            color: var(--dark);
        }

        .btn-view:hover {
            background-color: #e0e0e0;
        }

        .btn-apply {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-apply:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        .no-results {
            text-align: center;
            padding: 3rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }

        .no-results-icon {
            font-size: 3rem;
            color: var(--medium-gray);
            margin-bottom: 1rem;
        }

        .no-results h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--dark);
        }

        .no-results p {
            color: var(--medium-gray);
            max-width: 500px;
            margin: 0 auto;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .search-form {
                flex-direction: column;
            }
            
            .job-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .job-status {
                margin-top: 1rem;
                align-self: flex-start;
            }
            
            .job-footer {
                flex-direction: column;
                gap: 1rem;
            }
            
            .job-actions {
                width: 100%;
                justify-content: space-between;
            }
        }

        /* Styles pour la recherche avancée */
        .advanced-search-container {
            margin-bottom: 2rem;
        }
        
        .btn-toggle-advanced {
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            padding: 0.6rem 1.2rem;
            border-radius: 8px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .btn-toggle-advanced:hover {
            background-color: #e0e0e0;
        }
        
        .advanced-search-form {
            background-color: #f9f9f9;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            animation: slideDown 0.3s ease;
        }
        
        @keyframes slideDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .advanced-form {
            display: flex;
            flex-direction: column;
            gap: 1.2rem;
        }
        
        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 1.2rem;
        }
        
        .form-group {
            flex: 1;
            min-width: 200px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 0.95rem;
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .btn-reset {
            background-color: #f0f0f0;
            color: var(--dark);
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            text-decoration: none;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .btn-reset:hover {
            background-color: #e0e0e0;
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item active">
                <i class="fas fa-briefcase"></i> Offres d'emploi
            </a>
            
            <!-- Bouton Chatbot dans la navigation -->
            <a href="{{ path('chatbot') }}" class="nav-item chatbot-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="search-header">
            <h1 class="search-title">Recherche d'emploi</h1>
            
            <form action="{{ path('job_seeker_jobs_index') }}" method="get" class="search-form">
                <input type="text" name="search" class="search-input" placeholder="Rechercher par titre de publication..." value="{{ searchCriteria.keywords|default('') }}">
                <button type="submit" class="search-btn"><i class="fas fa-search"></i> Rechercher</button>
            </form>
            
            <div class="search-results">{{ publications|length }} offres trouvées</div>
        </div>

        <div class="advanced-search-container">
            <button id="toggleAdvancedSearch" class="btn-toggle-advanced">
                <i class="fas fa-sliders-h"></i> Recherche avancée
            </button>
            
            <div id="advancedSearchForm" class="advanced-search-form" style="display: none;">
                {{ form_start(form, {'attr': {'class': 'advanced-form'}}) }}
                    <div class="form-row">
                        <div class="form-group">
                            {{ form_label(form.keywords) }}
                            {{ form_widget(form.keywords) }}
                        </div>
                        
                        <div class="form-group">
                            {{ form_label(form.address) }}
                            {{ form_widget(form.address) }}
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            {{ form_label(form.industry) }}
                            {{ form_widget(form.industry) }}
                        </div>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            {{ form_label(form.dateFrom) }}
                            {{ form_widget(form.dateFrom) }}
                        </div>
                        
                        <div class="form-group">
                            {{ form_label(form.dateTo) }}
                            {{ form_widget(form.dateTo) }}
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="btn-apply">
                            <i class="fas fa-search"></i> Rechercher
                        </button>
                        <a href="{{ path('job_seeker_jobs_index') }}" class="btn-reset">
                            <i class="fas fa-times"></i> Réinitialiser
                        </a>
                    </div>
                {{ form_end(form) }}
            </div>
        </div>

        <div class="filter-section">
            <div class="filter-group">
                <div class="filter-title">Type d'offre</div>
                <div class="filter-options">
                    <a href="{{ path('job_seeker_jobs_index', {'search': searchCriteria.keywords|default(''), 'industry': searchCriteria.industry|default(''), 'address': searchCriteria.address|default(''), 'dateFrom': searchCriteria.dateFrom|default(''), 'dateTo': searchCriteria.dateTo|default('')}) }}" class="filter-option {{ searchCriteria.category is not defined or searchCriteria.category == 'all' ? 'active' : '' }}">Tous</a>
                    <a href="{{ path('job_seeker_jobs_index', {'category': 'job_offer', 'search': searchCriteria.keywords|default(''), 'industry': searchCriteria.industry|default(''), 'address': searchCriteria.address|default(''), 'dateFrom': searchCriteria.dateFrom|default(''), 'dateTo': searchCriteria.dateTo|default('')}) }}" class="filter-option {{ searchCriteria.category == 'job_offer' ? 'active' : '' }}">Emploi</a>
                    <a href="{{ path('job_seeker_jobs_index', {'category': 'internship', 'search': searchCriteria.keywords|default(''), 'industry': searchCriteria.industry|default(''), 'address': searchCriteria.address|default(''), 'dateFrom': searchCriteria.dateFrom|default(''), 'dateTo': searchCriteria.dateTo|default('')}) }}" class="filter-option {{ searchCriteria.category == 'internship' ? 'active' : '' }}">Stage</a>
                    <a href="{{ path('job_seeker_jobs_index', {'category': 'news', 'search': searchCriteria.keywords|default(''), 'industry': searchCriteria.industry|default(''), 'address': searchCriteria.address|default(''), 'dateFrom': searchCriteria.dateFrom|default(''), 'dateTo': searchCriteria.dateTo|default('')}) }}" class="filter-option {{ searchCriteria.category == 'news' ? 'active' : '' }}">Actualité</a>
                    <a href="{{ path('job_seeker_jobs_index', {'category': 'event', 'search': searchCriteria.keywords|default(''), 'industry': searchCriteria.industry|default(''), 'address': searchCriteria.address|default(''), 'dateFrom': searchCriteria.dateFrom|default(''), 'dateTo': searchCriteria.dateTo|default('')}) }}" class="filter-option {{ searchCriteria.category == 'event' ? 'active' : '' }}">Événement</a>
                </div>
            </div>
        </div>
        
        <div class="job-list">
            {% if publications|length > 0 %}
                {% for publication in publications %}
                    {% if publication.isPublished %}
                        <div class="job-card" data-category="{{ publication.category }}">
                            <div class="job-header">
                                <div class="job-company">
                                    {% if publication.user.profileImage %}
                                        <img src="{{ asset(publication.user.profileImage) }}" alt="{{ publication.user.companyName }}" class="company-logo">
                                    {% else %}
                                        <img src="{{ asset('img/fxchat.png') }}" alt="{{ publication.user.companyName }}" class="company-logo">
                                    {% endif %}
                                    <div class="company-info">
                                        <h3>{{ publication.title }}</h3>
                                        <p>{{ publication.user.companyName ?? publication.user.username }}</p>
                                    </div>
                                </div>
                                
                                {% if app.user %}
                                    {% set hasApplied = false %}
                                    {% set applicationStatus = null %}
                                    
                                    {% if publication is not null and publication.id is defined %}
                                        {% if applicationsByPublication[publication.id] is defined %}
                                            {% for application in applicationsByPublication[publication.id] %}
                                                {% if application.user is not null and app.user is not null and application.user.id == app.user.id %}
                                                    {% set hasApplied = true %}
                                                    {% set applicationStatus = application.status %}
                                                {% endif %}
                                            {% endfor %}
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                                
                                {% if hasApplied %}
                                    {% if applicationStatus == 'pending' %}
                                        <span class="job-status pending">En attente</span>
                                    {% elseif applicationStatus == 'accepted' %}
                                        <span class="job-status">Acceptée</span>
                                    {% elseif applicationStatus == 'rejected' %}
                                        <span class="job-status rejected">Refusée</span>
                                    {% endif %}
                                {% else %}
                                    <span class="job-status not-applied">Non postulée</span>
                                {% endif %}
                            </div>
                            
                            <div class="job-content">
                                <div class="job-meta">
                                    <div class="job-meta-item">
                                        <i class="fas fa-map-marker-alt"></i> 
                                        {{ publication.user.location ?? 'Non spécifié' }}
                                    </div>
                                    <div class="job-meta-item">
                                        <i class="fas fa-briefcase"></i> 
                                        {% if publication.category == 'job_offer' %}
                                            Offre d'emploi
                                        {% elseif publication.category == 'internship' %}
                                            Stage
                                        {% elseif publication.category == 'news' %}
                                            Actualité
                                        {% elseif publication.category == 'event' %}
                                            Événement
                                        {% endif %}
                                    </div>
                                    <div class="job-meta-item">
                                        <i class="far fa-calendar-alt"></i> 
                                        Publié le {{ publication.createdAt|date('d/m/Y') }}
                                    </div>
                                </div>
                                
                                <div class="job-description">
                                    {{ publication.content|striptags|slice(0, 200) }}{% if publication.content|length > 200 %}...{% endif %}
                                </div>
                            </div>
                            
                            <div class="job-footer">
                                <div class="job-date">
                                    <i class="far fa-clock"></i> 
                                    {% if publication.updatedAt %}
                                        Mis à jour le {{ publication.updatedAt|date('d/m/Y') }}
                                    {% else %}
                                        Publié le {{ publication.createdAt|date('d/m/Y') }}
                                    {% endif %}
                                </div>
                                
                                <div class="job-actions">
                                    {% if app.user.savedJobs is defined %}
                                        {% set isSaved = false %}
                                        {% for savedJob in app.user.savedJobs %}
                                            {% if savedJob.publication.id == publication.id %}
                                                {% set isSaved = true %}
                                            {% endif %}
                                        {% endfor %}
                                        
                                        <button class="btn-save {{ isSaved ? 'saved' : '' }}" data-id="{{ publication.id }}">
                                            <i class="{{ isSaved ? 'fas' : 'far' }} fa-heart"></i>
                                        </button>
                                    {% else %}
                                        <button class="btn-save" data-id="{{ publication.id }}">
                                            <i class="far fa-heart"></i>
                                        </button>
                                    {% endif %}
                                    
                                    <a href="{{ path('job_seeker_job_details', {'id': publication.id}) }}" class="btn-view">
                                        <i class="fas fa-eye"></i> Voir détails
                                    </a>
                                    
                                    {% if publication.category in ['job_offer', 'internship'] %}
                                        <a href="{{ path('job_seeker_jobs_apply', {'id': publication.id}) }}" class="btn-apply">
                                            <i class="fas fa-paper-plane"></i> Postuler
                                        </a>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                    {% endif %}
                {% endfor %}
            {% else %}
                <div class="no-results">
                    <div class="no-results-icon">
                        <i class="fas fa-search"></i>
                    </div>
                    <h3>Aucune offre trouvée</h3>
                    <p>Aucune publication n'est disponible pour le moment. Veuillez réessayer ultérieurement ou modifier vos critères de recherche.</p>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des cartes d'emploi
        const jobCards = document.querySelectorAll('.job-card');
        
        jobCards.forEach((card, index) => {
            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
        
        // Sauvegarder une offre
        const saveButtons = document.querySelectorAll('.btn-save');
        
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const jobId = this.getAttribute('data-id');
                
                // Toggle saved state
                this.classList.toggle('saved');
                
                if (this.classList.contains('saved')) {
                    this.querySelector('i').classList.replace('far', 'fas');
                    
                    // AJAX call to save job
                    fetch('/job-seeker/jobs/save/' + jobId, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                } else {
                    this.querySelector('i').classList.replace('fas', 'far');
                    
                    // AJAX call to unsave job
                    fetch('/job-seeker/jobs/unsave/' + jobId, {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                }
            });
        });
        
        // Gestion de la recherche avancée
        const toggleAdvancedSearch = document.getElementById('toggleAdvancedSearch');
        const advancedSearchForm = document.getElementById('advancedSearchForm');
        
        toggleAdvancedSearch.addEventListener('click', function() {
            if (advancedSearchForm.style.display === 'none') {
                advancedSearchForm.style.display = 'block';
                this.innerHTML = '<i class="fas fa-times"></i> Masquer la recherche avancée';
            } else {
                advancedSearchForm.style.display = 'none';
                this.innerHTML = '<i class="fas fa-sliders-h"></i> Recherche avancée';
            }
        });
        
        // Vérifier si des filtres avancés sont actifs
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has('industry') || urlParams.has('address') || urlParams.has('dateFrom') || urlParams.has('dateTo')) {
            advancedSearchForm.style.display = 'block';
            toggleAdvancedSearch.innerHTML = '<i class="fas fa-times"></i> Masquer la recherche avancée';
        }
    });
</script>
{% endblock %}

==================================================

Fichier: templates\job_seeker\messages.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\messages.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages | Job Seeker Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        .nav-item .badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: var(--accent-color);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Style spécial pour le bouton Chatbot */
        .nav-item.chatbot-item {
            background-color: rgba(255, 255, 255, 0.1);
            margin-top: 1.5rem;
            border-left: 3px solid var(--white);
        }

        .nav-item.chatbot-item:hover {
            background-color: rgba(255, 255, 255, 0.25);
        }

        .nav-item.chatbot-item i {
            color: #ffcc00;
        }

        /* Main Content - Messages */
        .messages-main {
            flex: 1;
            display: flex;
            background-color: var(--white);
        }

        /* Conversations Sidebar */
        .conversations-sidebar {
            width: 350px;
            border-right: 1px solid rgba(0, 0, 0, 0.05);
            background-color: var(--light-color);
            display: flex;
            flex-direction: column;
        }

        .conversations-header {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--white);
        }

        .conversations-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--dark);
        }

        .new-message-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 10px rgba(214, 40, 40, 0.3);
        }

        .new-message-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(214, 40, 40, 0.4);
        }

        .conversation-search {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            background-color: var(--white);
        }

        .search-input {
            width: 100%;
            padding: 0.8rem 1.2rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 30px;
            font-size: 0.95rem;
            transition: var(--transition);
            background-color: var(--light-color);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
        }

        .conversation-list {
            overflow-y: auto;
            flex: 1;
            background-color: var(--white);
        }

        .conversation-item {
            display: flex;
            padding: 1.2rem 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: var(--transition);
            background-color: var(--white);
        }

        .conversation-item:hover {
            background-color: rgba(214, 40, 40, 0.05);
            transform: translateX(5px);
        }

        .conversation-item.active {
            background-color: rgba(214, 40, 40, 0.1);
            border-left: 3px solid var(--primary-color);
        }

        .conversation-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1rem;
            border: 2px solid rgba(255, 255, 255, 0.8);
            box-shadow: var(--shadow);
        }

        .conversation-content {
            flex: 1;
            min-width: 0;
        }

        .conversation-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .conversation-name {
            font-weight: 600;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .conversation-time {
            color: var(--medium-gray);
            font-size: 0.8rem;
            flex-shrink: 0;
            margin-left: 0.5rem;
        }

        .conversation-preview {
            color: var(--medium-gray);
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .unread-badge {
            background-color: var(--accent-color);
            color: white;
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
            border-radius: 10px;
            margin-left: 0.5rem;
        }

        /* Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: var(--white);
        }

        .chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            background-color: var(--white);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .chat-user {
            display: flex;
            align-items: center;
        }

        .chat-user-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 1rem;
            border: 2px solid rgba(255, 255, 255, 0.8);
            box-shadow: var(--shadow);
        }

        .chat-user-info {
            flex: 1;
        }

        .chat-user-name {
            font-weight: 600;
        }

        .chat-user-status {
            font-size: 0.8rem;
            color: var(--medium-gray);
        }

        .chat-actions {
            display: flex;
            gap: 0.5rem;
        }

        .chat-action-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: var(--light-color);
            border: none;
            color: var(--dark);
            cursor: pointer;
            transition: var(--transition);
        }

        .chat-action-btn:hover {
            background-color: rgba(214, 40, 40, 0.1);
            color: var(--primary-color);
        }

        .chat-messages {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background-color: var(--light-color);
            background-image: 
                linear-gradient(rgba(245, 243, 244, 0.9), rgba(245, 243, 244, 0.9)),
                url('https://www.transparenttextures.com/patterns/always-grey.png');
        }

        .message {
            margin-bottom: 1.5rem;
            max-width: 70%;
            display: flex;
            flex-direction: column;
            transition: var(--transition);
            opacity: 0;
            transform: translateY(20px);
        }

        .message.show {
            opacity: 1;
            transform: translateY(0);
        }

        .message-incoming {
            align-self: flex-start;
        }

        .message-outgoing {
            align-self: flex-end;
        }

        .message-content {
            padding: 0.9rem 1.3rem;
            border-radius: 18px;
            position: relative;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .message-incoming .message-content {
            background-color: var(--white);
            border-bottom-left-radius: 4px;
        }

        .message-outgoing .message-content {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border-bottom-right-radius: 4px;
        }

        .message-time {
            font-size: 0.75rem;
            color: var(--medium-gray);
            margin-top: 0.3rem;
            padding: 0 0.5rem;
        }

        .message-outgoing .message-time {
            color: rgba(255, 255, 255, 0.7);
            text-align: right;
        }

        .message-incoming .message-time {
            text-align: left;
        }

        .chat-input {
            padding: 1.2rem;
            border-top: 1px solid rgba(0, 0, 0, 0.05);
            background-color: var(--white);
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.05);
        }

        .input-group {
            display: flex;
            align-items: center;
        }

        .message-input {
            flex: 1;
            padding: 0.9rem 1.3rem;
            border: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 30px;
            resize: none;
            height: 50px;
            max-height: 120px;
            background-color: var(--light-color);
            transition: var(--transition);
        }

        .message-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
        }

        .send-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-left: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .send-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .messages-main {
                flex-direction: column;
            }
            
            .conversations-sidebar {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
        }

        @media (max-width: 576px) {
            .conversation-item {
                padding: 1rem;
            }
            
            .chat-header {
                padding: 1rem;
            }
            
            .message {
                max-width: 85%;
            }
            
            .chat-input {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item active">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item chatbot-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Messages Content -->
    <div class="messages-main">
        <!-- Conversations Sidebar -->
        <div class="conversations-sidebar">
            <div class="conversations-header">
                <h3 class="conversations-title">Messages</h3>
                <button class="new-message-btn">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
            
            <div class="conversation-search">
                <input type="text" class="search-input" placeholder="Search conversations...">
            </div>
            
            <div class="conversation-list">
                <div class="conversation-item active">
                    <img src="{{ asset('img/recruiter1.jpg') }}" alt="Avatar" class="conversation-avatar">
                    <div class="conversation-content">
                        <div class="conversation-header">
                            <span class="conversation-name">Sarah Johnson <span class="unread-badge">3</span></span>
                            <span class="conversation-time">10:30 AM</span>
                        </div>
                        <div class="conversation-preview">Hi there! I wanted to follow up about our interview scheduled for...</div>
                    </div>
                </div>
                
                <div class="conversation-item">
                    <img src="{{ asset('img/recruiter2.jpg') }}" alt="Avatar" class="conversation-avatar">
                    <div class="conversation-content">
                        <div class="conversation-header">
                            <span class="conversation-name">TechCorp HR</span>
                            <span class="conversation-time">Yesterday</span>
                        </div>
                        <div class="conversation-preview">Congratulations! Your application has been shortlisted for...</div>
                    </div>
                </div>
                
                <div class="conversation-item">
                    <img src="{{ asset('img/recruiter3.jpg') }}" alt="Avatar" class="conversation-avatar">
                    <div class="conversation-content">
                        <div class="conversation-header">
                            <span class="conversation-name">Michael Brown</span>
                            <span class="conversation-time">Jun 12</span>
                        </div>
                        <div class="conversation-preview">Thanks for sending your portfolio. We'll review it and get back to you...</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-user">
                    <img src="{{ asset('img/recruiter1.jpg') }}" alt="Avatar" class="chat-user-avatar">
                    <div class="chat-user-info">
                        <div class="chat-user-name">Sarah Johnson</div>
                        <div class="chat-user-status">Recruiter at Tech Solutions</div>
                    </div>
                </div>
                <div class="chat-actions">
                    <button class="chat-action-btn">
                        <i class="fas fa-phone"></i>
                    </button>
                    <button class="chat-action-btn">
                        <i class="fas fa-video"></i>
                    </button>
                    <button class="chat-action-btn">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>
                </div>
            </div>
            
            <div class="chat-messages">
                <div class="message message-incoming show">
                    <div class="message-content">
                        Hi John, I wanted to follow up about our interview scheduled for next Monday at 2 PM. Does that time still work for you?
                    </div>
                    <div class="message-time">10:30 AM</div>
                </div>
                
                <div class="message message-outgoing show">
                    <div class="message-content">
                        Yes, that works perfectly for me. Looking forward to it!
                    </div>
                    <div class="message-time">10:32 AM</div>
                </div>
                
                <div class="message message-incoming show">
                    <div class="message-content">
                        Great! We'll be discussing your experience with React and Node.js, as well as some system design concepts. 
                        Please be prepared to share your screen for a short coding exercise.
                    </div>
                    <div class="message-time">10:33 AM</div>
                </div>
                
                <div class="message message-outgoing show">
                    <div class="message-content">
                        Sounds good. I'll make sure to have my development environment ready. 
                        Should I prepare anything else in particular?
                    </div>
                    <div class="message-time">10:35 AM</div>
                </div>
            </div>
            
            <div class="chat-input">
                <div class="input-group">
                    <textarea class="message-input" placeholder="Type your message..."></textarea>
                    <button class="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const messages = document.querySelectorAll('.message:not(.show)');
            
            messages.forEach((message, index) => {
                const elementPosition = message.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    setTimeout(() => {
                        message.classList.add('show');
                    }, index * 100);
                }
            });
        };

        // Initial animation for existing messages
        const existingMessages = document.querySelectorAll('.message');
        existingMessages.forEach((message, index) => {
            setTimeout(() => {
                message.classList.add('show');
            }, index * 100);
        });

        // Trigger animations on scroll
        window.addEventListener('scroll', animateElements);

        // Simulate new message arrival
        function simulateNewMessage() {
            const chatMessages = document.querySelector('.chat-messages');
            const isAtBottom = chatMessages.scrollHeight - chatMessages.clientHeight <= chatMessages.scrollTop + 10;
            
            const newMessage = document.createElement('div');
            newMessage.className = 'message message-incoming';
            newMessage.innerHTML = `
                <div class="message-content">
                    Just one more thing - please bring examples of your previous work if possible.
                </div>
                <div class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
            `;
            
            chatMessages.appendChild(newMessage);
            
            // Animate the new message
            setTimeout(() => {
                newMessage.classList.add('show');
            }, 100);
            
            // Scroll to bottom if user was already there
            if (isAtBottom) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Check for new messages every 30 seconds (simulation)
        setInterval(simulateNewMessage, 30000);

        // Auto-resize textarea
        const textarea = document.querySelector('.message-input');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        // Send message on Enter key (without Shift)
        textarea.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Send message function
        function sendMessage() {
            const messageText = textarea.value.trim();
            if (messageText) {
                const chatMessages = document.querySelector('.chat-messages');
                
                const newMessage = document.createElement('div');
                newMessage.className = 'message message-outgoing';
                newMessage.innerHTML = `
                    <div class="message-content">${messageText}</div>
                    <div class="message-time">${new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
                `;
                
                chatMessages.appendChild(newMessage);
                textarea.value = '';
                textarea.style.height = '50px';
                
                // Animate the new message
                setTimeout(() => {
                    newMessage.classList.add('show');
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, 100);
            }
        }

        // Send button click handler
        document.querySelector('.send-btn').addEventListener('click', sendMessage);

        // Conversation item click handler
        document.querySelectorAll('.conversation-item').forEach(item => {
            item.addEventListener('click', function() {
                document.querySelectorAll('.conversation-item').forEach(i => {
                    i.classList.remove('active');
                });
                this.classList.add('active');
                
                // Here you would typically load the conversation via AJAX
                // For demo, we'll just simulate loading
                const chatHeader = document.querySelector('.chat-user-name');
                const chatStatus = document.querySelector('.chat-user-status');
                const avatar = document.querySelector('.chat-user-avatar');
                
                if (this.querySelector('.conversation-name').textContent.includes('Sarah')) {
                    chatHeader.textContent = 'Sarah Johnson';
                    chatStatus.textContent = 'Recruiter at Tech Solutions';
                    avatar.src = "{{ asset('img/recruiter1.jpg') }}";
                } else if (this.querySelector('.conversation-name').textContent.includes('TechCorp')) {
                    chatHeader.textContent = 'TechCorp HR';
                    chatStatus.textContent = 'Human Resources';
                    avatar.src = "{{ asset('img/recruiter2.jpg') }}";
                } else {
                    chatHeader.textContent = 'Michael Brown';
                    chatStatus.textContent = 'Hiring Manager';
                    avatar.src = "{{ asset('img/recruiter3.jpg') }}";
                }
                
                // Clear unread badge
                const badge = this.querySelector('.unread-badge');
                if (badge) {
                    badge.remove();
                }
            });
        });
    });
</script>
</body>
</html>

==================================================

Fichier: templates\job_seeker\new_conversation.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\new_conversation.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}New Conversation{% endblock %}

{% block body %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex align-items-center">
                    {% if app.user.profileImage %}
                        <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img mr-3" style="width: 40px; height: 40px; border-radius: 50%;">
                    {% else %}
                        <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img mr-3" style="width: 40px; height: 40px; border-radius: 50%;">
                    {% endif %}
                    <h4 class="mb-0">Start New Conversation</h4>
                </div>
                <div class="card-body">
                    {{ form_start(form) }}
                        {{ form_row(form.title) }}
                        {{ form_row(form.participants) }}
                        
                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane mr-2"></i> Start Conversation
                            </button>
                            <a href="{{ path('job_seeker_messages_index') }}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                        </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Optionnel: Initialiser Select2 si utilisé
        $(document).ready(function() {
            $('.select2').select2({
                placeholder: "Select participants...",
                allowClear: true
            });
        });
    </script>
{% endblock %}

==================================================

Fichier: templates\job_seeker\profile.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\profile.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Mon Profil{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            text-align: center;
            margin-bottom: 2rem;
            color: var(--white);
            position: relative;
            z-index: 1;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--white);
            margin-bottom: 1rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .profile-name {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .nav-menu {
            margin-top: 2rem;
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.8rem 1rem;
            margin-bottom: 0.5rem;
            border-radius: 8px;
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 10px;
            font-size: 1.1rem;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.2);
            color: var(--white);
            transform: translateX(5px);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        /* Profile Card */
        .profile-card {
            background: var(--white);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
            transition: var(--transition);
        }

        .profile-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .profile-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
        }

        .profile-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .btn-edit {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: var(--white);
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
            box-shadow: 0 4px 15px rgba(214, 40, 40, 0.3);
        }

        .btn-edit:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(214, 40, 40, 0.4);
        }

        /* Profile View */
        .profile-view {
            display: flex;
            margin-bottom: 2rem;
            align-items: center;
        }

        .profile-avatar {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--primary-color);
            margin-right: 2rem;
            box-shadow: var(--shadow);
        }

        .profile-info {
            flex: 1;
        }

        .profile-name-large {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }

        .profile-title-text {
            font-size: 1.2rem;
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .profile-about {
            color: var(--medium-gray);
            line-height: 1.6;
            margin-bottom: 1.5rem;
        }

        /* Profile Details Grid */
        .profile-details {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .detail-card {
            background: var(--white);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: var(--transition);
            border-left: 4px solid var(--primary-color);
        }

        .detail-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        .detail-title {
            font-weight: 600;
            margin-bottom: 1rem;
            color: var(--dark);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .detail-title i {
            color: var(--primary-color);
        }

        .detail-content {
            color: var(--medium-gray);
        }

        .detail-content p {
            margin-bottom: 0.5rem;
        }

        .detail-content strong {
            color: var(--dark);
        }

        .skills-list {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .skill-tag {
            background: rgba(214, 40, 40, 0.1);
            color: var(--primary-color);
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.9rem;
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-view {
                flex-direction: column;
                text-align: center;
            }
            
            .profile-avatar {
                margin-right: 0;
                margin-bottom: 1.5rem;
            }
        }

        @media (max-width: 576px) {
            .profile-details {
                grid-template-columns: 1fr;
            }
            
            .profile-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar -->
    {% include 'job_seeker/_sidebar.html.twig' %}
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="profile-card">
            <div class="profile-header">
                <h1 class="profile-title">Mon Profil</h1>
                <a href="{{ path('job_seeker_profile_edit') }}" class="btn-edit">
                    <i class="fas fa-edit"></i> Modifier
                </a>
            </div>
            
            <div class="profile-view">
                {% if user.profileImage %}
                    <img src="{{ asset(user.profileImage) }}" alt="Avatar" class="profile-avatar">
                {% else %}
                    <img src="{{ asset('img/fxchat.png') }}" alt="Avatar" class="profile-avatar">
                {% endif %}
                <div class="profile-info">
                    <h1 class="profile-name-large">{{ user.firstName }} {{ user.lastName }}</h1>
                    {% if user.title %}
                        <h2 class="profile-title-text">{{ user.title }}</h2>
                    {% endif %}
                    {% if user.about %}
                        <p class="profile-about">{{ user.about }}</p>
                    {% endif %}
                </div>
            </div>
            
            <div class="profile-details">
                <div class="detail-card">
                    <h3 class="detail-title"><i class="fas fa-envelope"></i> Contact</h3>
                    <div class="detail-content">
                        <p><strong>Email:</strong> {{ user.email }}</p>
                        {% if user.phone %}
                            <p><strong>Téléphone:</strong> {{ user.phone }}</p>
                        {% endif %}
                        {% if user.address %}
                            <p><strong>Adresse:</strong> {{ user.address }}</p>
                        {% endif %}
                    </div>
                </div>
                
                <div class="detail-card">
                    <h3 class="detail-title"><i class="fas fa-briefcase"></i> Expérience</h3>
                    <div class="detail-content">
                        {% if user.experience %}
                            <p>{{ user.experience }}</p>
                        {% else %}
                            <p>Non spécifié</p>
                        {% endif %}
                    </div>
                </div>
                
                <div class="detail-card">
                    <h3 class="detail-title"><i class="fas fa-graduation-cap"></i> Éducation</h3>
                    <div class="detail-content">
                        {% if user.education %}
                            <p>{{ user.education }}</p>
                        {% else %}
                            <p>Non spécifié</p>
                        {% endif %}
                    </div>
                </div>
                
                {% if user.skills %}
                <div class="detail-card">
                    <h3 class="detail-title"><i class="fas fa-code"></i> Compétences</h3>
                    <div class="detail-content">
                        <div class="skills-list">
                            {% for skill in user.skills|split(',') %}
                                <span class="skill-tag">{{ skill|trim }}</span>
                            {% endfor %}
                        </div>
                    </div>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement et au scroll
        const animateElements = function() {
            const elements = document.querySelectorAll(
                '.profile-card, .detail-card, .profile-view'
            );
            
            elements.forEach((element, index) => {
                const elementPosition = element.getBoundingClientRect().top;
                const screenPosition = window.innerHeight / 1.3;
                
                if(elementPosition < screenPosition) {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }
            });
        };

        // Initial state for animation
        const animatedItems = document.querySelectorAll(
            '.profile-card, .detail-card, .profile-view'
        );
        
        animatedItems.forEach(item => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.5s ease';
        });

        // Délai pour l'animation séquentielle
        animatedItems.forEach((item, index) => {
            item.style.transitionDelay = ${index * 0.1}s;
        });

        // Trigger animations
        window.addEventListener('load', animateElements);
        window.addEventListener('scroll', animateElements);
    });
</script>
</body>
</html>

==================================================

Fichier: templates\job_seeker\saved_jobs.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\saved_jobs.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Saved Jobs{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .saved-jobs-container {
            display: flex;
            min-height: calc(100vh - 80px);
            background-color: var(--light-gray);
        }

        .saved-jobs-sidebar {
            width: 280px;
            background-color: white;
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }

        .saved-jobs-content {
            flex: 1;
            padding: 2rem;
        }

        .saved-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .saved-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .saved-count {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        .saved-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 2rem;
        }

        .tab-item {
            padding: 0.8rem 1.5rem;
            cursor: pointer;
            position: relative;
            color: var(--medium-gray);
            font-weight: 500;
        }

        .tab-item.active {
            color: var(--primary-red);
        }

        .tab-item.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: var(--primary-red);
        }

        .job-list {
            display: grid;
            gap: 1.5rem;
        }

        .job-card {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            border: 1px solid #eee;
        }

        .job-card:hover {
            transform: translateY(-5px);
            border-color: var(--primary-red);
        }

        .job-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
        }

        .job-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .job-company {
            color: var(--primary-red);
            font-weight: 500;
            margin-bottom: 0.3rem;
        }

        .job-meta {
            display: flex;
            gap: 1rem;
            color: var(--medium-gray);
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .job-meta-item {
            display: flex;
            align-items: center;
        }

        .job-meta-item i {
            margin-right: 0.3rem;
            font-size: 0.8rem;
        }

        .job-description {
            color: var(--dark-gray);
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .job-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .job-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .job-tag {
            background-color: rgba(230, 57, 70, 0.1);
            color: var(--primary-red);
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .job-actions {
            display: flex;
            gap: 0.5rem;
        }

        .btn-apply {
            background-color: var(--primary-red);
            color: white;
            border: none;
            padding: 0.5rem 1.5rem;
            border-radius: 20px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-apply:hover {
            background-color: var(--dark-red);
        }

        .btn-remove {
            background-color: white;
            color: var(--primary-red);
            border: 1px solid var(--primary-red);
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-remove:hover {
            background-color: rgba(230, 57, 70, 0.1);
        }

        .empty-state {
            text-align: center;
            padding: 4rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }

        .empty-icon {
            font-size: 3rem;
            color: var(--medium-gray);
            margin-bottom: 1rem;
        }

        .empty-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark-gray);
        }

        .empty-text {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="saved-jobs-container">
    <!-- Sidebar (same as home) -->
    <div class="saved-jobs-sidebar">
        <div class="profile-section">
           <img src="{{ asset('img/google.png') }}" alt="Profile" class="profile-img">
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_saved_jobs') }}" class="nav-item active">
                <i class="fas fa-heart"></i> Saved Jobs
            </a>
            <!-- Other menu items -->
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="saved-jobs-content">
        <div class="saved-header">
            <h2 class="saved-title">Saved Jobs</h2>
            <div class="saved-count">3 saved jobs</div>
        </div>
        
        <div class="saved-tabs">
            <div class="tab-item active">All Jobs</div>
            <div class="tab-item">Applied</div>
            <div class="tab-item">Interviewing</div>
            <div class="tab-item">Archived</div>
        </div>
        
        <div class="job-list">
            <div class="job-card">
                <div class="job-header">
                    <div>
                        <h3 class="job-title">Senior Frontend Developer</h3>
                        <div class="job-company">Tech Solutions Inc.</div>
                    </div>
                    <div style="color: var(--medium-gray); font-size: 0.9rem;">Saved 2 days ago</div>
                </div>
                
                <div class="job-meta">
                    <div class="job-meta-item">
                        <i class="fas fa-map-marker-alt"></i> New York, NY
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-briefcase"></i> Full-time
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-dollar-sign"></i> $110,000 - $140,000
                    </div>
                </div>
                
                <div class="job-description">
                    We're looking for an experienced Frontend Developer to join our team. You'll be responsible for 
                    building user interfaces using React, Redux, and TypeScript. Experience with modern frontend 
                    tooling and a strong eye for design are required.
                </div>
                
                <div class="job-footer">
                    <div class="job-tags">
                        <div class="job-tag">React</div>
                        <div class="job-tag">TypeScript</div>
                        <div class="job-tag">Redux</div>
                    </div>
                    
                    <div class="job-actions">
                        <button class="btn-remove">Remove</button>
                        <button class="btn-apply">Apply Now</button>
                    </div>
                </div>
            </div>
            
            <div class="job-card">
                <div class="job-header">
                    <div>
                        <h3 class="job-title">Full Stack Developer</h3>
                        <div class="job-company">WebApps LLC</div>
                    </div>
                    <div style="color: var(--medium-gray); font-size: 0.9rem;">Saved 1 week ago</div>
                </div>
                
                <div class="job-meta">
                    <div class="job-meta-item">
                        <i class="fas fa-map-marker-alt"></i> Remote
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-briefcase"></i> Full-time
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-dollar-sign"></i> $90,000 - $120,000
                    </div>
                </div>
                
                <div class="job-description">
                    Join our team as a Full Stack Developer working with Node.js, React, and MongoDB. 
                    You'll be involved in all aspects of development from designing APIs to building 
                    responsive user interfaces. Experience with AWS is a plus.
                </div>
                
                <div class="job-footer">
                    <div class="job-tags">
                        <div class="job-tag">Node.js</div>
                        <div class="job-tag">React</div>
                        <div class="job-tag">MongoDB</div>
                    </div>
                    
                    <div class="job-actions">
                        <button class="btn-remove">Remove</button>
                        <button class="btn-apply">Applied</button>
                    </div>
                </div>
            </div>
            
            <div class="job-card">
                <div class="job-header">
                    <div>
                        <h3 class="job-title">UX/UI Designer</h3>
                        <div class="job-company">Creative Minds</div>
                    </div>
                    <div style="color: var(--medium-gray); font-size: 0.9rem;">Saved 3 days ago</div>
                </div>
                
                <div class="job-meta">
                    <div class="job-meta-item">
                        <i class="fas fa-map-marker-alt"></i> San Francisco, CA
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-briefcase"></i> Contract
                    </div>
                    <div class="job-meta-item">
                        <i class="fas fa-dollar-sign"></i> $50 - $70 per hour
                    </div>
                </div>
                
                <div class="job-description">
                    We're seeking a talented UX/UI Designer to create beautiful and functional interfaces 
                    for our clients. You should have experience with Figma, Adobe XD, and user research 
                    methodologies. Portfolio required.
                </div>
                
                <div class="job-footer">
                    <div class="job-tags">
                        <div class="job-tag">Figma</div>
                        <div class="job-tag">UI Design</div>
                        <div class="job-tag">User Research</div>
                    </div>
                    
                    <div class="job-actions">
                        <button class="btn-remove">Remove</button>
                        <button class="btn-apply">Apply Now</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\job_seeker\settings.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\settings.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Settings{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .settings-container {
            display: flex;
            min-height: calc(100vh - 80px);
            background-color: var(--light-gray);
        }

        .settings-sidebar {
            width: 280px;
            background-color: white;
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }

        .settings-content {
            flex: 1;
            padding: 2rem;
        }

        .settings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .settings-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .settings-tabs {
            display: flex;
            border-bottom: 1px solid #ddd;
            margin-bottom: 2rem;
        }

        .settings-tab {
            padding: 0.8rem 1.5rem;
            cursor: pointer;
            position: relative;
            color: var(--medium-gray);
            font-weight: 500;
        }

        .settings-tab.active {
            color: var(--primary-red);
        }

        .settings-tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 2px;
            background-color: var(--primary-red);
        }

        .settings-card {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark-gray);
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary-red);
            box-shadow: 0 0 0 3px rgba(230, 57, 70, 0.1);
            outline: none;
        }

        .form-row {
            display: flex;
            gap: 1.5rem;
        }

        .form-row .form-group {
            flex: 1;
        }

        .btn-save {
            background-color: var(--primary-red);
            color: white;
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-save:hover {
            background-color: var(--dark-red);
        }

        .notification-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
            border-bottom: 1px solid #eee;
        }

        .notification-item:last-child {
            border-bottom: none;
        }

        .notification-label {
            font-weight: 500;
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-red);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        .danger-zone {
            border: 1px solid #ffcccc;
            background-color: #fff5f5;
            border-radius: 12px;
            padding: 1.5rem;
        }

        .danger-title {
            color: #d32f2f;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .danger-text {
            color: #5f2120;
            margin-bottom: 1.5rem;
        }

        .btn-danger {
            background-color: #d32f2f;
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block body %}
<div class="settings-container">
    <!-- Sidebar (same as home) -->
    <div class="settings-sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_settings') }}" class="nav-item active">
                <i class="fas fa-cog"></i> Settings
            </a>
            <!-- Other menu items -->
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="settings-content">
        <div class="settings-header">
            <h2 class="settings-title">Account Settings</h2>
        </div>
        
        <div class="settings-tabs">
            <div class="settings-tab active">Profile</div>
            <div class="settings-tab">Notifications</div>
            <div class="settings-tab">Security</div>
            <div class="settings-tab">Preferences</div>
        </div>
        
        <div class="settings-card">
            <div class="card-header">
                <h3 class="card-title">Personal Information</h3>
            </div>
            
            <form>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">First Name</label>
                        <input type="text" class="form-control" value="John">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Last Name</label>
                        <input type="text" class="form-control" value="Doe">
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-control" value="john.doe@example.com">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Phone Number</label>
                    <input type="tel" class="form-control" value="+1 (123) 456-7890">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Location</label>
                    <input type="text" class="form-control" value="New York, USA">
                </div>
                
                <button type="submit" class="btn-save">Save Changes</button>
            </form>
        </div>
        
        <div class="settings-card">
            <div class="card-header">
                <h3 class="card-title">Password</h3>
            </div>
            
            <form>
                <div class="form-group">
                    <label class="form-label">Current Password</label>
                    <input type="password" class="form-control">
                </div>
                
                <div class="form-group">
                    <label class="form-label">New Password</label>
                    <input type="password" class="form-control">
                </div>
                
                <div class="form-group">
                    <label class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control">
                </div>
                
                <button type="submit" class="btn-save">Update Password</button>
            </form>
        </div>
        
        <div class="settings-card">
            <div class="card-header">
                <h3 class="card-title">Notification Preferences</h3>
            </div>
            
            <div class="notification-item">
                <div class="notification-label">Email Notifications</div>
                <label class="switch">
                    <input type="checkbox" checked>
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="notification-item">
                <div class="notification-label">New Job Matches</div>
                <label class="switch">
                    <input type="checkbox" checked>
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="notification-item">
                <div class="notification-label">Application Updates</div>
                <label class="switch">
                    <input type="checkbox" checked>
                    <span class="slider"></span>
                </label>
            </div>
            
            <div class="notification-item">
                <div class="notification-label">Messages</div>
                <label class="switch">
                    <input type="checkbox" checked>
                    <span class="slider"></span>
                </label>
            </div>
        </div>
        
        <div class="settings-card danger-zone">
            <h3 class="danger-title">Danger Zone</h3>
            <p class="danger-text">These actions are irreversible. Please proceed with caution.</p>
            
            <div style="display: flex; gap: 1rem;">
                <button class="btn-danger">
                    <i class="fas fa-file-export"></i> Export Data
                </button>
                <button class="btn-danger">
                    <i class="fas fa-trash"></i> Delete Account
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

==================================================

Fichier: templates\job_seeker\skills_assessment.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\skills_assessment.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Skills Assessment{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .skills-container {
            display: flex;
            min-height: calc(100vh - 80px);
            background-color: var(--light-gray);
        }

        .skills-sidebar {
            width: 280px;
            background-color: white;
            box-shadow: var(--shadow);
            padding: 1.5rem;
        }

        .skills-content {
            flex: 1;
            padding: 2rem;
        }

        .skills-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .skills-title {
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .skills-progress {
            display: flex;
            align-items: center;
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
        }

        .progress-circle {
            width: 100px;
            height: 100px;
            position: relative;
            margin-right: 1.5rem;
        }

        .progress-bg {
            fill: none;
            stroke: #f0f0f0;
            stroke-width: 8;
        }

        .progress-fill {
            fill: none;
            stroke: var(--primary-red);
            stroke-width: 8;
            stroke-linecap: round;
            transform: rotate(-90deg);
            transform-origin: 50% 50%;
            stroke-dasharray: 283;
            stroke-dashoffset: 85;
        }

        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--dark-gray);
        }

        .progress-info h3 {
            font-size: 1.2rem;
            margin-bottom: 0.5rem;
        }

        .progress-info p {
            color: var(--medium-gray);
        }

        .skills-categories {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .category-card {
            background-color: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            border: 1px solid #eee;
        }

        .category-card:hover {
            transform: translateY(-5px);
            border-color: var(--primary-red);
        }

        .category-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .category-title {
            font-size: 1.1rem;
            font-weight: 600;
        }

        .category-progress {
            display: flex;
            align-items: center;
        }

        .category-progress-bar {
            width: 100px;
            height: 6px;
            background-color: #f0f0f0;
            border-radius: 3px;
            margin-right: 0.5rem;
            overflow: hidden;
        }

        .category-progress-fill {
            height: 100%;
            background-color: var(--primary-red);
            border-radius: 3px;
        }

        .category-progress-text {
            font-size: 0.8rem;
            color: var(--medium-gray);
        }

        .skill-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.8rem 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .skill-item:last-child {
            border-bottom: none;
        }

        .skill-name {
            font-weight: 500;
        }

        .skill-level {
            display: flex;
            align-items: center;
        }

        .skill-dots {
            display: flex;
            gap: 0.3rem;
            margin-right: 0.5rem;
        }

        .skill-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #f0f0f0;
        }

        .skill-dot.filled {
            background-color: var(--primary-red);
        }

        .btn-start {
            background-color: var(--primary-red);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            cursor: pointer;
        }

        .empty-state {
            text-align: center;
            padding: 4rem;
            background-color: white;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }

        .empty-icon {
            font-size: 3rem;
            color: var(--medium-gray);
            margin-bottom: 1rem;
        }

        .empty-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--dark-gray);
        }

        .empty-text {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }
    </style>
{% endblock %}

{% block body %}
<div class="skills-container">
    <!-- Sidebar (same as home) -->
    <div class="skills-sidebar">
        <div class="profile-section">
            <img src="{{ asset('img/profile.jpg') }}" alt="Profile" class="profile-img">
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_skills') }}" class="nav-item active">
                <i class="fas fa-chart-line"></i> Skills Assessment
            </a>
            <!-- Other menu items -->
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="skills-content">
        <div class="skills-header">
            <h2 class="skills-title">Skills Assessment</h2>
        </div>
        
        <div class="skills-progress">
            <div class="progress-circle">
                <svg viewBox="0 0 100 100">
                    <circle class="progress-bg" cx="50" cy="50" r="45"></circle>
                    <circle class="progress-fill" cx="50" cy="50" r="45"></circle>
                </svg>
                <div class="progress-text">70%</div>
            </div>
            
            <div class="progress-info">
                <h3>Your Skills Profile</h3>
                <p>You've completed 70% of your skills assessment. Complete all assessments to get personalized 
                recommendations for skill improvement and job matches.</p>
            </div>
        </div>
        
        <div class="skills-categories">
            <div class="category-card">
                <div class="category-header">
                    <div class="category-title">Technical Skills</div>
                    <div class="category-progress">
                        <div class="category-progress-bar">
                            <div class="category-progress-fill" style="width: 80%"></div>
                        </div>
                        <div class="category-progress-text">80%</div>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">JavaScript</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">React</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">Node.js</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
            </div>
            
            <div class="category-card">
                <div class="category-header">
                    <div class="category-title">Soft Skills</div>
                    <div class="category-progress">
                        <div class="category-progress-bar">
                            <div class="category-progress-fill" style="width: 60%"></div>
                        </div>
                        <div class="category-progress-text">60%</div>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">Communication</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">Teamwork</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">Leadership</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Improve</button>
                    </div>
                </div>
            </div>
            
            <div class="category-card">
                <div class="category-header">
                    <div class="category-title">Language Skills</div>
                    <div class="category-progress">
                        <div class="category-progress-bar">
                            <div class="category-progress-fill" style="width: 40%"></div>
                        </div>
                        <div class="category-progress-text">40%</div>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">English</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                        </div>
                        <button class="btn-start">Test</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">French</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot filled"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Test</button>
                    </div>
                </div>
                
                <div class="skill-item">
                    <div class="skill-name">German</div>
                    <div class="skill-level">
                        <div class="skill-dots">
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                            <div class="skill-dot"></div>
                        </div>
                        <button class="btn-start">Test</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\job_seeker\_sidebar.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\job_seeker\_sidebar.html.twig
-----
<div class="sidebar">
    <div class="profile-section">
        {% if app.user.profileImage %}
            <img src="{{ asset(app.user.profileImage) }}?v={{ random() }}" alt="Profile" class="profile-img">
        {% else %}
            <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
        {% endif %}
        <h3 class="profile-name">{{ app.user.username }}</h3>
        <p class="profile-email">{{ app.user.email }}</p>
    </div>
    
    <div class="nav-menu">
        <a href="{{ path('job_seeker_home') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_home' %}active{% endif %}">
            <i class="fas fa-home"></i> Dashboard
        </a>
        <a href="{{ path('job_seeker_profile_index') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_profile_index' %}active{% endif %}">
            <i class="fas fa-user"></i> Mon Profil
        </a>
        <a href="{{ path('job_seeker_profile_edit') }}" class="nav-item {% if app.request.get('_route') == 'job_seeker_profile_edit' %}active{% endif %}">
            <i class="fas fa-user-edit"></i> Modifier Profil
        </a>
        <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item {% if app.request.get('_route') starts with 'job_seeker_jobs' %}active{% endif %}">
            <i class="fas fa-briefcase"></i> Offres d'emploi
        </a>
        <!-- Correction de la route pour les candidatures -->
        <span class="nav-item disabled">
            <i class="fas fa-file-alt"></i> Mes Candidatures
        </span>
        <a href="{{ path('conversation_index') }}" class="nav-item {% if app.request.get('_route') == 'conversation_index' %}active{% endif %}">
            <i class="fas fa-comments"></i> Messages
            {% set unread_count = unread_messages_count() %}
            {% if unread_count > 0 %}
                <span class="badge">{{ unread_count }}</span>
            {% endif %}
        </a>
        <a href="{{ path('chatbot') }}" class="nav-item {% if app.request.get('_route') == 'chatbot' %}active{% endif %}">
            <i class="fas fa-robot"></i> Assistant Tchala
        </a>
        <a href="{{ path('app_logout') }}" class="nav-item">
            <i class="fas fa-sign-out-alt"></i> Déconnexion
        </a>
    </div>
</div>


==================================================

Fichier: templates\registration\choice.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\registration\choice.html.twig
-----
{# choice.html.twig #}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Choose Account Type{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .choice-container {
            display: flex;
            min-height: 100vh;
        }

        /* Left Panel */
        .welcome-panel {
            flex: 1;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            position: relative;
            overflow: hidden;
        }

        .welcome-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .welcome-content {
            max-width: 500px;
            text-align: center;
            color: var(--white);
            z-index: 1;
            padding: 2rem;
        }

        .welcome-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

        .welcome-text {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.6;
            opacity: 0.9;
        }

        /* Right Panel */
        .choice-panel {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            background-color: var(--white);
        }

        .choice-box {
            width: 100%;
            max-width: 500px;
            padding: 2.5rem;
            background-color: var(--light-color);
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        .choice-header {
            margin-bottom: 2rem;
            text-align: center;
        }

        .choice-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
        }

        .choice-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .choice-subtitle {
            color: var(--medium-gray);
            font-size: 0.9rem;
            margin-top: 1rem;
        }

        /* Choice Buttons */
        .choice-buttons {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            margin: 3rem 0;
        }

        .choice-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 1rem;
            padding: 1.2rem;
            border-radius: 8px;
            background: var(--white);
            color: var(--dark);
            font-size: 1rem;
            font-weight: 600;
            border: 2px solid var(--medium-gray);
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
        }

        .choice-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .choice-btn i {
            font-size: 1.2rem;
        }

        .btn-back {
            width: 100%;
            padding: 0.9rem;
            background: var(--white);
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-decoration: none;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-back:hover {
            background: var(--primary-color);
            color: var(--white);
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.2);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .choice-container {
                flex-direction: column;
            }

            .welcome-panel {
                padding: 3rem 1rem;
                clip-path: ellipse(150% 100% at 50% 0%);
            }

            .choice-panel {
                padding: 2rem 1rem;
            }

            .choice-box {
                padding: 1.5rem;
            }

            .welcome-title {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
<div class="choice-container">
    <!-- Welcome Panel -->
    <div class="welcome-panel">
        <div class="welcome-content">
            <h1 class="welcome-title">Create Your Account</h1>
            <p class="welcome-text">Select your account type to get started on your journey with us</p>
        </div>
    </div>

    <!-- Choice Panel -->
    <div class="choice-panel">
        <div class="choice-box">
            <div class="choice-header">
                <h2 class="choice-title">Account Type</h2>
                <p class="choice-subtitle">Choose the option that best describes you</p>
            </div>

            <div class="choice-buttons">
                <a href="{{ path('app_register_job_seeker') }}" class="choice-btn">
                    <i class="fas fa-user-tie"></i>
                    <span>I'm a Job Seeker</span>
                </a>
                
                <a href="{{ path('app_register_company') }}" class="choice-btn">
                    <i class="fas fa-building"></i>
                    <span>I'm a Company</span>
                </a>
            </div>

            <a href="{{ path('app_first_page') }}" class="btn-back">
                <i class="fas fa-arrow-left"></i>
                <span>Back to Home</span>
            </a>
        </div>
    </div>
</div>
</body>
</html>
==================================================

Fichier: templates\registration\register.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\registration\register.html.twig
-----
{# templates/registration/register.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Register{% endblock %}

{% block body %}
<div class="registration-container">
    <div class="registration-form">
        <h1>Create Account</h1>

        {{ form_start(registrationForm) }}
            {{ form_row(registrationForm.email) }}
            {{ form_row(registrationForm.username) }}
            {{ form_row(registrationForm.plainPassword) }}
            
            <div class="form-group">
                {{ form_label(registrationForm.type) }}
                <div class="type-choices">
                    {% for choice in registrationForm.type %}
                        <div class="type-choice">
                            {{ form_widget(choice) }}
                            {{ form_label(choice) }}
                        </div>
                    {% endfor %}
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Register</button>
        {{ form_end(registrationForm) }}

        <div class="login-link">
            Already have an account? <a href="{{ path('app_login') }}">Sign in</a>
        </div>
    </div>

    <div class="registration-image">
        <img src="{{ asset('images/register-bg.jpg') }}" alt="Registration background">
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\registration\register_admin.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\registration\register_admin.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Inscription Administrateur{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #B83227;
            --secondary-color: #f5f5f5;
            --text-color: #333;
            --light-text: #777;
            --border-radius: 8px;
            --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--secondary-color);
            margin: 0;
            padding: 0;
            color: var(--text-color);
        }
        
        .fullscreen-register {
            display: flex;
            min-height: 100vh;
        }
        
        .register-panel {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            background-color: white;
        }
        
        .register-box {
            width: 100%;
            max-width: 500px;
            padding: 2rem;
        }
        
        .register-header {
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .register-title {
            color: var(--primary-color);
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }
        
        .register-subtitle {
            color: var(--light-text);
            font-size: 1rem;
        }
        
        .form-group {
            position: relative;
            margin-bottom: 1.5rem;
        }
        
        .input-icon {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--light-text);
        }
        
        .form-control {
            width: 100%;
            padding: 12px 15px 12px 45px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        .form-control:focus {
            border-color: var(--primary-color);
            outline: none;
        }
        
        .btn-register {
            width: 100%;
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px;
            border-radius: var(--border-radius);
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 1rem;
        }
        
        .btn-register:hover {
            background-color: #9c2720;
        }
        
        .login-links {
            text-align: center;
            margin-top: 1.5rem;
        }
        
        .login-links a {
            color: var(--primary-color);
            text-decoration: none;
        }
        
        .login-links a:hover {
            text-decoration: underline;
        }
        
        .welcome-panel {
            flex: 1;
            background-color: var(--primary-color);
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }
        
        .welcome-content {
            max-width: 500px;
            text-align: center;
        }
        
        .welcome-content h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }
        
        .welcome-content p {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            opacity: 0.9;
        }
        
        .welcome-image {
            max-width: 80%;
            height: auto;
        }
        
        /* Photo preview */
        .photo-preview-container {
            text-align: center;
            margin-bottom: 1.5rem;
        }
        
        #photoPreview {
            max-width: 150px;
            max-height: 150px;
            border-radius: 50%;
            border: 3px solid var(--primary-color);
            display: none;
            margin: 0 auto;
        }
        
        /* Responsive design */
        @media (max-width: 992px) {
            .fullscreen-register {
                flex-direction: column;
            }
            
            .welcome-panel {
                display: none;
            }
        }
        
        /* Password toggle */
        .password-toggle {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: var(--light-text);
        }
    </style>
{% endblock %}

{% block body %}
<div class="fullscreen-register">
    <div class="register-panel">
        <div class="register-box">
            <div class="register-header">
                <h2 class="register-title">Inscription Administrateur</h2>
                <p class="register-subtitle">Créez votre compte administrateur</p>
            </div>

            <div class="photo-preview-container">
                <img id="photoPreview" src="#" alt="Photo preview">
            </div>

            {{ form_start(registrationForm) }}
                <div class="form-group">
                    <i class="fas fa-envelope input-icon"></i>
                    {{ form_row(registrationForm.email, {
                        'label': 'Email',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'admin@example.com'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-user input-icon"></i>
                    {{ form_row(registrationForm.username, {
                        'label': 'Username',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Choose a username'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form_label(registrationForm.plainPassword.first, 'Mot de passe') }}
                    {{ form_widget(registrationForm.plainPassword.first, {
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Créez un mot de passe'
                        }
                    }) }}
                    <i class="fas fa-eye password-toggle" onclick="togglePassword('{{ registrationForm.plainPassword.first.vars.id }}')"></i>
                    {{ form_errors(registrationForm.plainPassword.first) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form_label(registrationForm.plainPassword.second, 'Confirmer le mot de passe') }}
                    {{ form_widget(registrationForm.plainPassword.second, {
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Confirmez votre mot de passe'
                        }
                    }) }}
                    <i class="fas fa-eye password-toggle" onclick="togglePassword('{{ registrationForm.plainPassword.second.vars.id }}')"></i>
                    {{ form_errors(registrationForm.plainPassword.second) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-user input-icon"></i>
                    {{ form_row(registrationForm.prenom, {
                        'label': 'Prénom',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Votre prénom'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-user input-icon"></i>
                    {{ form_row(registrationForm.nomComplet, {
                        'label': 'Nom complet',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Votre nom complet'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-key input-icon"></i>
                    {{ form_row(registrationForm.adminCode, {
                        'label': 'Code administrateur',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Entrez le code administrateur'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-image input-icon"></i>
                    {{ form_row(registrationForm.photo, {
                        'label': 'Photo de profil',
                        'attr': {
                            'class': 'form-control'
                        }
                    }) }}
                </div>

                <div class="terms-checkbox">
                    <input type="checkbox" id="terms" required>
                    <label for="terms">J'accepte les <a href="#" id="termsLink">conditions d'utilisation</a> et la <a href="#" id="privacyLink">politique de confidentialité</a></label>
                </div>

                <button type="submit" class="btn-register">INSCRIPTION</button>
            {{ form_end(registrationForm) }}
            
            <div class="login-links">
                <p>Vous avez déjà un compte ? <a href="{{ path('app_login') }}">Connectez-vous ici</a></p>
                <p>Retour au <a href="{{ path('app_register_choice') }}">choix du type de compte</a></p>
            </div>
        </div>
    </div>
    
    <div class="welcome-panel">
        <div class="welcome-content">
            <h1>Bienvenue sur Esprit Career</h1>
            <p>Rejoignez notre plateforme en tant qu'administrateur pour gérer les utilisateurs et les offres d'emploi.</p>
            <img src="{{ asset('img/admin-illustration.svg') }}" alt="Admin Illustration" class="welcome-image">
        </div>
    </div>
</div>

<!-- Modales pour les conditions d'utilisation et la politique de confidentialité -->
<div id="termsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Conditions d'utilisation</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <h3>1. Acceptation des conditions</h3>
            <p>En utilisant cette plateforme, vous acceptez ces conditions d'utilisation.</p>
            
            <h3>2. Compte administrateur</h3>
            <p>En tant qu'administrateur, vous avez accès à des fonctionnalités avancées et des données sensibles. Vous vous engagez à utiliser ces privilèges de manière responsable.</p>
            
            <h3>3. Responsabilités</h3>
            <p>Vous êtes responsable de maintenir la confidentialité de votre compte et de toutes les actions effectuées sous votre identifiant.</p>
            
            <h3>4. Utilisation des données</h3>
            <p>Vous vous engagez à respecter la confidentialité des données des utilisateurs et à ne pas les utiliser à des fins personnelles.</p>
        </div>
        <div class="modal-footer">
            <div class="terms-agreement">
                <input type="checkbox" id="modalTermsAgree">
                <label for="modalTermsAgree">J'ai lu et j'accepte les conditions d'utilisation</label>
            </div>
            <button id="acceptTerms" class="btn-accept" disabled>Accepter</button>
        </div>
    </div>
</div>

<div id="privacyModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Politique de confidentialité</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <h3>1. Collecte des données</h3>
            <p>Nous collectons vos informations personnelles pour la gestion de votre compte administrateur.</p>
            
            <h3>2. Utilisation des données</h3>
            <p>Vos données sont utilisées pour l'authentification et la personnalisation de votre expérience.</p>
            
            <h3>3. Protection des données</h3>
            <p>Nous mettons en œuvre des mesures de sécurité pour protéger vos informations personnelles.</p>
            
            <h3>4. Vos droits</h3>
            <p>Vous avez le droit d'accéder, de modifier ou de supprimer vos données personnelles.</p>
        </div>
        <div class="modal-footer">
            <div class="terms-agreement">
                <input type="checkbox" id="modalPrivacyAgree">
                <label for="modalPrivacyAgree">J'ai lu et j'accepte la politique de confidentialité</label>
            </div>
            <button id="acceptPrivacy" class="btn-accept" disabled>Accepter</button>
        </div>
    </div>
</div>

<style>
    /* Styles pour les modales */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }
    
    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 0;
        width: 70%;
        max-width: 800px;
        border-radius: 10px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }
    
    .modal-header {
        padding: 15px 20px;
        background-color: var(--primary-color);
        color: white;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .modal-body {
        padding: 20px;
        max-height: 60vh;
        overflow-y: auto;
    }
    
    .modal-footer {
        padding: 15px 20px;
        border-top: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    
    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }
    
    .btn-accept {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: var(--border-radius);
        cursor: pointer;
    }
    
    .btn-accept:disabled {
        background-color: #ccc;
        cursor: not-allowed;
    }
    
    .terms-checkbox {
        margin-bottom: 1.5rem;
    }
    
    .terms-checkbox a {
        color: var(--primary-color);
        text-decoration: none;
    }
    
    .terms-checkbox a:hover {
        text-decoration: underline;
    }
</style>

<script>
    function togglePassword(inputId) {
        const passwordInput = document.getElementById(inputId);
        const icon = event.currentTarget;
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
        } else {
            passwordInput.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
        }
    }
    
    // Prévisualisation de la photo
    document.getElementById('{{ registrationForm.photo.vars.id }}').addEventListener('change', function(e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            const preview = document.getElementById('photoPreview');
            
            reader.onload = function(e) {
                preview.src = e.target.result;
                preview.style.display = 'block';
            }
            
            reader.readAsDataURL(file);
        }
    });
    
    // Gestion des modales
    document.addEventListener('DOMContentLoaded', function() {
        // Éléments du DOM
        const termsLink = document.getElementById('termsLink');
        const privacyLink = document.getElementById('privacyLink');
        const termsModal = document.getElementById('termsModal');
        const privacyModal = document.getElementById('privacyModal');
        const closeBtns = document.querySelectorAll('.close');
        const acceptTermsBtn = document.getElementById('acceptTerms');
        const acceptPrivacyBtn = document.getElementById('acceptPrivacy');
        const modalTermsAgree = document.getElementById('modalTermsAgree');
        const modalPrivacyAgree = document.getElementById('modalPrivacyAgree');
        const termsCheckbox = document.getElementById('terms');
        const registerBtn = document.querySelector('.btn-register');
        
        // Ouvrir la modale Terms of Service
        termsLink.addEventListener('click', function(e) {
            e.preventDefault();
            termsModal.style.display = 'block';
            document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
        });
        
        // Ouvrir la modale Privacy Policy
        privacyLink.addEventListener('click', function(e) {
            e.preventDefault();
            privacyModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        });
        
        // Fermer les modales
        closeBtns.forEach(function(btn) {
            btn.addEventListener('click', function() {
                termsModal.style.display = 'none';
                privacyModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            });
        });
        
        // Fermer les modales en cliquant en dehors
        window.addEventListener('click', function(e) {
            if (e.target === termsModal) {
                termsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
            if (e.target === privacyModal) {
                privacyModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Activer/désactiver le bouton d'acceptation des termes
        modalTermsAgree.addEventListener('change', function() {
            acceptTermsBtn.disabled = !this.checked;
        });
        
        // Activer/désactiver le bouton d'acceptation de la politique de confidentialité
        modalPrivacyAgree.addEventListener('change', function() {
            acceptPrivacyBtn.disabled = !this.checked;
        });
        
        // Accepter les termes et fermer la modale
        acceptTermsBtn.addEventListener('click', function() {
            termsModal.style.display = 'none';
            document.body.style.overflow = 'auto';
            termsCheckbox.checked = true;
            validateForm();
        });
        
        // Accepter la politique de confidentialité et fermer la modale
        acceptPrivacyBtn.addEventListener('click', function() {
            privacyModal.style.display = 'none';
            document.body.style.overflow = 'auto';
            termsCheckbox.checked = true;
            validateForm();
        });
        
        // Activer/désactiver le bouton d'inscription
        termsCheckbox.addEventListener('change', validateForm);
        
        function validateForm() {
            registerBtn.disabled = !termsCheckbox.checked;
        }
        
        // Initialiser l'état du bouton
        validateForm();
    });
</script>
{% endblock %}























==================================================

Fichier: templates\registration\register_company.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\registration\register_company.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Company Registration</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .fullscreen-register {
            display: flex;
            min-height: 100vh;
        }

        /* Register Panel */
        .register-panel {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            background-color: var(--white);
        }

        .register-box {
            width: 100%;
            max-width: 500px;
            padding: 2.5rem;
            background-color: var(--light-color);
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        .register-header {
            margin-bottom: 2rem;
        }

        .register-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 0.5rem;
        }

        .register-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .register-subtitle {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem 0.8rem 2.5rem;
            border: 2px solid var(--medium-gray);
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
            background-color: var(--white);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
            outline: none;
        }

        .input-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--medium-gray);
        }

        .d-none {
            display: none;
        }

        /* Welcome Panel */
        .welcome-panel {
            flex: 1;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            position: relative;
            overflow: hidden;
        }

        .welcome-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1542744173-8e7e53415bb0?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .welcome-content {
            max-width: 500px;
            text-align: center;
            color: var(--white);
            z-index: 1;
            padding: 2rem;
        }

        .welcome-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .welcome-text {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.6;
            opacity: 0.9;
        }

        .benefits {
            margin: 2rem 0;
            text-align: left;
        }

        .benefit-item {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .benefit-item i {
            margin-right: 1rem;
            font-size: 1.2rem;
        }

        .btn-signin {
            background-color: var(--white);
            color: var(--primary-color);
            padding: 0.8rem 2rem;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition);
            box-shadow: var(--shadow);
        }

        .btn-signin:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        /* Button Styles */
        .btn-register {
            width: 100%;
            padding: 0.9rem;
            background: linear-gradient(to right, var(--primary-color), var(--accent-color));
            color: var(--white);
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.3);
            margin-top: 1rem;
        }

        .btn-register:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(214, 40, 40, 0.4);
        }

        .terms-checkbox {
            display: flex;
            align-items: center;
            margin: 1.5rem 0;
        }

        .terms-checkbox input {
            margin-right: 0.5rem;
        }

        .terms-checkbox label {
            font-size: 0.9rem;
            color: var(--medium-gray);
        }

        .terms-checkbox a {
            color: var(--primary-color);
            text-decoration: none;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .fullscreen-register {
                flex-direction: column;
            }

            .welcome-panel {
                padding: 3rem 1rem;
                clip-path: ellipse(150% 100% at 50% 0%);
            }

            .register-panel {
                padding: 2rem 1rem;
            }

            .register-box {
                padding: 1.5rem;
            }

            .welcome-title {
                font-size: 2rem;
            }
        }

        .select-industry {
            width: 100%;
            padding: 12px 15px 12px 45px;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            font-size: 16px;
            color: var(--dark);
            transition: var(--transition);
            background-color: var(--white);
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 15px;
        }

        .select-industry:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
            outline: none;
        }

        .select-industry option {
            padding: 10px;
        }

        /* Styles pour la fenêtre modale */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s;
        }

        .modal-content {
            background-color: var(--white);
            margin: 5% auto;
            width: 90%;
            max-width: 700px;
            border-radius: 15px;
            box-shadow: 0 5px 30px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s;
            max-height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .modal-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2 {
            margin: 0;
            color: var(--dark);
            font-size: 1.5rem;
        }

        .modal-body {
            padding: 20px;
            overflow-y: auto;
            flex: 1;
        }

        .modal-body h3 {
            color: var(--primary-color);
            margin-top: 20px;
            margin-bottom: 10px;
            font-size: 1.2rem;
        }

        .modal-body p, .modal-body ul {
            margin-bottom: 15px;
            line-height: 1.6;
            color: var(--dark);
        }

        .modal-body ul {
            padding-left: 20px;
        }

        .modal-body li {
            margin-bottom: 5px;
        }

        .modal-footer {
            padding: 20px;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .terms-agreement {
            display: flex;
            align-items: center;
        }

        .terms-agreement input {
            margin-right: 10px;
        }

        .close {
            color: var(--medium-gray);
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: var(--transition);
        }

        .close:hover {
            color: var(--primary-color);
        }

        .btn-accept {
            background-color: var(--primary-color);
            color: var(--white);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: var(--transition);
        }

        .btn-accept:disabled {
            background-color: var(--medium-gray);
            cursor: not-allowed;
        }

        .btn-accept:not(:disabled):hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Responsive design pour la modale */
        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }
    </style>
</head>
<body>
<div class="fullscreen-register">
    <!-- Register Panel -->
    <div class="register-panel">
        <div class="register-box">
            <div class="register-header">
                <h1 class="register-title">Company Registration</h1>
                <p class="register-subtitle">Create your company account to start recruiting</p>
            </div>

            {{ form_start(registrationForm) }}
                <div class="form-group">
                    <i class="fas fa-envelope input-icon"></i>
                    {{ form_row(registrationForm.email, {
                        'label': 'Email',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'company@example.com'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-user input-icon"></i>
                    {{ form_row(registrationForm.username, {
                        'label': 'Username',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Choose a username'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-lock input-icon"></i>
                    {{ form_row(registrationForm.plainPassword, {
                        'label': 'Password',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Create a password'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-building input-icon"></i>
                    {{ form_row(registrationForm.companyName, {
                        'label': 'Company Name',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Your company name'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    <i class="fas fa-industry input-icon"></i>
                    <label for="industry">Industry</label>
                    <select id="industry" name="industry" class="form-control select-industry" onchange="checkOtherIndustry()">
                        <option value="">Sélectionnez un secteur</option>
                        <option value="Informatique / IT">Informatique / IT</option>
                        <option value="Marketing / Communication">Marketing / Communication</option>
                        <option value="Finance / Banque">Finance / Banque</option>
                        <option value="Santé / Médical">Santé / Médical</option>
                        <option value="Éducation / Formation">Éducation / Formation</option>
                        <option value="Ingénierie / Technique">Ingénierie / Technique</option>
                        <option value="Commerce / Vente">Commerce / Vente</option>
                        <option value="Mécanique / Automobile">Mécanique / Automobile</option>
                        <option value="Bâtiment / Construction">Bâtiment / Construction</option>
                        <option value="Hôtellerie / Restauration">Hôtellerie / Restauration</option>
                        <option value="Transport / Logistique">Transport / Logistique</option>
                        <option value="Juridique / Droit">Juridique / Droit</option>
                        <option value="Ressources Humaines">Ressources Humaines</option>
                        <option value="Autre">Autre</option>
                    </select>
                </div>

                <div id="otherIndustryGroup" class="form-group" style="display: none;">
                    <i class="fas fa-pencil-alt input-icon"></i>
                    <label for="otherIndustry">Précisez votre secteur</label>
                    <input type="text" id="otherIndustry" name="otherIndustry" class="form-control" placeholder="Précisez votre secteur d'activité">
                </div>

                <script>
                    function checkOtherIndustry() {
                        const industrySelect = document.getElementById('industry');
                        const otherIndustryGroup = document.getElementById('otherIndustryGroup');
                        
                        if (industrySelect.value === 'Autre') {
                            otherIndustryGroup.style.display = 'block';
                        } else {
                            otherIndustryGroup.style.display = 'none';
                        }
                    }
                    
                    // Vérifier l'état initial au chargement de la page
                    document.addEventListener('DOMContentLoaded', function() {
                        checkOtherIndustry();
                    });
                </script>

                {% if registrationForm.address is defined %}
                <div class="form-group">
                    <i class="fas fa-map-marker-alt input-icon"></i>
                    {{ form_row(registrationForm.address, {
                        'label': 'Address',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Company address'
                        }
                    }) }}
                </div>
                {% endif %}

                <div class="terms-checkbox">
                    <input type="checkbox" id="terms" required>
                    <label for="terms">I agree to the <a href="#" id="termsLink">Terms of Service</a> and <a href="#" id="privacyLink">Privacy Policy</a></label>
                </div>

                {{ form_row(registrationForm._token) }}
                <input type="hidden" name="user_type" value="company">

                <button type="submit" class="btn-register" disabled>REGISTER</button>
            {{ form_end(registrationForm, {'render_rest': false}) }}
        </div>
    </div>

    <!-- Welcome Panel -->
    <div class="welcome-panel">
        <div class="welcome-content">
            <h2 class="welcome-title">Grow Your Team</h2>
            <p class="welcome-text">Join our platform to find the best talent for your company</p>
            
            <div class="benefits">
                <div class="benefit-item">
                    <i class="fas fa-check-circle"></i>
                    <span>Access to qualified candidates</span>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-check-circle"></i>
                    <span>Streamlined recruitment process</span>
                </div>
                <div class="benefit-item">
                    <i class="fas fa-check-circle"></i>
                    <span>Powerful tools for employers</span>
                </div>
            </div>
            
            <a href="{{ path('app_login') }}" class="btn-signin">
                <i class="fas fa-sign-in-alt"></i> Sign In
            </a>
        </div>
    </div>
</div>
</body>
</html>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Éléments du DOM
        const termsLink = document.getElementById('termsLink');
        const privacyLink = document.getElementById('privacyLink');
        const termsModal = document.getElementById('termsModal');
        const privacyModal = document.getElementById('privacyModal');
        const closeBtns = document.querySelectorAll('.close');
        const acceptTermsBtn = document.getElementById('acceptTerms');
        const acceptPrivacyBtn = document.getElementById('acceptPrivacy');
        const modalTermsAgree = document.getElementById('modalTermsAgree');
        const modalPrivacyAgree = document.getElementById('modalPrivacyAgree');
        const termsCheckbox = document.getElementById('terms');
        const registerBtn = document.querySelector('.btn-register');
        
        // Ouvrir la modale Terms of Service
        termsLink.addEventListener('click', function(e) {
            e.preventDefault();
            termsModal.style.display = 'block';
            document.body.style.overflow = 'hidden'; // Empêcher le défilement de la page
        });
        
        // Ouvrir la modale Privacy Policy
        privacyLink.addEventListener('click', function(e) {
            e.preventDefault();
            privacyModal.style.display = 'block';
            document.body.style.overflow = 'hidden';
        });
        
        // Fermer les modales
        closeBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                termsModal.style.display = 'none';
                privacyModal.style.display = 'none';
                document.body.style.overflow = 'auto'; // Réactiver le défilement
            });
        });
        
        // Fermer les modales en cliquant à l'extérieur
        window.addEventListener('click', function(e) {
            if (e.target === termsModal) {
                termsModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
            if (e.target === privacyModal) {
                privacyModal.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        });
        
        // Activer/désactiver le bouton d'acceptation des termes
        modalTermsAgree.addEventListener('change', function() {
            acceptTermsBtn.disabled = !this.checked;
        });
        
        // Activer/désactiver le bouton d'acceptation de la politique de confidentialité
        modalPrivacyAgree.addEventListener('change', function() {
            acceptPrivacyBtn.disabled = !this.checked;
        });
        
        // Accepter les termes et fermer la modale
        acceptTermsBtn.addEventListener('click', function() {
            termsModal.style.display = 'none';
            document.body.style.overflow = 'auto';
            termsCheckbox.checked = true;
            validateForm();
        });
        
        // Accepter la politique de confidentialité et fermer la modale
        acceptPrivacyBtn.addEventListener('click', function() {
            privacyModal.style.display = 'none';
            document.body.style.overflow = 'auto';
            termsCheckbox.checked = true;
            validateForm();
        });
        
        // Valider le formulaire avant soumission
        function validateForm() {
            registerBtn.disabled = !termsCheckbox.checked;
        }
        
        // Vérifier l'état initial
        termsCheckbox.addEventListener('change', validateForm);
        validateForm();
        
        // Mettre en évidence le champ industry lorsqu'il est sélectionné
        const industrySelect = document.querySelector('.select-industry');
        
        if (industrySelect) {
            industrySelect.addEventListener('change', function() {
                if (this.value) {
                    this.classList.add('selected');
                } else {
                    this.classList.remove('selected');
                }
            });
            
            // Vérifier si une valeur est déjà sélectionnée au chargement
            if (industrySelect.value) {
                industrySelect.classList.add('selected');
            }
        }
    });
</script> <!-- Modal pour les Terms of Service -->
<div id="termsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Terms of Service</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <h3>1. Introduction</h3>
            <p>Welcome to our platform. By using our services, you agree to these terms and conditions.</p>
            
            <h3>2. User Accounts</h3>
            <p>When you create an account with us, you must provide accurate information. You are responsible for maintaining the security of your account.</p>
            
            <h3>3. Company Responsibilities</h3>
            <p>As a company user, you agree to:</p>
            <ul>
                <li>Provide accurate information about your company</li>
                <li>Post legitimate job opportunities</li>
                <li>Respect the privacy of job seekers</li>
                <li>Not discriminate against applicants based on protected characteristics</li>
            </ul>
            
            <h3>4. Content Guidelines</h3>
            <p>You may not post content that is illegal, misleading, or harmful.</p>
            
            <h3>5. Termination</h3>
            <p>We reserve the right to terminate accounts that violate these terms.</p>
        </div>
        <div class="modal-footer">
            <div class="terms-agreement">
                <input type="checkbox" id="modalTermsAgree">
                <label for="modalTermsAgree">I have read and agree to the Terms of Service</label>
            </div>
            <button id="acceptTerms" class="btn-accept" disabled>Accept</button>
        </div>
    </div>
</div>

<!-- Modal pour la Privacy Policy -->
<div id="privacyModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Privacy Policy</h2>
            <span class="close">&times;</span>
        </div>
        <div class="modal-body">
            <h3>1. Information We Collect</h3>
            <p>We collect information you provide when creating an account, including your name, email, and company details.</p>
            
            <h3>2. How We Use Your Information</h3>
            <p>We use your information to:</p>
            <ul>
                <li>Provide and improve our services</li>
                <li>Communicate with you</li>
                <li>Match job seekers with appropriate opportunities</li>
            </ul>
            
            <h3>3. Information Sharing</h3>
            <p>We share your information with job seekers who apply to your posted positions.</p>
            
            <h3>4. Data Security</h3>
            <p>We implement security measures to protect your personal information.</p>
            
            <h3>5. Your Rights</h3>
            <p>You have the right to access, correct, or delete your personal information.</p>
        </div>
        <div class="modal-footer">
            <div class="terms-agreement">
                <input type="checkbox" id="modalPrivacyAgree">
                <label for="modalPrivacyAgree">I have read and agree to the Privacy Policy</label>
            </div>
            <button id="acceptPrivacy" class="btn-accept" disabled>Accept</button>
        </div>
    </div>
</div>

==================================================

Fichier: templates\registration\register_job_seeker.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\registration\register_job_seeker.html.twig
-----
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Seeker Registration</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .fullscreen-register {
            display: flex;
            min-height: 100vh;
        }

        /* Register Panel */
        .register-panel {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            background-color: var(--white);
        }

        .register-box {
            width: 100%;
            max-width: 500px;
            padding: 2.5rem;
            background-color: var(--light-color);
            border-radius: 15px;
            box-shadow: var(--shadow);
        }

        .register-header {
            margin-bottom: 2rem;
        }

        .register-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 0.5rem;
        }

        .register-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .register-subtitle {
            color: var(--medium-gray);
            font-size: 0.9rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 2px solid var(--medium-gray);
            border-radius: 8px;
            font-size: 1rem;
            transition: var(--transition);
            background-color: var(--white);
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
            outline: none;
        }

        .d-none {
            display: none;
        }

        /* Welcome Panel */
        .welcome-panel {
            flex: 1;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
            position: relative;
            overflow: hidden;
        }

        .welcome-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .welcome-content {
            max-width: 500px;
            text-align: center;
            color: var(--white);
            z-index: 1;
            padding: 2rem;
        }

        .welcome-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .welcome-text {
            font-size: 1.1rem;
            margin-bottom: 2rem;
            line-height: 1.6;
            opacity: 0.9;
        }

        .btn-signin {
            background-color: var(--white);
            color: var(--primary-color);
            padding: 0.8rem 2rem;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: var(--transition);
            box-shadow: var(--shadow);
        }

        .btn-signin:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        /* Button Styles */
        .btn-register {
            width: 100%;
            padding: 0.9rem;
            background: linear-gradient(to right, var(--primary-color), var(--accent-color));
            color: var(--white);
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            box-shadow: 0 5px 15px rgba(214, 40, 40, 0.3);
            margin-top: 1rem;
        }

        .btn-register:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(214, 40, 40, 0.4);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .fullscreen-register {
                flex-direction: column;
            }

            .welcome-panel {
                padding: 3rem 1rem;
                clip-path: ellipse(150% 100% at 50% 0%);
            }

            .register-panel {
                padding: 2rem 1rem;
            }

            .register-box {
                padding: 1.5rem;
            }

            .welcome-title {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
<div class="fullscreen-register">
    <!-- Register Panel -->
    <div class="register-panel">
        <div class="register-box">
            <div class="register-header">
                <h1 class="register-title">Job Seeker Registration</h1>
                <p class="register-subtitle">Create your account to start your journey</p>
            </div>

            {{ form_start(registrationForm) }}
                <div class="form-group">
                    {{ form_row(registrationForm.email, {
                        'label': 'Email',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'your@email.com'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    {{ form_row(registrationForm.username, {
                        'label': 'Username',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Choose a username'
                        }
                    }) }}
                </div>

                <div class="form-group">
                    {{ form_row(registrationForm.plainPassword, {
                        'label': 'Password',
                        'attr': {
                            'class': 'form-control',
                            'placeholder': 'Create a password'
                        }
                    }) }}

                </div>
                {{ form_row(registrationForm._token) }} 
                {# Hidden fields - only include fields that exist in your form #}
                {% if registrationForm.companyName is defined %}
                    {{ form_widget(registrationForm.companyName, {'attr': {'class': 'd-none'}}) }}
                {% endif %}
                
                {% if registrationForm.industry is defined %}
                    {{ form_widget(registrationForm.industry, {'attr': {'class': 'd-none'}}) }}
                {% endif %}

                <input type="hidden" name="user_type" value="job_seeker">

                <button type="submit" class="btn-register">REGISTER</button>
            {{ form_end(registrationForm, {'render_rest': false}) }}
        </div>
    </div>

    <!-- Welcome Panel -->
    <div class="welcome-panel">
        <div class="welcome-content">
            <h2 class="welcome-title">Already Registered?</h2>
            <p class="welcome-text">To keep connected with us please login with your personal info</p>
            <a href="{{ path('app_login') }}" class="btn-signin">
                <i class="fas fa-sign-in-alt"></i> Sign In
            </a>
        </div>
    </div>
</div>
</body>
</html>
==================================================

Fichier: templates\reset_password\check_email.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\reset_password\check_email.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Password Reset Email Sent{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h1 class="h3 mb-3 font-weight-normal">Password Reset Email Sent</h1>
                </div>
                <div class="card-body">
                    <p>
                        If an account exists with the email you provided, we have sent a password reset link.
                        This link will expire in {{ resetToken.expirationMessageKey|trans(resetToken.expirationMessageData, 'ResetPasswordBundle') }}.
                    </p>
                    <p>If you don't receive an email please check your spam folder or <a href="{{ path('app_forgot_password_request') }}">try again</a>.</p>
                    <p>
                        <a href="{{ path('app_login') }}" class="btn btn-primary">Back to login</a>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\reset_password\email.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\reset_password\email.html.twig
-----
{% extends 'email/base.email.html.twig' %}

{% block title %}Password Reset{% endblock %}

{% block header %}Password Reset Request{% endblock %}

{% block body %}
    <h2>Hi!</h2>
    <p>To reset your password, please click the button below:</p>
    
    <a href="{{ url('app_reset_password', {token: resetToken}) }}" class="btn">Reset my password</a>
    
    <p>This link will expire in {{ tokenLifetime|date('g') }} hour(s).</p>
    
    <p>If you did not request a password reset, please ignore this email.</p>
    
    <p>Best regards,<br>The Job Seeker Team</p>
{% endblock %}

==================================================

Fichier: templates\reset_password\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\reset_password\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Hello ResetPasswordController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code>C:/Users/ASUS STRIX GAMER/Desktop/Dossier/vs code/symfony/workshope/src/Controller/ResetPasswordController.php</code></li>
        <li>Your template at <code>C:/Users/ASUS STRIX GAMER/Desktop/Dossier/vs code/symfony/workshope/templates/reset_password/index.html.twig</code></li>
    </ul>
</div>
{% endblock %}

==================================================

Fichier: templates\reset_password\request.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\reset_password\request.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Reset your password{% endblock %}

{% block body %}
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h1 class="h3 mb-3 font-weight-normal">Reset your password</h1>
                    </div>
                    <div class="card-body">
                        {% for flashError in app.flashes('reset_password_error') %}
                            <div class="alert alert-danger" role="alert">{{ flashError }}</div>
                        {% endfor %}
                        
                        {{ form_start(requestForm) }}
                            {{ form_row(requestForm.email) }}
                            <div class="form-group">
                                <small class="text-muted">
                                    Enter your email address and we will send you a
                                    link to reset your password.
                                </small>
                            </div>
                            <button class="btn btn-primary">Send password reset email</button>
                        {{ form_end(requestForm) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

==================================================

Fichier: templates\reset_password\reset.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\reset_password\reset.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Reset your password{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h1 class="h3 mb-3 font-weight-normal">Reset your password</h1>
                </div>
                <div class="card-body">
                    {% for flashError in app.flashes('reset_password_error') %}
                        <div class="alert alert-danger" role="alert">{{ flashError }}</div>
                    {% endfor %}
                    
                    <p>Enter your new password below:</p>
                    
                    {# Ici, vous devrez ajouter un formulaire pour la réinitialisation du mot de passe #}
                    <form method="post">
                        <div class="form-group">
                            <label for="plainPassword">New password</label>
                            <input type="password" name="plainPassword" id="plainPassword" class="form-control" required>
                        </div>
                        
                        <input type="hidden" name="token" value="{{ token }}">
                        
                        <button class="btn btn-primary">Reset password</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
==================================================

Fichier: templates\security\login.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\security\login.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Connexion Job Seeker{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
{% endblock %}

{% block body %}
<style>
    :root {
        --primary-color: #d62828;
        --secondary-color: #ba181b;
        --accent-color: #e5383b;
        --light-color: #f5f3f4;
        --white: #ffffff;
        --dark: #161a1d;
        --medium-gray: #b1a7a6;
        --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--light-color);
        color: var(--dark);
    }

    .fullscreen-login {
        display: flex;
        height: 100vh;
        width: 100vw;
        position: relative;
    }

    /* Left Panel - Full Height */
    .welcome-panel {
        flex: 1;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        position: relative;
        overflow: hidden;
        border-radius: 0 15px 15px 0;
    }

    .welcome-panel::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('https://images.unsplash.com/photo-1521791055366-0d553872125f?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
        opacity: 0.15;
        z-index: 0;
    }

    .welcome-content {
        max-width: 500px;
        text-align: center;
        color: var(--white);
        z-index: 1;
        padding: 2rem;
        animation: fadeInLeft 1s both;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .welcome-text {
        font-size: 1.1rem;
        margin-bottom: 2rem;
        line-height: 1.6;
        opacity: 0.9;
    }

    .btn-back {
        background-color: var(--white);
        color: var(--primary-color);
        padding: 0.8rem 2rem;
        border-radius: 50px;
        text-decoration: none;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: var(--transition);
        box-shadow: var(--shadow);
    }

    .btn-back:hover {
        transform: translateY(-3px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
    }

    /* Right Panel - Full Height */
    .login-panel {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        background-color: var(--white);
        animation: fadeInRight 1s both 0.2s;
    }

    .login-box {
        width: 100%;
        max-width: 400px;
        padding: 2.5rem;
        background-color: var(--light-color);
        border-radius: 15px;
        box-shadow: var(--shadow);
    }

    .login-header {
        margin-bottom: 2rem;
    }

    .login-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--dark);
        position: relative;
        display: inline-block;
    }

    .login-title::after {
        content: '';
        position: absolute;
        bottom: -10px;
        left: 0;
        width: 50px;
        height: 4px;
        background: var(--primary-color);
        border-radius: 2px;
    }

    .login-subtitle {
        color: var(--accent-color);
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }

    /* Form Styles */
    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--dark);
    }

    .form-control {
        width: 100%;
        padding: 0.9rem 1.2rem;
        border: 2px solid var(--medium-gray);
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
        background-color: var(--white);
    }

    .form-control:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.2);
        outline: none;
    }

    .forgot-link {
        display: block;
        text-align: right;
        margin-top: 0.5rem;
        color: var(--secondary-color);
        font-size: 0.85rem;
        text-decoration: none;
        transition: var(--transition);
    }

    .forgot-link:hover {
        color: var(--primary-color);
        text-decoration: underline;
    }

    .btn-login {
        width: 100%;
        padding: 0.9rem;
        background: linear-gradient(to right, var(--primary-color), var(--accent-color));
        color: var(--white);
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: 0 5px 15px rgba(214, 40, 40, 0.3);
        margin-top: 1rem;
    }

    .btn-login:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(214, 40, 40, 0.4);
    }

    /* Social Login */
    .social-divider {
        text-align: center;
        margin: 2rem 0;
        color: var(--medium-gray);
        position: relative;
    }

    .social-divider::before,
    .social-divider::after {
        content: '';
        position: absolute;
        top: 50%;
        width: 30%;
        height: 1px;
        background: var(--medium-gray);
    }

    .social-divider::before {
        left: 0;
    }

    .social-divider::after {
        right: 0;
    }

    .social-icons {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
        margin-top: 1rem;
    }

    .social-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: var(--white);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
        border: 1px solid var(--medium-gray);
        padding: 10px;
        box-sizing: border-box;
    }

    .social-icon:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .social-icon.facebook:hover {
        background: #3b5998;
        color: white;
    }

    .social-icon.google:hover {
        background: #db4437;
        color: white;
    }

    .social-icon.twitter:hover {
        background: #1da1f2;
        color: white;
    }

    /* Error Message */
    .alert-danger {
        background-color: rgba(214, 40, 40, 0.1);
        color: var(--primary-color);
        padding: 0.75rem 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        border-left: 4px solid var(--primary-color);
        animation: shake 0.5s;
    }

    /* Register Link */
    .register-link {
        text-align: center;
        margin-top: 2rem;
        color: var(--medium-gray);
    }

    .register-link a {
        color: var(--primary-color);
        text-decoration: none;
        transition: var(--transition);
    }

    .register-link a:hover {
        text-decoration: underline;
    }

    /* Animations */
    @keyframes fadeInLeft {
        from {
            opacity: 0;
            transform: translateX(-50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes fadeInRight {
        from {
            opacity: 0;
            transform: translateX(50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes shake {
        0%, 100% {
            transform: translateX(0);
        }
        20%, 60% {
            transform: translateX(-5px);
        }
        40%, 80% {
            transform: translateX(5px);
        }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .fullscreen-login {
            flex-direction: column;
            height: auto;
            min-height: 100vh;
        }

        .welcome-panel {
            padding: 3rem 1rem;
            clip-path: ellipse(150% 100% at 50% 0%);
            border-radius: 0 0 15px 15px;
        }

        .login-panel {
            padding: 2rem 1rem;
        }

        .login-box {
            padding: 1.5rem;
        }

        .welcome-title {
            font-size: 2rem;
        }
    }
</style>

<div class="fullscreen-login">
    <!-- Welcome Panel -->
    <div class="welcome-panel">
        <div class="welcome-content animate__animated animate__fadeInLeft">
            <h1 class="welcome-title">Job Seeker Platform</h1>
            <p class="welcome-text">Trouvez l'emploi de vos rêves parmi des milliers d'offres et boostez votre carrière</p>
            <a href="{{ path('app_register_choice') }}" class="btn-back">
                <i class="fas fa-arrow-left"></i> Créer un compte
            </a>
        </div>
    </div>

    <!-- Login Panel -->
    <div class="login-panel">
        <div class="login-box">
            <div class="login-header">
                <h2 class="login-title">Connexion</h2>
                <p class="login-subtitle">Accédez à votre espace personnel</p>
            </div>

            {% if error %}
                <div class="alert-danger animate__animated animate__shakeX">
                    <i class="fas fa-exclamation-circle"></i> {{ error.messageKey|trans(error.messageData, 'security') }}
                </div>
            {% endif %}

            <form method="post">
                <div class="form-group">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" 
                           name="email" 
                           id="email" 
                           class="form-control" 
                           value="{{ last_username }}" 
                           placeholder="votre@email.com" 
                           required 
                           autofocus>
                </div>

                <div class="form-group">
                    <label for="password" class="form-label">Mot de passe</label>
                    <input type="password" 
                           name="password" 
                           id="password" 
                           class="form-control" 
                           placeholder="••••••••" 
                           required>
                    <a href="{{ path('app_forgot_password_request') }}" class="forgot-link">Mot de passe oublié ?</a>
                </div>

                <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}">

                <button type="submit" class="btn-login">
                    <i class="fas fa-sign-in-alt"></i> Se connecter
                </button>

                <div class="social-divider">Ou connectez-vous avec</div>

                <div class="social-icons">
                    <a href="#" class="social-icon google">
                        <img src="{{ asset('img/google.png') }}" alt="Google" width="30" height="30">
                    </a>
                    <a href="#" class="social-icon linkedin">
                        <img src="{{ asset('img/linkedin.png') }}" alt="LinkedIn" width="30" height="30">
                    </a>
                    <a href="#" class="social-icon facebook">
                        <img src="{{ asset('img/facebook.png') }}" alt="Facebook" width="30" height="30">
                    </a>
                </div>
            </form>

            <div class="register-link">
                Nouveau candidat ? <a href="{{ path('app_register_choice') }}">Créez un compte</a>
            </div>
        </div>
    </div>
</div>

<!-- Font Awesome -->
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
{% endblock %}

==================================================

Fichier: templates\service\index.html.twig
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\templates\service\index.html.twig
-----
{% extends 'base.html.twig' %}

{% block title %}Hello ServiceController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<div class="example-wrapper">
    <h1>Hello {{ controller_name }}! ✅</h1>

    This friendly message is coming from:
    <ul>
        <li>Your controller at <code>C:/Users/ASUS STRIX GAMER/Desktop/Dossier/vs code/symfony/workshope/src/Controller/ServiceController.php</code></li>
        <li>Your template at <code>C:/Users/ASUS STRIX GAMER/Desktop/Dossier/vs code/symfony/workshope/templates/service/index.html.twig</code></li>
    </ul>
</div>
{% endblock %}

==================================================

Fichier: config\packages\asset_mapper.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\asset_mapper.yaml
-----
framework:
    asset_mapper:
        # The paths to make available to the asset mapper.
        paths:
            - assets/
        missing_import_mode: strict

when@prod:
    framework:
        asset_mapper:
            missing_import_mode: warn

==================================================

Fichier: config\packages\cache.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\cache.yaml
-----
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

==================================================

Fichier: config\packages\csrf.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\csrf.yaml
-----
# Enable stateless CSRF protection for forms and logins/logouts
framework:
    form:
        csrf_protection:
            token_id: submit

    csrf_protection:
        stateless_token_ids:
            - authenticate
            - logout

==================================================

Fichier: config\packages\debug.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\debug.yaml
-----
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

==================================================

Fichier: config\packages\doctrine.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\doctrine.yaml
-----
doctrine:
    dbal:
        url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'

        profiling_collect_backtrace: '%kernel.debug%'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        identity_generation_preferences:
            Doctrine\DBAL\Platforms\PostgreSQLPlatform: identity
        auto_mapping: true
        mappings:
            App:
                type: attribute
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App
        controller_resolver:
            auto_mapping: false

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system

==================================================

Fichier: config\packages\doctrine_migrations.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\doctrine_migrations.yaml
-----
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false

==================================================

Fichier: config\packages\framework.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\framework.yaml
-----
# config/packages/framework.yaml
framework:
    secret: '%env(APP_SECRET)%'
    session:
        handler_id: null
        cookie_secure: auto
        cookie_samesite: lax
    
    # Configuration des assets - CHOISIR UNE SEULE OPTION :
    assets:
        # Option 1 (recommandée avec Webpack Encore) :
        json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'
        
        # OU Option 2 (sans Webpack Encore) :
        # version: 'v1'
        # version_format: '%%s?version=%%s'
        
        packages:
            app:
                base_path: '/'

when@dev:
    framework:
        profiler: 
            collect: true
            collect_parameter: true
            only_exceptions: false

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file


==================================================

Fichier: config\packages\mailer.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\mailer.yaml
-----
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

==================================================

Fichier: config\packages\mercure.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\mercure.yaml
-----
mercure:
    hubs:
        default:
            url: '%env(MERCURE_URL)%'
            public_url: '%env(MERCURE_PUBLIC_URL)%'
            jwt:
                secret: '%env(MERCURE_JWT_SECRET)%'
                publish: '*'


==================================================

Fichier: config\packages\messenger.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\messenger.yaml
-----
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            async:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                options:
                    use_notify: true
                    check_delayed_interval: 60000
                retry_strategy:
                    max_retries: 3
                    multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        default_bus: messenger.bus.default

        buses:
            messenger.bus.default: []

        routing:
            Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            Symfony\Component\Notifier\Message\ChatMessage: async
            Symfony\Component\Notifier\Message\SmsMessage: async
            App\Message\MercureUpdateMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async


==================================================

Fichier: config\packages\monolog.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\monolog.yaml
-----
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json

==================================================

Fichier: config\packages\notifier.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\notifier.yaml
-----
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }

==================================================

Fichier: config\packages\reset_password.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\reset_password.yaml
-----
symfonycasts_reset_password:
    request_password_repository: App\Repository\ResetPasswordRequestRepository
    lifetime: 3600
    throttle_limit: 3600

==================================================

Fichier: config\packages\routing.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\routing.yaml
-----
framework:
    router:
        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null

==================================================

Fichier: config\packages\security.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\security.yaml
-----
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
            
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: app_login
            
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 # 1 semaine
                path: /
                remember_me_parameter: 'remember_me'

    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/job-seeker, roles: ROLE_JOB_SEEKER }
        - { path: ^/company, roles: ROLE_COMPANY }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4

==================================================

Fichier: config\packages\translation.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\translation.yaml
-----
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:

==================================================

Fichier: config\packages\twig.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\twig.yaml
-----
twig:
    file_name_pattern: '*.twig'

when@test:
    twig:
        strict_variables: true

==================================================

Fichier: config\packages\validator.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\validator.yaml
-----
framework:
    validation:
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false

==================================================

Fichier: config\packages\webpack_encore.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\webpack_encore.yaml
-----
webpack_encore:
    # The path where Encore is building the assets
    output_path: '%kernel.project_dir%/public/build'
    
    # If using Encore.enableIntegrityHashes() and need the crossorigin attribute
    crossorigin: 'anonymous'
    
    # Preload all rendered script and link tags automatically via the HTTP/2 Link header
    preload: true
    
    # Throw an exception if the entrypoints.json file is missing or an entry is missing
    strict_mode: true
    
    # Cache the entrypoints.json (rebuild Symfony's cache when entrypoints.json changes)
    cache: true

    script_attributes:
        defer: true

framework:
    assets:
        json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'

#when@prod:
#    webpack_encore:
#        # Cache the entrypoints.json (rebuild Symfony's cache when entrypoints.json changes)
#        # Available in version 1.2
#        cache: true

#when@test:
#    webpack_encore:
#        strict_mode: false


==================================================

Fichier: config\packages\web_profiler.yaml
Chemin complet: C:\Users\Sh-Pc\Desktop\symfony checkpoint\Final\Esprimfinal-main\config\packages\web_profiler.yaml
-----
when@dev:
    web_profiler:
        toolbar: true

    framework:
        profiler:
            collect_serializer_data: true

when@test:
    framework:
        profiler: { collect: false }

==================================================

